{
  "extras": {},
  "openapi": {
    "components": {
      "schemas": {
        "AccessPolicy": {
          "description": "Serializer for AccessPolicy.",
          "properties": {
            "creation_hooks": {
              "description": "List of callables that may associate user roles for new objects.",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "permissions_assignment": {
              "description": "List of callables that define the new permissions to be created for new objects.This is deprecated. Use `creation_hooks` instead.",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "queryset_scoping": {
              "description": "A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping.",
              "type": "object"
            },
            "statements": {
              "description": "List of policy statements defining the policy.",
              "items": {
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "statements"
          ],
          "type": "object"
        },
        "AccessPolicyResponse": {
          "description": "Serializer for AccessPolicy.",
          "properties": {
            "creation_hooks": {
              "description": "List of callables that may associate user roles for new objects.",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "customized": {
              "description": "True if the AccessPolicy has been user-modified. False otherwise.",
              "readOnly": true,
              "type": "boolean"
            },
            "permissions_assignment": {
              "description": "List of callables that define the new permissions to be created for new objects.This is deprecated. Use `creation_hooks` instead.",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "queryset_scoping": {
              "description": "A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping.",
              "type": "object"
            },
            "statements": {
              "description": "List of policy statements defining the policy.",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "viewset_name": {
              "description": "The name of ViewSet this AccessPolicy authorizes.",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "statements"
          ],
          "type": "object"
        },
        "AnsibleDistributionResponse": {
          "properties": {
            "base_path": {
              "type": "string"
            },
            "content_guard": {
              "format": "uuid",
              "nullable": true,
              "type": "string"
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "created_at",
            "name",
            "updated_at"
          ],
          "type": "object"
        },
        "AnsibleRepositoryMark": {
          "description": "A serializer for the mark action.",
          "properties": {
            "content_units": {
              "description": "List of collection version hrefs to mark, use * to mark all content in repository",
              "items": {},
              "type": "array"
            },
            "value": {
              "description": "The string value of this mark.",
              "minLength": 1,
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            }
          },
          "required": [
            "content_units",
            "value"
          ],
          "type": "object"
        },
        "AnsibleRepositoryRebuild": {
          "description": "Serializer for Ansible Repository Rebuild.",
          "properties": {
            "name": {
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "namespace": {
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "version": {
              "minLength": 1,
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "AnsibleRepositoryResponse": {
          "properties": {
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "description": {
              "nullable": true,
              "type": "string"
            },
            "distributions": {
              "items": {
                "$ref": "#/components/schemas/AnsibleDistributionResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "last_sync_task": {
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "next_version": {
              "format": "int64",
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "created_at",
            "name",
            "updated_at"
          ],
          "type": "object"
        },
        "AnsibleRepositorySignature": {
          "description": "A serializer for the signing action.",
          "properties": {
            "content_units": {
              "description": "List of collection version hrefs to sign, use * to sign all content in repository",
              "items": {},
              "type": "array"
            },
            "signing_service": {
              "description": "A signing service to use to sign the collections",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "content_units",
            "signing_service"
          ],
          "type": "object"
        },
        "AnsibleRepositorySyncURL": {
          "description": "Serializer for Ansible Repository Sync URL.",
          "properties": {
            "mirror": {
              "default": false,
              "description": "If ``True``, synchronization will remove all content that is not present in the remote repository. If ``False``, sync will be additive only.",
              "type": "boolean"
            },
            "optimize": {
              "default": true,
              "description": "Whether to optimize sync or not.",
              "type": "boolean"
            },
            "remote": {
              "description": "A remote to sync from. This will override a remote set on repository.",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ApiAppStatusResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "last_heartbeat": {
              "description": "Timestamp of the last time the worker talked to the service.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "The name of the worker.",
              "readOnly": true,
              "type": "string"
            },
            "versions": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "description": "Versions of the components installed.",
              "readOnly": true,
              "type": "object"
            }
          },
          "type": "object"
        },
        "Artifact": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "file": {
              "description": "The stored file.",
              "format": "binary",
              "type": "string"
            },
            "md5": {
              "description": "The MD5 checksum of the file if available.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "sha1": {
              "description": "The SHA-1 checksum of the file if available.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "sha224": {
              "description": "The SHA-224 checksum of the file if available.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "sha256": {
              "description": "The SHA-256 checksum of the file if available.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "sha384": {
              "description": "The SHA-384 checksum of the file if available.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "sha512": {
              "description": "The SHA-512 checksum of the file if available.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "size": {
              "description": "The size of the file in bytes.",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "file"
          ],
          "type": "object"
        },
        "ArtifactDistributionResponse": {
          "description": "A serializer for ArtifactDistribution.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "type": "string"
            },
            "base_url": {
              "description": "The URL for accessing the publication as defined by this distribution.",
              "readOnly": true,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name"
          ],
          "type": "object"
        },
        "ArtifactRefResponse": {
          "description": "A serializer for an Artifact reference.",
          "properties": {
            "filename": {
              "type": "string"
            },
            "sha256": {
              "type": "string"
            },
            "size": {
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "filename",
            "sha256",
            "size"
          ],
          "type": "object"
        },
        "ArtifactResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "file": {
              "description": "The stored file.",
              "type": "string"
            },
            "md5": {
              "description": "The MD5 checksum of the file if available.",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "sha1": {
              "description": "The SHA-1 checksum of the file if available.",
              "nullable": true,
              "type": "string"
            },
            "sha224": {
              "description": "The SHA-224 checksum of the file if available.",
              "nullable": true,
              "type": "string"
            },
            "sha256": {
              "description": "The SHA-256 checksum of the file if available.",
              "nullable": true,
              "type": "string"
            },
            "sha384": {
              "description": "The SHA-384 checksum of the file if available.",
              "nullable": true,
              "type": "string"
            },
            "sha512": {
              "description": "The SHA-512 checksum of the file if available.",
              "nullable": true,
              "type": "string"
            },
            "size": {
              "description": "The size of the file in bytes.",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "file"
          ],
          "type": "object"
        },
        "AsyncOperationResponse": {
          "description": "Serializer for asynchronous operations.",
          "properties": {
            "task": {
              "description": "The href of the task.",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "task"
          ],
          "type": "object"
        },
        "ClientConfigurationResponse": {
          "description": "Configuration settings for the ansible-galaxy client.",
          "properties": {
            "default_distribution_path": {
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "default_distribution_path"
          ],
          "type": "object"
        },
        "CollectionImportDetailResponse": {
          "description": "A serializer for a CollectionImport detail view.",
          "properties": {
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "error": {
              "type": "object"
            },
            "finished_at": {
              "format": "date-time",
              "type": "string"
            },
            "id": {
              "format": "uuid",
              "type": "string"
            },
            "messages": {
              "type": "object"
            },
            "started_at": {
              "format": "date-time",
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "created_at",
            "id",
            "messages",
            "started_at",
            "state",
            "updated_at"
          ],
          "type": "object"
        },
        "CollectionMetadataResponse": {
          "description": "A serializer for a CollectionVersion metadata.",
          "properties": {
            "authors": {
              "items": {
                "maxLength": 64,
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "contents": {
              "readOnly": true,
              "type": "object"
            },
            "dependencies": {
              "readOnly": true,
              "type": "object"
            },
            "description": {
              "readOnly": true,
              "type": "string"
            },
            "documentation": {
              "readOnly": true,
              "type": "string"
            },
            "homepage": {
              "readOnly": true,
              "type": "string"
            },
            "issues": {
              "readOnly": true,
              "type": "string"
            },
            "license": {
              "items": {
                "maxLength": 32,
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "repository": {
              "readOnly": true,
              "type": "string"
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "tags"
          ],
          "type": "object"
        },
        "CollectionNamespaceResponse": {
          "description": "A serializer for a Collection Version namespace field.",
          "properties": {
            "metadata_sha256": {
              "nullable": true,
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "metadata_sha256",
            "name"
          ],
          "type": "object"
        },
        "CollectionOneShot": {
          "description": "A serializer for the Collection One Shot Upload API.",
          "properties": {
            "expected_name": {
              "description": "The expected 'name' of the Collection to be verified against the metadata during import.",
              "minLength": 1,
              "type": "string"
            },
            "expected_namespace": {
              "description": "The expected 'namespace' of the Collection to be verified against the metadata during import.",
              "minLength": 1,
              "type": "string"
            },
            "expected_version": {
              "description": "The expected version of the Collection to be verified against the metadata during import.",
              "minLength": 1,
              "type": "string"
            },
            "file": {
              "description": "The Collection tarball.",
              "format": "binary",
              "type": "string"
            },
            "sha256": {
              "description": "An optional sha256 checksum of the uploaded file.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "file"
          ],
          "type": "object"
        },
        "CollectionRefResponse": {
          "description": "A serializer for a Collection reference.",
          "properties": {
            "href": {
              "description": "Returns link to a collection.",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "name"
          ],
          "type": "object"
        },
        "CollectionResponse": {
          "description": "A serializer for a Collection.",
          "properties": {
            "created_at": {
              "description": "Get the timestamp of the lowest version CollectionVersion's created timestamp.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "deprecated": {
              "type": "boolean"
            },
            "download_count": {
              "readOnly": true,
              "type": "string"
            },
            "highest_version": {
              "description": "Get a highest version and its link.",
              "readOnly": true,
              "type": "object"
            },
            "href": {
              "description": "Get href.",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "readOnly": true,
              "type": "string"
            },
            "namespace": {
              "readOnly": true,
              "type": "string"
            },
            "updated_at": {
              "description": "Get the timestamp of the latest version CollectionVersion's created timestamp.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "versions_url": {
              "description": "Get a link to a collection versions list.",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "deprecated"
          ],
          "type": "object"
        },
        "CollectionSummary": {
          "description": "Collection Version serializer without docs blob.",
          "properties": {},
          "type": "object"
        },
        "CollectionSummaryResponse": {
          "description": "Collection Version serializer without docs blob.",
          "properties": {
            "contents": {
              "description": "A JSON field with data about the contents.",
              "readOnly": true,
              "type": "object"
            },
            "dependencies": {
              "description": "A dict declaring Collections that this collection requires to be installed for it to be usable.",
              "readOnly": true,
              "type": "object"
            },
            "description": {
              "description": "A short summary description of the collection.",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "The name of the collection.",
              "maxLength": 64,
              "readOnly": true,
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the collection.",
              "maxLength": 64,
              "readOnly": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "requires_ansible": {
              "description": "The version of Ansible required to use the collection. Multiple versions can be separated with a comma.",
              "maxLength": 255,
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "tags": {
              "items": {
                "$ref": "#/components/schemas/ansible.TagResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "version": {
              "description": "The version of the collection.",
              "maxLength": 128,
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "CollectionUploadWithDownloadUrl": {
          "description": "A serializer for the Collection One Shot Upload API.",
          "properties": {
            "file": {
              "format": "binary",
              "type": "string"
            },
            "sha256": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "file"
          ],
          "type": "object"
        },
        "CollectionVersionCopyMove": {
          "description": "Copy or move collections from a source repository into one or more destinations.\n\nThis will carry associated content like Signatures and Marks along.",
          "properties": {
            "collection_versions": {
              "description": "A list of collection versions to move or copy.",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            },
            "destination_repositories": {
              "description": "List of repository HREFs to put content in.",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            },
            "signing_service": {
              "description": "HREF for a signing service. This will be used to sign the collection before moving putting it in any new repositories.",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "collection_versions",
            "destination_repositories"
          ],
          "type": "object"
        },
        "CollectionVersionDocsResponse": {
          "description": "A serializer to display the docs_blob of a CollectionVersion.",
          "properties": {
            "docs_blob": {
              "type": "object"
            }
          },
          "required": [
            "docs_blob"
          ],
          "type": "object"
        },
        "CollectionVersionListResponse": {
          "description": "A serializer for a CollectionVersion list item.",
          "properties": {
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "href": {
              "description": "Get href.",
              "readOnly": true,
              "type": "string"
            },
            "marks": {
              "description": "Get a list of mark values filtering only those in the current repo.",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "requires_ansible": {
              "maxLength": 255,
              "nullable": true,
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "version": {
              "maxLength": 128,
              "type": "string"
            }
          },
          "required": [
            "created_at",
            "updated_at",
            "version"
          ],
          "type": "object"
        },
        "CollectionVersionResponse": {
          "description": "A serializer for a CollectionVersion.",
          "properties": {
            "artifact": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ArtifactRefResponse"
                }
              ],
              "readOnly": true
            },
            "collection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CollectionRefResponse"
                }
              ],
              "readOnly": true
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "download_url": {
              "description": "Get artifact download URL.",
              "readOnly": true,
              "type": "string"
            },
            "files": {
              "description": "A JSON field holding FILES.json data.",
              "readOnly": true,
              "type": "object"
            },
            "git_commit_sha": {
              "description": "Get the git commit sha.",
              "readOnly": true,
              "type": "string"
            },
            "git_url": {
              "description": "Get the git URL.",
              "readOnly": true,
              "type": "string"
            },
            "href": {
              "description": "Get href.",
              "readOnly": true,
              "type": "string"
            },
            "manifest": {
              "description": "A JSON field holding MANIFEST.json data.",
              "readOnly": true,
              "type": "object"
            },
            "marks": {
              "description": "Get a list of mark values filtering only those in the current repo.",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "metadata": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CollectionMetadataResponse"
                }
              ],
              "readOnly": true
            },
            "name": {
              "readOnly": true,
              "type": "string"
            },
            "namespace": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CollectionNamespaceResponse"
                }
              ],
              "readOnly": true
            },
            "requires_ansible": {
              "maxLength": 255,
              "nullable": true,
              "type": "string"
            },
            "signatures": {
              "items": {
                "$ref": "#/components/schemas/CollectionVersionSignatureResponse"
              },
              "type": "array"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "version": {
              "maxLength": 128,
              "type": "string"
            }
          },
          "required": [
            "created_at",
            "signatures",
            "updated_at",
            "version"
          ],
          "type": "object"
        },
        "CollectionVersionSearchList": {
          "description": "Cross-repo search results.",
          "properties": {
            "collection_version": {
              "$ref": "#/components/schemas/CollectionSummary"
            },
            "is_deprecated": {
              "type": "boolean"
            },
            "is_highest": {
              "type": "boolean"
            },
            "is_signed": {
              "type": "boolean"
            },
            "namespace_metadata": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              ],
              "nullable": true
            },
            "repository": {
              "$ref": "#/components/schemas/Repository"
            }
          },
          "required": [
            "collection_version",
            "is_deprecated",
            "is_highest",
            "is_signed",
            "namespace_metadata",
            "repository"
          ],
          "type": "object"
        },
        "CollectionVersionSearchListResponse": {
          "description": "Cross-repo search results.",
          "properties": {
            "collection_version": {
              "$ref": "#/components/schemas/CollectionSummaryResponse"
            },
            "is_deprecated": {
              "type": "boolean"
            },
            "is_highest": {
              "type": "boolean"
            },
            "is_signed": {
              "type": "boolean"
            },
            "namespace_metadata": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                }
              ],
              "nullable": true
            },
            "repository": {
              "$ref": "#/components/schemas/RepositoryResponse"
            },
            "repository_version": {
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "collection_version",
            "is_deprecated",
            "is_highest",
            "is_signed",
            "namespace_metadata",
            "repository"
          ],
          "type": "object"
        },
        "CollectionVersionSignatureResponse": {
          "description": "A serializer for the signatures on a Collection Version.",
          "properties": {
            "pubkey_fingerprint": {
              "maxLength": 64,
              "type": "string"
            },
            "pulp_created": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "signature": {
              "readOnly": true,
              "type": "string"
            },
            "signing_service": {
              "nullable": true,
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "pubkey_fingerprint"
          ],
          "type": "object"
        },
        "CompositeContentGuard": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "guards": {
              "description": "List of ContentGuards to ask for access-permission.",
              "items": {
                "format": "uri",
                "nullable": true,
                "type": "string"
              },
              "type": "array"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "CompositeContentGuardResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "guards": {
              "description": "List of ContentGuards to ask for access-permission.",
              "items": {
                "format": "uri",
                "nullable": true,
                "type": "string"
              },
              "type": "array"
            },
            "name": {
              "description": "The unique name.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ContainerNamespaceResponse": {
          "properties": {
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "id": {
              "format": "uuid",
              "type": "string"
            },
            "my_permissions": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MyPermissionsFieldResponse"
                }
              ],
              "readOnly": true
            },
            "name": {
              "readOnly": true,
              "type": "string"
            },
            "owners": {
              "items": {},
              "readOnly": true,
              "type": "array"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "created_at",
            "id",
            "updated_at"
          ],
          "type": "object"
        },
        "ContainerRepositoryResponse": {
          "properties": {
            "created_at": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "description": {
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "readOnly": true,
              "type": "string"
            },
            "namespace": {
              "$ref": "#/components/schemas/ContainerNamespaceResponse"
            },
            "pulp": {
              "readOnly": true,
              "type": "object"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "namespace"
          ],
          "type": "object"
        },
        "ContainerRepositorySyncURL": {
          "description": "Serializer for Container Sync.",
          "properties": {
            "mirror": {
              "default": false,
              "description": "If ``True``, synchronization will remove all content that is not present in the remote repository. If ``False``, sync will be additive only.",
              "type": "boolean"
            },
            "remote": {
              "description": "A remote to sync from. This will override a remote set on repository.",
              "format": "uri",
              "type": "string"
            },
            "signed_only": {
              "default": false,
              "description": "If ``True``, only signed content will be synced. Signatures are not verified.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "ContentAppStatusResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "last_heartbeat": {
              "description": "Timestamp of the last time the worker talked to the service.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "The name of the worker.",
              "readOnly": true,
              "type": "string"
            },
            "versions": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "description": "Versions of the components installed.",
              "readOnly": true,
              "type": "object"
            }
          },
          "type": "object"
        },
        "ContentGuardResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ContentRedirectContentGuard": {
          "description": "A serializer for ContentRedirectContentGuard.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ContentRedirectContentGuardResponse": {
          "description": "A serializer for ContentRedirectContentGuard.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ContentSettingsResponse": {
          "description": "Serializer for information about content-app-settings for the pulp instance",
          "properties": {
            "content_origin": {
              "description": "The CONTENT_ORIGIN setting for this Pulp instance",
              "type": "string"
            },
            "content_path_prefix": {
              "description": "The CONTENT_PATH_PREFIX setting for this Pulp instance",
              "type": "string"
            }
          },
          "required": [
            "content_origin",
            "content_path_prefix"
          ],
          "type": "object"
        },
        "ContentSummaryResponse": {
          "description": "Serializer for the RepositoryVersion content summary",
          "properties": {
            "added": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            },
            "present": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            },
            "removed": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "required": [
            "added",
            "present",
            "removed"
          ],
          "type": "object"
        },
        "Copy": {
          "description": "A serializer for Content Copy API.",
          "properties": {
            "config": {
              "description": "A JSON document describing sources, destinations, and content to be copied",
              "type": "object"
            }
          },
          "required": [
            "config"
          ],
          "type": "object"
        },
        "CurrentUser": {
          "properties": {
            "email": {
              "format": "email",
              "maxLength": 254,
              "title": "Email address",
              "type": "string"
            },
            "first_name": {
              "maxLength": 150,
              "type": "string"
            },
            "is_superuser": {
              "description": "Designates that this user has all permissions without explicitly assigning them.",
              "title": "Superuser status",
              "type": "boolean"
            },
            "last_name": {
              "maxLength": 150,
              "type": "string"
            },
            "password": {
              "maxLength": 128,
              "type": "string",
              "writeOnly": true
            },
            "username": {
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
              "maxLength": 150,
              "minLength": 1,
              "pattern": "^[\\w.@+-]+$",
              "type": "string"
            }
          },
          "required": [
            "username"
          ],
          "type": "object"
        },
        "CurrentUserResponse": {
          "properties": {
            "auth_provider": {
              "readOnly": true,
              "type": "string"
            },
            "date_joined": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "email": {
              "format": "email",
              "maxLength": 254,
              "title": "Email address",
              "type": "string"
            },
            "first_name": {
              "maxLength": 150,
              "type": "string"
            },
            "groups": {
              "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups.",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "readOnly": true,
              "type": "array"
            },
            "id": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "is_anonymous": {
              "readOnly": true,
              "type": "string"
            },
            "is_superuser": {
              "description": "Designates that this user has all permissions without explicitly assigning them.",
              "title": "Superuser status",
              "type": "boolean"
            },
            "last_name": {
              "maxLength": 150,
              "type": "string"
            },
            "model_permissions": {
              "readOnly": true,
              "type": "object"
            },
            "username": {
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
              "maxLength": 150,
              "pattern": "^[\\w.@+-]+$",
              "type": "string"
            }
          },
          "required": [
            "username"
          ],
          "type": "object"
        },
        "DatabaseConnectionResponse": {
          "description": "Serializer for the database connection information",
          "properties": {
            "connected": {
              "description": "Info about whether the app can connect to the database",
              "type": "boolean"
            }
          },
          "required": [
            "connected"
          ],
          "type": "object"
        },
        "DistributionResponse": {
          "properties": {
            "base_path": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "pulp_id": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "repository": {
              "$ref": "#/components/schemas/RepositoryResponse"
            }
          },
          "required": [
            "base_path",
            "name",
            "repository"
          ],
          "type": "object"
        },
        "Domain": {
          "description": "Serializer for Domain.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "hide_guarded_distributions": {
              "default": false,
              "description": "Boolean to hide distributions with a content guard in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A name for this domain.",
              "maxLength": 50,
              "minLength": 1,
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            },
            "redirect_to_object_storage": {
              "default": true,
              "description": "Boolean to have the content app redirect to object storage.",
              "type": "boolean"
            },
            "storage_class": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StorageClassEnum"
                }
              ],
              "description": "Backend storage class for domain.\n\n* `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage\n* `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage\n* `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage"
            },
            "storage_settings": {
              "description": "Settings for storage class.",
              "type": "object"
            }
          },
          "required": [
            "name",
            "storage_class",
            "storage_settings"
          ],
          "type": "object"
        },
        "DomainResponse": {
          "description": "Serializer for Domain.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "hide_guarded_distributions": {
              "default": false,
              "description": "Boolean to hide distributions with a content guard in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A name for this domain.",
              "maxLength": 50,
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "redirect_to_object_storage": {
              "default": true,
              "description": "Boolean to have the content app redirect to object storage.",
              "type": "boolean"
            },
            "storage_class": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StorageClassEnum"
                }
              ],
              "description": "Backend storage class for domain.\n\n* `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage\n* `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage\n* `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage"
            },
            "storage_settings": {
              "description": "Settings for storage class.",
              "type": "object"
            }
          },
          "required": [
            "name",
            "storage_class",
            "storage_settings"
          ],
          "type": "object"
        },
        "EvaluationResponse": {
          "description": "Results from evaluating a proposed parameter to a PulpImport call.",
          "properties": {
            "context": {
              "description": "Parameter value being evaluated.",
              "type": "string"
            },
            "is_valid": {
              "description": "True if evaluation passed, false otherwise.",
              "type": "boolean"
            },
            "messages": {
              "description": "Messages describing results of all evaluations done. May be an empty list.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "context",
            "is_valid",
            "messages"
          ],
          "type": "object"
        },
        "FilesystemExport": {
          "description": "Serializer for FilesystemExports.",
          "properties": {
            "publication": {
              "description": "A URI of the publication to be exported.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            },
            "repository_version": {
              "description": "A URI of the repository version export.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            },
            "start_repository_version": {
              "description": "The URI of the last-exported-repo-version.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            },
            "task": {
              "description": "A URI of the task that ran the Export.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "FilesystemExportResponse": {
          "description": "Serializer for FilesystemExports.",
          "properties": {
            "exported_resources": {
              "description": "Resources that were exported.",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "params": {
              "description": "Any additional parameters that were used to create the export.",
              "readOnly": true,
              "type": "object"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "task": {
              "description": "A URI of the task that ran the Export.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "FilesystemExporter": {
          "description": "Serializer for FilesystemExporters.",
          "properties": {
            "method": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MethodEnum"
                }
              ],
              "default": "write",
              "description": "Method of exporting\n\n* `write` - Export by writing\n* `hardlink` - Export by hardlinking\n* `symlink` - Export by symlinking"
            },
            "name": {
              "description": "Unique name of the file system exporter.",
              "minLength": 1,
              "type": "string"
            },
            "path": {
              "description": "File system location to export to.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name",
            "path"
          ],
          "type": "object"
        },
        "FilesystemExporterResponse": {
          "description": "Serializer for FilesystemExporters.",
          "properties": {
            "method": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MethodEnum"
                }
              ],
              "default": "write",
              "description": "Method of exporting\n\n* `write` - Export by writing\n* `hardlink` - Export by hardlinking\n* `symlink` - Export by symlinking"
            },
            "name": {
              "description": "Unique name of the file system exporter.",
              "type": "string"
            },
            "path": {
              "description": "File system location to export to.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name",
            "path"
          ],
          "type": "object"
        },
        "GalaxyCollection": {
          "description": "A serializer for a Collection.",
          "properties": {
            "created": {
              "format": "date-time",
              "type": "string"
            },
            "id": {
              "minLength": 1,
              "type": "string"
            },
            "modified": {
              "format": "date-time",
              "type": "string"
            },
            "name": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "created",
            "id",
            "modified",
            "name"
          ],
          "type": "object"
        },
        "GalaxyCollectionResponse": {
          "description": "A serializer for a Collection.",
          "properties": {
            "created": {
              "format": "date-time",
              "type": "string"
            },
            "href": {
              "description": "Get href.",
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "latest_version": {
              "description": "Get latest version.",
              "readOnly": true,
              "type": "object"
            },
            "modified": {
              "format": "date-time",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "description": "Create a namespace dict.",
              "readOnly": true,
              "type": "object"
            },
            "versions_url": {
              "description": "Get versions_url.",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "created",
            "id",
            "modified",
            "name"
          ],
          "type": "object"
        },
        "GalaxyCollectionVersionResponse": {
          "description": "A serializer for a CollectionVersion.",
          "properties": {
            "artifact": {
              "description": "Create an artifact dict.",
              "readOnly": true,
              "type": "object"
            },
            "collection": {
              "description": "Create a collection dict.",
              "readOnly": true,
              "type": "object"
            },
            "href": {
              "description": "Get href.",
              "readOnly": true,
              "type": "string"
            },
            "metadata": {
              "$ref": "#/components/schemas/CollectionMetadataResponse"
            },
            "namespace": {
              "description": "Create a namespace dict.",
              "readOnly": true,
              "type": "object"
            },
            "version": {
              "type": "string"
            }
          },
          "required": [
            "metadata",
            "version"
          ],
          "type": "object"
        },
        "GalaxyRoleResponse": {
          "description": "A serializer for Galaxy's representation of Roles.",
          "properties": {
            "id": {
              "description": "Get id.",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object"
        },
        "GalaxyRoleVersionResponse": {
          "description": "A serializer for Galaxy's representation of Role versions.",
          "properties": {
            "name": {
              "type": "string"
            },
            "source": {
              "description": "Get source.",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "Group": {
          "description": "Serializer for Group.",
          "properties": {
            "name": {
              "description": "Name",
              "maxLength": 150,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "GroupProgressReportResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "code": {
              "description": "Identifies the type of group progress report'.",
              "readOnly": true,
              "type": "string"
            },
            "done": {
              "description": "The count of items already processed. Defaults to 0.",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "message": {
              "description": "The message shown to the user for the group progress report.",
              "readOnly": true,
              "type": "string"
            },
            "suffix": {
              "description": "The suffix to be shown with the group progress report.",
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "total": {
              "description": "The total count of items.",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "GroupResponse": {
          "description": "Serializer for Group.",
          "properties": {
            "id": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "name": {
              "description": "Name",
              "maxLength": 150,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "GroupRole": {
          "description": "Serializer for GroupRole.",
          "properties": {
            "content_object": {
              "description": "pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "domain": {
              "description": "Domain this role should be applied on, mutually exclusive with content_object.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "role": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "content_object",
            "role"
          ],
          "type": "object"
        },
        "GroupRoleResponse": {
          "description": "Serializer for GroupRole.",
          "properties": {
            "content_object": {
              "description": "pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on the model-level.",
              "nullable": true,
              "type": "string"
            },
            "description": {
              "readOnly": true,
              "type": "string"
            },
            "domain": {
              "description": "Domain this role should be applied on, mutually exclusive with content_object.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "permissions": {
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "role": {
              "type": "string"
            }
          },
          "required": [
            "content_object",
            "role"
          ],
          "type": "object"
        },
        "GroupUser": {
          "description": "Serializer for Users that belong to a Group.",
          "properties": {
            "username": {
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
              "maxLength": 150,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "username"
          ],
          "type": "object"
        },
        "GroupUserResponse": {
          "description": "Serializer for Users that belong to a Group.",
          "properties": {
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "username": {
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
              "maxLength": 150,
              "type": "string"
            }
          },
          "required": [
            "username"
          ],
          "type": "object"
        },
        "HeaderContentGuard": {
          "description": "A serializer for HeaderContentGuard.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "header_name": {
              "description": "The header name the guard will check on.",
              "minLength": 1,
              "type": "string"
            },
            "header_value": {
              "description": "The value that will authorize the request.",
              "minLength": 1,
              "type": "string"
            },
            "jq_filter": {
              "description": "A JQ syntax compatible filter. If jq_filter is not set, then the value willonly be Base64 decoded and checked as an explicit string match.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "header_name",
            "header_value",
            "name"
          ],
          "type": "object"
        },
        "HeaderContentGuardResponse": {
          "description": "A serializer for HeaderContentGuard.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "header_name": {
              "description": "The header name the guard will check on.",
              "type": "string"
            },
            "header_value": {
              "description": "The value that will authorize the request.",
              "type": "string"
            },
            "jq_filter": {
              "description": "A JQ syntax compatible filter. If jq_filter is not set, then the value willonly be Base64 decoded and checked as an explicit string match.",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "header_name",
            "header_value",
            "name"
          ],
          "type": "object"
        },
        "ImportResponse": {
          "description": "Serializer for Imports.",
          "properties": {
            "params": {
              "description": "Any parameters that were used to create the import.",
              "type": "object"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "task": {
              "description": "A URI of the Task that ran the Import.",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "params",
            "task"
          ],
          "type": "object"
        },
        "ImportTaskDetailResponse": {
          "description": "A serializer for a CollectionImport list view.",
          "properties": {
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "error": {
              "type": "object"
            },
            "finished_at": {
              "format": "date-time",
              "type": "string"
            },
            "id": {
              "format": "uuid",
              "type": "string"
            },
            "messages": {
              "type": "object"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "started_at": {
              "format": "date-time",
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          },
          "required": [
            "created_at",
            "error",
            "finished_at",
            "id",
            "messages",
            "name",
            "namespace",
            "started_at",
            "state",
            "updated_at",
            "version"
          ],
          "type": "object"
        },
        "ImportTaskListResponse": {
          "description": "A serializer for a CollectionImport list view.",
          "properties": {
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "finished_at": {
              "format": "date-time",
              "type": "string"
            },
            "id": {
              "format": "uuid",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "started_at": {
              "format": "date-time",
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          },
          "required": [
            "created_at",
            "finished_at",
            "id",
            "name",
            "namespace",
            "started_at",
            "state",
            "updated_at",
            "version"
          ],
          "type": "object"
        },
        "LegacyRoleTagResponse": {
          "properties": {
            "count": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "name": {
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "ManifestCopy": {
          "description": "Serializer for copying manifests from a source repository to a destination repository.",
          "properties": {
            "digests": {
              "description": "A list of manifest digests to copy.",
              "items": {},
              "type": "array"
            },
            "media_types": {
              "description": "A list of media_types to copy.",
              "items": {
                "$ref": "#/components/schemas/MediaTypesEnum"
              },
              "type": "array"
            },
            "source_repository": {
              "description": "A URI of the repository to copy content from.",
              "format": "uri",
              "title": "Repository",
              "type": "string"
            },
            "source_repository_version": {
              "description": "A URI of the repository version to copy content from.",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "MediaTypesEnum": {
          "description": "* `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json\n* `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json\n* `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json\n* `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json\n* `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json",
          "enum": [
            "application/vnd.docker.distribution.manifest.v1+json",
            "application/vnd.docker.distribution.manifest.v2+json",
            "application/vnd.docker.distribution.manifest.list.v2+json",
            "application/vnd.oci.image.manifest.v1+json",
            "application/vnd.oci.image.index.v1+json"
          ],
          "type": "string"
        },
        "MethodEnum": {
          "description": "* `write` - Export by writing\n* `hardlink` - Export by hardlinking\n* `symlink` - Export by symlinking",
          "enum": [
            "write",
            "hardlink",
            "symlink"
          ],
          "type": "string"
        },
        "MinimalTaskResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "finished_at": {
              "description": "Timestamp of when this task stopped execution.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "The name of task.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "started_at": {
              "description": "Timestamp of when this task started execution.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "state": {
              "description": "The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'.",
              "readOnly": true,
              "type": "string"
            },
            "unblocked_at": {
              "description": "Timestamp of when this task was identified ready for pickup.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "worker": {
              "description": "The worker associated with this task. This field is empty if a worker is not yet assigned.",
              "format": "uri",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "MultipleArtifactContentResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "artifacts": {
              "description": "A dict mapping relative paths inside the Content to the correspondingArtifact URLs. E.g.: {'relative/path': '/artifacts/1/'",
              "type": "object"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "artifacts"
          ],
          "type": "object"
        },
        "MyPermissionsField": {
          "type": "object"
        },
        "MyPermissionsFieldResponse": {
          "type": "object"
        },
        "MyPermissionsResponse": {
          "properties": {
            "permissions": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "permissions"
          ],
          "type": "object"
        },
        "Namespace": {
          "properties": {
            "avatar_url": {
              "format": "uri",
              "type": "string"
            },
            "company": {
              "maxLength": 64,
              "type": "string"
            },
            "description": {
              "maxLength": 256,
              "type": "string"
            },
            "email": {
              "maxLength": 256,
              "type": "string"
            },
            "groups": {
              "type": "string"
            },
            "links": {
              "items": {
                "$ref": "#/components/schemas/NamespaceLink"
              },
              "type": "array"
            },
            "name": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "resources": {
              "type": "string"
            },
            "users": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "NamespaceLink": {
          "properties": {
            "name": {
              "maxLength": 32,
              "minLength": 1,
              "type": "string"
            },
            "url": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "NamespaceLinkResponse": {
          "properties": {
            "name": {
              "maxLength": 32,
              "type": "string"
            },
            "url": {
              "maxLength": 256,
              "type": "string"
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "NamespaceRelatedField": {
          "description": "Serializer only returns fields specified in 'include_related' query param.\n\nThis allows for fields that require more database queries to be optionally\nincluded in API responses, which lowers the load on the backend. This is\nintended as a way to include extra data in list views.\n\nUsage:\n\nThis functions the same as DRF's base `serializers.Serializer` class with the\nexception that it will only return fields specified in the `?include_related=`\nquery parameter.\n\nExample:\n\nMySerializer(RelatedFieldsBaseSerializer):\n    foo = CharField()\n    bar = CharField()\n\nMySerializer will return:\n\n{\"foo\": None} when called with `?include_related=foo` and {\"foo\": None, \"bar\" None}\nwhen called with `?include_related=foo&include_related=bar`.",
          "properties": {},
          "type": "object"
        },
        "NamespaceRelatedFieldResponse": {
          "description": "Serializer only returns fields specified in 'include_related' query param.\n\nThis allows for fields that require more database queries to be optionally\nincluded in API responses, which lowers the load on the backend. This is\nintended as a way to include extra data in list views.\n\nUsage:\n\nThis functions the same as DRF's base `serializers.Serializer` class with the\nexception that it will only return fields specified in the `?include_related=`\nquery parameter.\n\nExample:\n\nMySerializer(RelatedFieldsBaseSerializer):\n    foo = CharField()\n    bar = CharField()\n\nMySerializer will return:\n\n{\"foo\": None} when called with `?include_related=foo` and {\"foo\": None, \"bar\" None}\nwhen called with `?include_related=foo&include_related=bar`.",
          "properties": {
            "my_permissions": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MyPermissionsFieldResponse"
                }
              ],
              "readOnly": true
            }
          },
          "type": "object"
        },
        "NamespaceResponse": {
          "properties": {
            "avatar_sha256": {
              "readOnly": true,
              "type": "string"
            },
            "avatar_url": {
              "format": "uri",
              "type": "string"
            },
            "company": {
              "maxLength": 64,
              "type": "string"
            },
            "description": {
              "maxLength": 256,
              "type": "string"
            },
            "email": {
              "maxLength": 256,
              "type": "string"
            },
            "groups": {
              "type": "string"
            },
            "id": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "links": {
              "items": {
                "$ref": "#/components/schemas/NamespaceLinkResponse"
              },
              "type": "array"
            },
            "metadata_sha256": {
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "maxLength": 64,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "related_fields": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NamespaceRelatedFieldResponse"
                }
              ],
              "readOnly": true
            },
            "resources": {
              "type": "string"
            },
            "users": {
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "NamespaceSummaryResponse": {
          "description": "NamespaceSerializer but without 'links' or 'resources'.\n\nFor use in _ui/collection detail views.",
          "properties": {
            "avatar_sha256": {
              "readOnly": true,
              "type": "string"
            },
            "avatar_url": {
              "format": "uri",
              "type": "string"
            },
            "company": {
              "maxLength": 64,
              "type": "string"
            },
            "description": {
              "maxLength": 256,
              "type": "string"
            },
            "email": {
              "maxLength": 256,
              "type": "string"
            },
            "groups": {
              "type": "string"
            },
            "id": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "metadata_sha256": {
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "related_fields": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NamespaceRelatedFieldResponse"
                }
              ],
              "readOnly": true
            },
            "users": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "NestedRole": {
          "description": "Serializer to add/remove object roles to/from users/groups.\n\nThis is used in conjunction with ``pulpcore.app.viewsets.base.RolesMixin`` and requires the\nunderlying object to be passed as ``content_object`` in the context.",
          "properties": {
            "groups": {
              "default": [],
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "role": {
              "minLength": 1,
              "type": "string"
            },
            "users": {
              "default": [],
              "items": {
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "role"
          ],
          "type": "object"
        },
        "NestedRoleResponse": {
          "description": "Serializer to add/remove object roles to/from users/groups.\n\nThis is used in conjunction with ``pulpcore.app.viewsets.base.RolesMixin`` and requires the\nunderlying object to be passed as ``content_object`` in the context.",
          "properties": {
            "groups": {
              "default": [],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "role": {
              "type": "string"
            },
            "users": {
              "default": [],
              "items": {
                "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "role"
          ],
          "type": "object"
        },
        "OCIBuildImage": {
          "description": "Serializer for building an OCI container image from a Containerfile.\n\nThe Containerfile can either be specified via an artifact url, or a new file can be uploaded.\nA repository must be specified, to which the container image content will be added.",
          "properties": {
            "artifacts": {
              "description": "A JSON string where each key is an artifact href and the value is it's relative path (name) inside the /pulp_working_directory of the build container executing the Containerfile.",
              "type": "object"
            },
            "containerfile": {
              "description": "An uploaded Containerfile that should be used to run podman-build.",
              "format": "binary",
              "type": "string"
            },
            "containerfile_artifact": {
              "description": "Artifact representing the Containerfile that should be used to run podman-build.",
              "format": "uri",
              "type": "string"
            },
            "tag": {
              "default": "latest",
              "description": "A tag name for the new image being built.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "ObjectRolesResponse": {
          "properties": {
            "roles": {
              "items": {
                "$ref": "#/components/schemas/NestedRoleResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "roles"
          ],
          "type": "object"
        },
        "OrphansCleanup": {
          "properties": {
            "content_hrefs": {
              "description": "Will delete specified content and associated Artifacts if they are orphans.",
              "items": {},
              "type": "array"
            },
            "orphan_protection_time": {
              "description": "The time in minutes for how long Pulp will hold orphan Content and Artifacts before they become candidates for deletion by this orphan cleanup task. This should ideally be longer than your longest running task otherwise any content created during that task could be cleaned up before the task finishes. If not specified, a default value is taken from the setting ORPHAN_PROTECTION_TIME.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PaginatedAccessPolicyResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/AccessPolicyResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedArtifactDistributionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ArtifactDistributionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedArtifactResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ArtifactResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedCollectionResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/CollectionResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedCollectionVersionListResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/CollectionVersionListResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedCollectionVersionSearchListResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedCompositeContentGuardResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/CompositeContentGuardResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedContentGuardResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ContentGuardResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedContentRedirectContentGuardResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedDistributionResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/DistributionResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedDomainResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/DomainResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedFilesystemExportResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/FilesystemExportResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedFilesystemExporterResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/FilesystemExporterResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedGalaxyCollectionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?page=4",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?page=2",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/GalaxyCollectionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedGalaxyCollectionVersionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?page=4",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?page=2",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/GalaxyCollectionVersionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedGalaxyRoleResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/GalaxyRoleResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedGalaxyRoleVersionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/GalaxyRoleVersionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedGroupResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/GroupResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedGroupRoleResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/GroupRoleResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedGroupUserResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/GroupUserResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedHeaderContentGuardResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/HeaderContentGuardResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedImportResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ImportResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedImportTaskListResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/ImportTaskListResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedLegacyRoleTagResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/LegacyRoleTagResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedMultipleArtifactContentResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/MultipleArtifactContentResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedNamespaceSummaryResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/NamespaceSummaryResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedPublicationResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/PublicationResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedPulpExportResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/PulpExportResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedPulpExporterResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/PulpExporterResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedPulpImporterResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/PulpImporterResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedRBACContentGuardResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/RBACContentGuardResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedRemoteResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/RemoteResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedRepositoryResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/RepositoryResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedRepositoryVersionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/RepositoryVersionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedResourceListResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?page=4",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?page=2",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ResourceListResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedResourceTypeResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?page=4",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?page=2",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ResourceTypeResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedRoleResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/RoleResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedSearchResultsResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/SearchResultsResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedSigningServiceResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/SigningServiceResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedSyncListResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/SyncListResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedTagResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/TagResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedTaskGroupResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/TaskGroupResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedTaskResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/TaskResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedTaskScheduleResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/TaskScheduleResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedTaskSummaryResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/TaskSummaryResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedUploadResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/UploadResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedUpstreamPulpResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/UpstreamPulpResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedUserResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/UserResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaginatedUserRoleResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/UserRoleResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "PaginatedWorkerResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/WorkerResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.AnsibleDistributionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.AnsibleDistributionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.AnsibleNamespaceMetadataResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.AnsibleRepositoryResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.AnsibleRepositoryResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.CollectionRemoteResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "Paginatedansible.CollectionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.CollectionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.CollectionVersionMarkResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.CollectionVersionMarkResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.CollectionVersionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.CollectionVersionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.CollectionVersionSignatureResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.CollectionVersionSignatureResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.GitRemoteResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.GitRemoteResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.RoleRemoteResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.RoleRemoteResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedansible.RoleResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/ansible.RoleResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcertguard.RHSMCertGuardResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/certguard.RHSMCertGuardResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcertguard.X509CertGuardResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/certguard.X509CertGuardResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.BlobResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.BlobResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ContainerDistributionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ContainerDistributionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ContainerNamespaceResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ContainerNamespaceResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ContainerPullThroughDistributionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ContainerPullThroughDistributionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ContainerPullThroughRemoteResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ContainerPullThroughRemoteResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ContainerPushRepositoryResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ContainerPushRepositoryResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ContainerRemoteResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ContainerRemoteResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ContainerRepositoryResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ContainerRepositoryResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ManifestResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ManifestResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.ManifestSignatureResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.ManifestSignatureResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedcontainer.TagResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/container.TagResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedfile.FileAlternateContentSourceResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/file.FileAlternateContentSourceResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedfile.FileContentResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/file.FileContentResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedfile.FileDistributionResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/file.FileDistributionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedfile.FilePublicationResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/file.FilePublicationResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedfile.FileRemoteResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/file.FileRemoteResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedfile.FileRepositoryResponseList": {
          "properties": {
            "count": {
              "example": 123,
              "type": "integer"
            },
            "next": {
              "example": "http://api.example.org/accounts/?offset=400&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "previous": {
              "example": "http://api.example.org/accounts/?offset=200&limit=100",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "results": {
              "items": {
                "$ref": "#/components/schemas/file.FileRepositoryResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "count",
            "results"
          ],
          "type": "object"
        },
        "Paginatedgalaxy.LoginResponseList": {
          "properties": {
            "data": {
              "items": {
                "$ref": "#/components/schemas/galaxy.LoginResponse"
              },
              "type": "array"
            },
            "links": {
              "properties": {
                "first": {
                  "nullable": true,
                  "type": "string"
                },
                "last": {
                  "nullable": true,
                  "type": "string"
                },
                "next": {
                  "nullable": true,
                  "type": "string"
                },
                "previous": {
                  "nullable": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "meta": {
              "properties": {
                "count": {
                  "example": 123,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PatchedAccessPolicy": {
          "description": "Serializer for AccessPolicy.",
          "properties": {
            "creation_hooks": {
              "description": "List of callables that may associate user roles for new objects.",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "permissions_assignment": {
              "description": "List of callables that define the new permissions to be created for new objects.This is deprecated. Use `creation_hooks` instead.",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "queryset_scoping": {
              "description": "A callable for performing queryset scoping. See plugin documentation for valid callables. Set to blank to turn off queryset scoping.",
              "type": "object"
            },
            "statements": {
              "description": "List of policy statements defining the policy.",
              "items": {
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "PatchedCollection": {
          "description": "A serializer for a Collection.",
          "properties": {
            "deprecated": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "PatchedCompositeContentGuard": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "guards": {
              "description": "List of ContentGuards to ask for access-permission.",
              "items": {
                "format": "uri",
                "nullable": true,
                "type": "string"
              },
              "type": "array"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedContentRedirectContentGuard": {
          "description": "A serializer for ContentRedirectContentGuard.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedDomain": {
          "description": "Serializer for Domain.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "hide_guarded_distributions": {
              "default": false,
              "description": "Boolean to hide distributions with a content guard in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A name for this domain.",
              "maxLength": 50,
              "minLength": 1,
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            },
            "redirect_to_object_storage": {
              "default": true,
              "description": "Boolean to have the content app redirect to object storage.",
              "type": "boolean"
            },
            "storage_class": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StorageClassEnum"
                }
              ],
              "description": "Backend storage class for domain.\n\n* `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage\n* `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage\n* `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage"
            },
            "storage_settings": {
              "description": "Settings for storage class.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "PatchedFilesystemExporter": {
          "description": "Serializer for FilesystemExporters.",
          "properties": {
            "method": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MethodEnum"
                }
              ],
              "default": "write",
              "description": "Method of exporting\n\n* `write` - Export by writing\n* `hardlink` - Export by hardlinking\n* `symlink` - Export by symlinking"
            },
            "name": {
              "description": "Unique name of the file system exporter.",
              "minLength": 1,
              "type": "string"
            },
            "path": {
              "description": "File system location to export to.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedGroup": {
          "description": "Serializer for Group.",
          "properties": {
            "name": {
              "description": "Name",
              "maxLength": 150,
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedHeaderContentGuard": {
          "description": "A serializer for HeaderContentGuard.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "header_name": {
              "description": "The header name the guard will check on.",
              "minLength": 1,
              "type": "string"
            },
            "header_value": {
              "description": "The value that will authorize the request.",
              "minLength": 1,
              "type": "string"
            },
            "jq_filter": {
              "description": "A JQ syntax compatible filter. If jq_filter is not set, then the value willonly be Base64 decoded and checked as an explicit string match.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedNamespace": {
          "properties": {
            "avatar_url": {
              "format": "uri",
              "type": "string"
            },
            "company": {
              "maxLength": 64,
              "type": "string"
            },
            "description": {
              "maxLength": 256,
              "type": "string"
            },
            "email": {
              "maxLength": 256,
              "type": "string"
            },
            "groups": {
              "type": "string"
            },
            "links": {
              "items": {
                "$ref": "#/components/schemas/NamespaceLink"
              },
              "type": "array"
            },
            "name": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "resources": {
              "type": "string"
            },
            "users": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedPulpExporter": {
          "description": "Serializer for pulp exporters.",
          "properties": {
            "last_export": {
              "description": "Last attempted export for this PulpExporter",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "Unique name of the file system exporter.",
              "minLength": 1,
              "type": "string"
            },
            "path": {
              "description": "File system directory to store exported tar.gzs.",
              "minLength": 1,
              "type": "string"
            },
            "repositories": {
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "PatchedPulpImporter": {
          "description": "Serializer for PulpImporters.",
          "properties": {
            "name": {
              "description": "Unique name of the Importer.",
              "minLength": 1,
              "type": "string"
            },
            "repo_mapping": {
              "additionalProperties": {
                "minLength": 1,
                "type": "string"
              },
              "description": "Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\".",
              "type": "object"
            }
          },
          "type": "object"
        },
        "PatchedRBACContentGuard": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedResource": {
          "properties": {
            "ansible_id": {
              "format": "uuid",
              "type": "string"
            },
            "resource_data": {
              "type": "object"
            },
            "resource_type": {
              "minLength": 1,
              "type": "string"
            },
            "service_id": {
              "format": "uuid",
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedRole": {
          "description": "Serializer for Role.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The name of this role.",
              "minLength": 1,
              "type": "string"
            },
            "permissions": {
              "description": "List of permissions defining the role.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "PatchedSyncList": {
          "properties": {
            "collections": {
              "items": {
                "$ref": "#/components/schemas/SyncListCollectionSummary"
              },
              "type": "array"
            },
            "distribution": {
              "format": "uuid",
              "nullable": true,
              "type": "string"
            },
            "groups": {
              "type": "string"
            },
            "name": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "namespaces": {
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "policy": {
              "$ref": "#/components/schemas/Policy8baEnum"
            },
            "upstream_repository": {
              "format": "uuid",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedTaskCancel": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "state": {
              "description": "The desired state of the task. Only 'canceled' is accepted.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PatchedUpstreamPulp": {
          "description": "Serializer for a Server.",
          "properties": {
            "api_root": {
              "description": "The API root. Defaults to '/pulp/'.",
              "minLength": 1,
              "type": "string"
            },
            "base_url": {
              "description": "The transport, hostname, and an optional port of the Pulp server. e.g. https://example.com",
              "minLength": 1,
              "type": "string"
            },
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "domain": {
              "description": "The domain of the Pulp server if enabled.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this Pulp server.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_label_select": {
              "description": "One or more comma separated labels that will be used to filter distributions on the upstream Pulp. E.g. \"foo=bar,key=val\" or \"foo,key\"",
              "nullable": true,
              "type": "string"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "type": "object"
        },
        "PatchedUser": {
          "properties": {
            "email": {
              "format": "email",
              "maxLength": 254,
              "title": "Email address",
              "type": "string"
            },
            "first_name": {
              "maxLength": 150,
              "type": "string"
            },
            "groups": {
              "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups.",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            },
            "is_superuser": {
              "description": "Designates that this user has all permissions without explicitly assigning them.",
              "title": "Superuser status",
              "type": "boolean"
            },
            "last_name": {
              "maxLength": 150,
              "type": "string"
            },
            "password": {
              "maxLength": 128,
              "type": "string",
              "writeOnly": true
            },
            "username": {
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
              "maxLength": 150,
              "minLength": 1,
              "pattern": "^[\\w.@+-]+$",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedansible.AnsibleDistribution": {
          "description": "Serializer for Ansible Distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "minLength": 1,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "repository_version": {
              "description": "RepositoryVersion to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedansible.AnsibleNamespaceMetadata": {
          "description": "A serializer for Namespaces.",
          "properties": {
            "avatar": {
              "description": "Optional avatar image for Namespace",
              "format": "binary",
              "type": "string",
              "writeOnly": true
            },
            "company": {
              "description": "Optional namespace company owner.",
              "maxLength": 64,
              "type": "string"
            },
            "description": {
              "description": "Optional short description.",
              "maxLength": 256,
              "type": "string"
            },
            "email": {
              "description": "Optional namespace contact email.",
              "maxLength": 256,
              "type": "string"
            },
            "links": {
              "description": "Labeled related links.",
              "items": {
                "$ref": "#/components/schemas/NamespaceLink"
              },
              "type": "array"
            },
            "name": {
              "description": "Required named, only accepts lowercase, numbers and underscores.",
              "maxLength": 64,
              "minLength": 3,
              "pattern": "^(?!.*__)[a-z]+[0-9a-z_]*$",
              "type": "string"
            },
            "resources": {
              "description": "Optional resource page in markdown format.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedansible.AnsibleRepository": {
          "description": "Serializer for Ansible Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "gpgkey": {
              "description": "Gpg public key to verify collection signatures against",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "last_synced_metadata_time": {
              "description": "Last synced metadata time.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "private": {
              "type": "boolean"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Patchedansible.CollectionRemote": {
          "description": "A serializer for Collection Remotes.",
          "properties": {
            "auth_url": {
              "description": "The URL to receive a session token from, e.g. used with Automation Hub.",
              "maxLength": 255,
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "password": {
              "description": "Remote password.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyDb6Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
            },
            "proxy_password": {
              "description": "Password for proxy authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "User for proxy authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "requirements_file": {
              "description": "The string version of Collection requirements yaml.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "signed_only": {
              "default": false,
              "description": "Sync only collections that have a signature",
              "type": "boolean"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "token": {
              "maxLength": 2000,
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "Remote user.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedansible.GitRemote": {
          "description": "A serializer for Git Collection Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "git_ref": {
              "description": "A git ref. e.g.: branch, tag, or commit sha.",
              "minLength": 1,
              "type": "string"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "metadata_only": {
              "description": "If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "type": "object"
        },
        "Patchedansible.RoleRemote": {
          "description": "A serializer for Ansible Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyDb6Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "type": "object"
        },
        "Patchedcertguard.RHSMCertGuard": {
          "description": "RHSM Content Guard Serializer.",
          "properties": {
            "ca_certificate": {
              "description": "A Certificate Authority (CA) certificate (or a bundle thereof) used to verify client-certificate authenticity.",
              "minLength": 1,
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedcertguard.X509CertGuard": {
          "description": "X.509 Content Guard Serializer.",
          "properties": {
            "ca_certificate": {
              "description": "A Certificate Authority (CA) certificate (or a bundle thereof) used to verify client-certificate authenticity.",
              "minLength": 1,
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedcontainer.ContainerDistribution": {
          "description": "A serializer for ContainerDistribution.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "minLength": 1,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard. If none is specified, a default one will be used.",
              "format": "uri",
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "minLength": 1,
              "type": "string"
            },
            "private": {
              "description": "Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access.",
              "type": "boolean"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "repository_version": {
              "description": "RepositoryVersion to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedcontainer.ContainerPullThroughDistribution": {
          "description": "A serializer for a specialized pull-through distribution referencing sub-distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "minLength": 1,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard. If none is specified, a default one will be used.",
              "format": "uri",
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "distributions": {
              "description": "Distributions created after pulling content through cache",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "minLength": 1,
              "type": "string"
            },
            "private": {
              "description": "Restrict pull access to explicitly authorized users. Related distributions inherit this value. Defaults to unrestricted pull access.",
              "type": "boolean"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "Remote that can be used to fetch content when using pull-through caching.",
              "format": "uri",
              "type": "string"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedcontainer.ContainerPullThroughRemote": {
          "description": "A serializer for a remote used in the pull-through distribution.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy8e2Enum"
                }
              ],
              "default": "on_demand"
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "type": "object"
        },
        "Patchedcontainer.ContainerPushRepository": {
          "description": "Serializer for Container Push Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "manifest_signing_service": {
              "description": "A reference to an associated signing service.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Patchedcontainer.ContainerRemote": {
          "description": "A Serializer for ContainerRemote.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "exclude_tags": {
              "description": "\n            A list of tags to exclude during sync.\n            Wildcards *, ? are recognized.\n            'exclude_tags' is evaluated after 'include_tags'.\n            ",
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "include_tags": {
              "description": "\n            A list of tags to include during sync.\n            Wildcards *, ? are recognized.\n            'include_tags' is evaluated before 'exclude_tags'.\n            ",
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy762Enum"
                }
              ],
              "default": "immediate",
              "description": "\n        immediate - All manifests and blobs are downloaded and saved during a sync.\n        on_demand - Only tags and manifests are downloaded. Blobs are not\n                    downloaded until they are requested for the first time by a client.\n        streamed - Blobs are streamed to the client with every request and never saved.\n        \n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sigstore": {
              "description": "A URL to a sigstore to download image signatures from",
              "format": "uri",
              "minLength": 1,
              "type": "string"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "upstream_name": {
              "description": "Name of the upstream repository",
              "minLength": 1,
              "type": "string"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "type": "object"
        },
        "Patchedcontainer.ContainerRepository": {
          "description": "Serializer for Container Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "manifest_signing_service": {
              "description": "A reference to an associated signing service.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Patchedfile.FileAlternateContentSource": {
          "description": "Serializer for File alternate content source.",
          "properties": {
            "last_refreshed": {
              "description": "Date of last refresh of AlternateContentSource.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "Name of Alternate Content Source.",
              "minLength": 1,
              "type": "string"
            },
            "paths": {
              "description": "List of paths that will be appended to the Remote url when searching for content.",
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "remote": {
              "description": "The remote to provide alternate content source.",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedfile.FileDistribution": {
          "description": "Serializer for File Distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "minLength": 1,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "minLength": 1,
              "type": "string"
            },
            "publication": {
              "description": "Publication to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "Patchedfile.FileRemote": {
          "description": "Serializer for File Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy762Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content. The possible values include: 'immediate', 'on_demand', and 'streamed'. 'immediate' is the default.\n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "type": "object"
        },
        "Patchedfile.FileRepository": {
          "description": "Serializer for File Repositories.",
          "properties": {
            "autopublish": {
              "default": false,
              "description": "Whether to automatically create publications for new repository versions, and update any distributions pointing to this repository.",
              "type": "boolean"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "manifest": {
              "default": "PULP_MANIFEST",
              "description": "Filename to use for manifest file containing metadata for all the files.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "Policy762Enum": {
          "description": "* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again.",
          "enum": [
            "immediate",
            "on_demand",
            "streamed"
          ],
          "type": "string"
        },
        "Policy8baEnum": {
          "description": "* `exclude` - exclude\n* `include` - include",
          "enum": [
            "exclude",
            "include"
          ],
          "type": "string"
        },
        "Policy8e2Enum": {
          "description": "* `on_demand` - on_demand",
          "enum": [
            "on_demand"
          ],
          "type": "string"
        },
        "PolicyDb6Enum": {
          "description": "* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now.",
          "enum": [
            "immediate",
            "When syncing, download all metadata and content now."
          ],
          "type": "string"
        },
        "ProgressReportResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "code": {
              "description": "Identifies the type of progress report'.",
              "readOnly": true,
              "type": "string"
            },
            "done": {
              "description": "The count of items already processed. Defaults to 0.",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "message": {
              "description": "The message shown to the user for the progress report.",
              "readOnly": true,
              "type": "string"
            },
            "state": {
              "description": "The current state of the progress report. The possible values are: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'. The default is 'waiting'.",
              "readOnly": true,
              "type": "string"
            },
            "suffix": {
              "description": "The suffix to be shown with the progress report.",
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "total": {
              "description": "The total count of items.",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "PublicationResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "repository": {
              "description": "A URI of the repository to be published.",
              "format": "uri",
              "type": "string"
            },
            "repository_version": {
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "PulpExport": {
          "description": "Serializer for PulpExports.",
          "properties": {
            "chunk_size": {
              "description": "Chunk export-tarfile into pieces of chunk_size bytes. Recognizes units of B/KB/MB/GB/TB. A chunk has a maximum size of 1TB.",
              "minLength": 1,
              "type": "string",
              "writeOnly": true
            },
            "dry_run": {
              "default": false,
              "description": "Generate report on what would be exported and disk-space required.",
              "type": "boolean",
              "writeOnly": true
            },
            "full": {
              "default": true,
              "description": "Do a Full (true) or Incremental (false) export.",
              "type": "boolean",
              "writeOnly": true
            },
            "start_versions": {
              "description": "List of explicit last-exported-repo-version hrefs (replaces last_export).",
              "items": {
                "format": "uri",
                "type": "string",
                "writeOnly": true
              },
              "type": "array",
              "writeOnly": true
            },
            "task": {
              "description": "A URI of the task that ran the Export.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "versions": {
              "description": "List of explicit repo-version hrefs to export (replaces current_version).",
              "items": {
                "format": "uri",
                "type": "string",
                "writeOnly": true
              },
              "type": "array",
              "writeOnly": true
            }
          },
          "type": "object"
        },
        "PulpExportResponse": {
          "description": "Serializer for PulpExports.",
          "properties": {
            "exported_resources": {
              "description": "Resources that were exported.",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "output_file_info": {
              "description": "Dictionary of filename: sha256hash entries for export-output-file(s)",
              "readOnly": true,
              "type": "object"
            },
            "params": {
              "description": "Any additional parameters that were used to create the export.",
              "readOnly": true,
              "type": "object"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "task": {
              "description": "A URI of the task that ran the Export.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "toc_info": {
              "description": "Filename and sha256-checksum of table-of-contents for this export",
              "readOnly": true,
              "type": "object"
            }
          },
          "type": "object"
        },
        "PulpExporter": {
          "description": "Serializer for pulp exporters.",
          "properties": {
            "last_export": {
              "description": "Last attempted export for this PulpExporter",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "Unique name of the file system exporter.",
              "minLength": 1,
              "type": "string"
            },
            "path": {
              "description": "File system directory to store exported tar.gzs.",
              "minLength": 1,
              "type": "string"
            },
            "repositories": {
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "name",
            "path",
            "repositories"
          ],
          "type": "object"
        },
        "PulpExporterResponse": {
          "description": "Serializer for pulp exporters.",
          "properties": {
            "last_export": {
              "description": "Last attempted export for this PulpExporter",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "Unique name of the file system exporter.",
              "type": "string"
            },
            "path": {
              "description": "File system directory to store exported tar.gzs.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "repositories": {
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "name",
            "path",
            "repositories"
          ],
          "type": "object"
        },
        "PulpImport": {
          "description": "Serializer for call to import into Pulp.",
          "properties": {
            "create_repositories": {
              "default": false,
              "description": "If True, missing repositories will be automatically created during the import.",
              "type": "boolean"
            },
            "path": {
              "description": "Path to export that will be imported.",
              "minLength": 1,
              "type": "string"
            },
            "toc": {
              "description": "Path to a table-of-contents file describing chunks to be validated, reassembled, and imported.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PulpImportCheck": {
          "description": "Check validity of provided import-options.\n\nProvides the ability to check that an import is 'sane' without having to actually\ncreate an importer.",
          "properties": {
            "path": {
              "description": "Path to export-tar-gz that will be imported.",
              "minLength": 1,
              "type": "string"
            },
            "repo_mapping": {
              "description": "Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\".",
              "minLength": 1,
              "type": "string"
            },
            "toc": {
              "description": "Path to a table-of-contents file describing chunks to be validated, reassembled, and imported.",
              "minLength": 1,
              "type": "string"
            }
          },
          "type": "object"
        },
        "PulpImportCheckResponse": {
          "description": "Return the response to a PulpImport import-check call.",
          "properties": {
            "path": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EvaluationResponse"
                }
              ],
              "description": "Evaluation of proposed 'path' file for PulpImport"
            },
            "repo_mapping": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EvaluationResponse"
                }
              ],
              "description": "Evaluation of proposed 'repo_mapping' file for PulpImport"
            },
            "toc": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EvaluationResponse"
                }
              ],
              "description": "Evaluation of proposed 'toc' file for PulpImport"
            }
          },
          "type": "object"
        },
        "PulpImporter": {
          "description": "Serializer for PulpImporters.",
          "properties": {
            "name": {
              "description": "Unique name of the Importer.",
              "minLength": 1,
              "type": "string"
            },
            "repo_mapping": {
              "additionalProperties": {
                "minLength": 1,
                "type": "string"
              },
              "description": "Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\".",
              "type": "object"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "PulpImporterResponse": {
          "description": "Serializer for PulpImporters.",
          "properties": {
            "name": {
              "description": "Unique name of the Importer.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "repo_mapping": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Mapping of repo names in an export file to the repo names in Pulp. For example, if the export has a repo named 'foo' and the repo to import content into was 'bar', the mapping would be \"{'foo': 'bar'}\".",
              "type": "object"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "Purge": {
          "properties": {
            "finished_before": {
              "default": "2024-08-01",
              "description": "Purge tasks completed earlier than this timestamp. Format '%Y-%m-%d[T%H:%M:%S]'",
              "format": "date-time",
              "type": "string"
            },
            "states": {
              "default": [
                "completed"
              ],
              "description": "List of task-states to be purged. Only 'final' states are allowed.",
              "items": {
                "$ref": "#/components/schemas/StatesEnum"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "RBACContentGuard": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "RBACContentGuardResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "groups": {
              "items": {
                "$ref": "#/components/schemas/GroupResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "name": {
              "description": "The unique name.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "users": {
              "items": {
                "$ref": "#/components/schemas/GroupUserResponse"
              },
              "readOnly": true,
              "type": "array"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ReclaimSpace": {
          "description": "Serializer for reclaim disk space operation.",
          "properties": {
            "repo_hrefs": {
              "description": "Will reclaim space for the specified list of repos. Use ['*'] to specify all repos.",
              "items": {},
              "type": "array"
            },
            "repo_versions_keeplist": {
              "description": "Will exclude repo versions from space reclaim.",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "repo_hrefs"
          ],
          "type": "object"
        },
        "RecursiveManage": {
          "description": "Serializer for adding and removing content to/from a Container repository.",
          "properties": {
            "content_units": {
              "description": "A list of content units to operate on.",
              "items": {},
              "type": "array"
            }
          },
          "type": "object"
        },
        "RedisConnectionResponse": {
          "description": "Serializer for information about the Redis connection",
          "properties": {
            "connected": {
              "description": "Info about whether the app can connect to Redis",
              "type": "boolean"
            }
          },
          "required": [
            "connected"
          ],
          "type": "object"
        },
        "RemoteResponse": {
          "description": "Every remote defined by a plugin should have a Remote serializer that inherits from this\nclass. Please import from `pulpcore.plugin.serializers` rather than from this module directly.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "hidden_fields": {
              "description": "List of hidden (write only) fields",
              "items": {
                "properties": {
                  "is_set": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "is_set",
                  "name"
                ],
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "type": "string"
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyDb6Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the most recent update of the remote.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "RemoveImage": {
          "description": "A serializer for parsing and validating data associated with the image removal.",
          "properties": {
            "digest": {
              "description": "sha256 of the Manifest file",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "digest"
          ],
          "type": "object"
        },
        "RemoveSignatures": {
          "description": "A serializer for parsing and validating data associated with the signatures removal.",
          "properties": {
            "signed_with_key_id": {
              "description": "key_id of the key the signatures were produced with",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "signed_with_key_id"
          ],
          "type": "object"
        },
        "RemoveSignaturesResponse": {
          "description": "A serializer for parsing and validating data associated with the signatures removal.",
          "properties": {
            "signed_with_key_id": {
              "description": "key_id of the key the signatures were produced with",
              "type": "string"
            }
          },
          "required": [
            "signed_with_key_id"
          ],
          "type": "object"
        },
        "Repair": {
          "properties": {
            "verify_checksums": {
              "default": true,
              "description": "Will verify that the checksum of all stored files matches what saved in the database. Otherwise only the existence of the files will be checked. Enabled by default",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "RepoMetadataResponse": {
          "description": "A serializer to display RepositoryVersion metadata.",
          "properties": {
            "published": {
              "format": "date-time",
              "type": "string"
            }
          },
          "required": [
            "published"
          ],
          "type": "object"
        },
        "Repository": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "RepositoryAddRemoveContent": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "add_content_units": {
              "description": "A list of content units to add to a new repository version. This content is added after remove_content_units are removed.",
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "base_version": {
              "description": "A repository version whose content will be used as the initial set of content for the new repository version",
              "format": "uri",
              "type": "string"
            },
            "remove_content_units": {
              "description": "A list of content units to remove from the latest repository version. You may also specify '*' as an entry to remove all content. This content is removed before add_content_units are added.",
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "RepositoryResponse": {
          "properties": {
            "content_count": {
              "readOnly": true,
              "type": "integer"
            },
            "description": {
              "nullable": true,
              "type": "string"
            },
            "gpgkey": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "pulp_id": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "format": "date-time",
              "nullable": true,
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "gpgkey",
            "name"
          ],
          "type": "object"
        },
        "RepositorySign": {
          "description": "Serializer for container images signing.",
          "properties": {
            "future_base_path": {
              "description": "Future base path content will be distributed at for sync repos",
              "minLength": 1,
              "type": "string"
            },
            "manifest_signing_service": {
              "description": "A signing service to sign with. This will override a signing service set on the repo.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "tags_list": {
              "description": "A list of tags to sign.",
              "items": {},
              "type": "array"
            }
          },
          "type": "object"
        },
        "RepositorySyncURL": {
          "description": "A mixin for validating unknown serializers' fields.",
          "properties": {
            "mirror": {
              "default": false,
              "description": "If ``True``, synchronization will remove all content that is not present in the remote repository. If ``False``, sync will be additive only.",
              "type": "boolean"
            },
            "remote": {
              "description": "A remote to sync from. This will override a remote set on repository.",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "RepositoryVersionResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "base_version": {
              "description": "A repository version whose content was used as the initial set of content for this repository version",
              "format": "uri",
              "type": "string"
            },
            "content_summary": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContentSummaryResponse"
                }
              ],
              "description": "Various count summaries of the content in the version and the HREF to view them.",
              "readOnly": true
            },
            "number": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "repository": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "Resource": {
          "properties": {
            "ansible_id": {
              "format": "uuid",
              "type": "string"
            },
            "resource_data": {
              "type": "object"
            },
            "resource_type": {
              "minLength": 1,
              "type": "string"
            },
            "service_id": {
              "format": "uuid",
              "type": "string"
            }
          },
          "required": [
            "resource_data"
          ],
          "type": "object"
        },
        "ResourceListResponse": {
          "properties": {
            "ansible_id": {
              "format": "uuid",
              "type": "string"
            },
            "has_serializer": {
              "readOnly": true,
              "type": "boolean"
            },
            "name": {
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "object_id": {
              "readOnly": true,
              "type": "string"
            },
            "resource_type": {
              "type": "string"
            },
            "service_id": {
              "format": "uuid",
              "type": "string"
            },
            "url": {
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "ResourceResponse": {
          "properties": {
            "ansible_id": {
              "format": "uuid",
              "type": "string"
            },
            "has_serializer": {
              "readOnly": true,
              "type": "boolean"
            },
            "name": {
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "object_id": {
              "readOnly": true,
              "type": "string"
            },
            "resource_data": {
              "type": "object"
            },
            "resource_type": {
              "type": "string"
            },
            "service_id": {
              "format": "uuid",
              "type": "string"
            },
            "url": {
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "resource_data"
          ],
          "type": "object"
        },
        "ResourceTypeResponse": {
          "properties": {
            "externally_managed": {
              "type": "boolean"
            },
            "id": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "name": {
              "readOnly": true,
              "type": "string"
            },
            "shared_resource_type": {
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "url": {
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "externally_managed"
          ],
          "type": "object"
        },
        "Role": {
          "description": "Serializer for Role.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The name of this role.",
              "minLength": 1,
              "type": "string"
            },
            "permissions": {
              "description": "List of permissions defining the role.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "name",
            "permissions"
          ],
          "type": "object"
        },
        "RoleResponse": {
          "description": "Serializer for Role.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "locked": {
              "description": "True if the role is system managed.",
              "readOnly": true,
              "type": "boolean"
            },
            "name": {
              "description": "The name of this role.",
              "type": "string"
            },
            "permissions": {
              "description": "List of permissions defining the role.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name",
            "permissions"
          ],
          "type": "object"
        },
        "SearchResultsResponse": {
          "properties": {
            "avatar_url": {
              "type": "string"
            },
            "contents": {
              "type": "object"
            },
            "deprecated": {
              "type": "boolean"
            },
            "description": {
              "type": "string"
            },
            "download_count": {
              "format": "int64",
              "type": "integer"
            },
            "last_updated": {
              "format": "date-time",
              "type": "string"
            },
            "latest_version": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "platforms": {
              "type": "object"
            },
            "relevance": {
              "format": "double",
              "type": "number"
            },
            "search": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "type": {
              "type": "string"
            }
          },
          "required": [
            "avatar_url",
            "contents",
            "deprecated",
            "description",
            "download_count",
            "last_updated",
            "latest_version",
            "name",
            "namespace",
            "platforms",
            "relevance",
            "search",
            "tags",
            "type"
          ],
          "type": "object"
        },
        "SetLabel": {
          "description": "Serializer for synchronously setting a label.",
          "properties": {
            "key": {
              "minLength": 1,
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            },
            "value": {
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "key",
            "value"
          ],
          "type": "object"
        },
        "SetLabelResponse": {
          "description": "Serializer for synchronously setting a label.",
          "properties": {
            "key": {
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            },
            "value": {
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "key",
            "value"
          ],
          "type": "object"
        },
        "SigningServiceResponse": {
          "description": "A serializer for the model declaring a signing service.",
          "properties": {
            "name": {
              "description": "A unique name used to recognize a script.",
              "type": "string"
            },
            "pubkey_fingerprint": {
              "description": "The fingerprint of the public key.",
              "type": "string"
            },
            "public_key": {
              "description": "The value of a public key used for the repository verification.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "script": {
              "description": "An absolute path to a script which is going to be used for the signing.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "pubkey_fingerprint",
            "public_key",
            "script"
          ],
          "type": "object"
        },
        "StatesEnum": {
          "description": "* `skipped` - skipped\n* `completed` - completed\n* `failed` - failed\n* `canceled` - canceled",
          "enum": [
            "skipped",
            "completed",
            "failed",
            "canceled"
          ],
          "type": "string"
        },
        "StatusResponse": {
          "description": "Serializer for the status information of the app",
          "properties": {
            "content_settings": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContentSettingsResponse"
                }
              ],
              "description": "Content-app settings"
            },
            "database_connection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatabaseConnectionResponse"
                }
              ],
              "description": "Database connection information"
            },
            "domain_enabled": {
              "description": "Is Domains enabled",
              "type": "boolean"
            },
            "online_api_apps": {
              "description": "List of online api apps known to the application. An online api app is actively heartbeating and can serve the rest api to clients.",
              "items": {
                "$ref": "#/components/schemas/ApiAppStatusResponse"
              },
              "type": "array"
            },
            "online_content_apps": {
              "description": "List of online content apps known to the application. An online content app is actively heartbeating and can serve data to clients.",
              "items": {
                "$ref": "#/components/schemas/ContentAppStatusResponse"
              },
              "type": "array"
            },
            "online_workers": {
              "description": "List of online workers known to the application. An online worker is actively heartbeating and can respond to new work.",
              "items": {
                "$ref": "#/components/schemas/WorkerResponse"
              },
              "type": "array"
            },
            "redis_connection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RedisConnectionResponse"
                }
              ],
              "description": "Redis connection information"
            },
            "storage": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StorageResponse"
                }
              ],
              "description": "Storage information"
            },
            "versions": {
              "description": "Version information of Pulp components",
              "items": {
                "$ref": "#/components/schemas/VersionResponse"
              },
              "type": "array"
            }
          },
          "required": [
            "content_settings",
            "database_connection",
            "domain_enabled",
            "online_api_apps",
            "online_content_apps",
            "online_workers",
            "versions"
          ],
          "type": "object"
        },
        "StorageClassEnum": {
          "description": "* `pulpcore.app.models.storage.FileSystem` - Use local filesystem as storage\n* `storages.backends.s3boto3.S3Boto3Storage` - Use Amazon S3 as storage\n* `storages.backends.azure_storage.AzureStorage` - Use Azure Blob as storage",
          "enum": [
            "pulpcore.app.models.storage.FileSystem",
            "storages.backends.s3boto3.S3Boto3Storage",
            "storages.backends.azure_storage.AzureStorage"
          ],
          "type": "string"
        },
        "StorageResponse": {
          "description": "Serializer for information about the storage system",
          "properties": {
            "free": {
              "description": "Number of free bytes",
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            },
            "total": {
              "description": "Total number of bytes",
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            },
            "used": {
              "description": "Number of bytes in use",
              "format": "int64",
              "minimum": 0,
              "nullable": true,
              "type": "integer"
            }
          },
          "required": [
            "free",
            "total",
            "used"
          ],
          "type": "object"
        },
        "SyncList": {
          "properties": {
            "collections": {
              "items": {
                "$ref": "#/components/schemas/SyncListCollectionSummary"
              },
              "type": "array"
            },
            "distribution": {
              "format": "uuid",
              "nullable": true,
              "type": "string"
            },
            "groups": {
              "type": "string"
            },
            "name": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "namespaces": {
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "policy": {
              "$ref": "#/components/schemas/Policy8baEnum"
            },
            "upstream_repository": {
              "format": "uuid",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "collections",
            "groups",
            "name",
            "namespaces"
          ],
          "type": "object"
        },
        "SyncListCollectionSummary": {
          "properties": {
            "name": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            },
            "namespace": {
              "maxLength": 64,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object"
        },
        "SyncListCollectionSummaryResponse": {
          "properties": {
            "name": {
              "maxLength": 64,
              "type": "string"
            },
            "namespace": {
              "maxLength": 64,
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object"
        },
        "SyncListResponse": {
          "properties": {
            "collections": {
              "items": {
                "$ref": "#/components/schemas/SyncListCollectionSummaryResponse"
              },
              "type": "array"
            },
            "distribution": {
              "format": "uuid",
              "nullable": true,
              "type": "string"
            },
            "groups": {
              "type": "string"
            },
            "id": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "name": {
              "maxLength": 64,
              "type": "string"
            },
            "namespaces": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "policy": {
              "$ref": "#/components/schemas/Policy8baEnum"
            },
            "repository": {
              "format": "uuid",
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "upstream_repository": {
              "format": "uuid",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "collections",
            "groups",
            "name",
            "namespaces"
          ],
          "type": "object"
        },
        "TagCopy": {
          "description": "Serializer for copying tags from a source repository to a destination repository.",
          "properties": {
            "names": {
              "description": "A list of tag names to copy.",
              "items": {},
              "type": "array"
            },
            "source_repository": {
              "description": "A URI of the repository to copy content from.",
              "format": "uri",
              "title": "Repository",
              "type": "string"
            },
            "source_repository_version": {
              "description": "A URI of the repository version to copy content from.",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TagImage": {
          "description": "A serializer for parsing and validating data associated with a manifest tagging.",
          "properties": {
            "digest": {
              "description": "sha256 of the Manifest file",
              "minLength": 1,
              "type": "string"
            },
            "tag": {
              "description": "A tag name",
              "minLength": 1,
              "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$",
              "type": "string"
            }
          },
          "required": [
            "digest",
            "tag"
          ],
          "type": "object"
        },
        "TagResponse": {
          "description": "A serializer for the Tag model.",
          "properties": {
            "count": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "name": {
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "TaskGroupOperationResponse": {
          "description": "Serializer for asynchronous operations that return a task group.",
          "properties": {
            "task_group": {
              "description": "The href of the task group.",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "task_group"
          ],
          "type": "object"
        },
        "TaskGroupResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "all_tasks_dispatched": {
              "description": "Whether all tasks have been spawned for this task group.",
              "type": "boolean"
            },
            "canceled": {
              "description": "Number of tasks in the 'canceled' state",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "canceling": {
              "description": "Number of tasks in the 'canceling' state",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "completed": {
              "description": "Number of tasks in the 'completed' state",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "description": {
              "description": "A description of the task group.",
              "type": "string"
            },
            "failed": {
              "description": "Number of tasks in the 'failed' state",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "group_progress_reports": {
              "items": {
                "$ref": "#/components/schemas/GroupProgressReportResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "running": {
              "description": "Number of tasks in the 'running' state",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "skipped": {
              "description": "Number of tasks in the 'skipped' state",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "tasks": {
              "items": {
                "$ref": "#/components/schemas/MinimalTaskResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "waiting": {
              "description": "Number of tasks in the 'waiting' state",
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            }
          },
          "required": [
            "all_tasks_dispatched",
            "description"
          ],
          "type": "object"
        },
        "TaskResponse": {
          "properties": {
            "child_tasks": {
              "items": {
                "format": "uuid",
                "type": "string"
              },
              "type": "array"
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "error": {
              "nullable": true,
              "type": "object"
            },
            "finished_at": {
              "format": "date-time",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "parent_task": {
              "format": "uuid",
              "nullable": true,
              "type": "string"
            },
            "progress_reports": {
              "items": {
                "$ref": "#/components/schemas/ProgressReportResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "pulp_id": {
              "format": "uuid",
              "type": "string"
            },
            "started_at": {
              "format": "date-time",
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "worker": {
              "nullable": true,
              "readOnly": true,
              "type": "object"
            }
          },
          "required": [
            "child_tasks",
            "created_at",
            "finished_at",
            "name",
            "pulp_id",
            "started_at",
            "state",
            "updated_at"
          ],
          "type": "object"
        },
        "TaskScheduleResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "dispatch_interval": {
              "description": "Periodicity of the schedule.",
              "nullable": true,
              "type": "string"
            },
            "last_task": {
              "description": "The last task dispatched by this schedule.",
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "The name of the task schedule.",
              "type": "string"
            },
            "next_dispatch": {
              "description": "Timestamp of the next time the task will be dispatched.",
              "format": "date-time",
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "task_name": {
              "description": "The name of the task to be scheduled.",
              "type": "string"
            }
          },
          "required": [
            "dispatch_interval",
            "name",
            "task_name"
          ],
          "type": "object"
        },
        "TaskSummaryResponse": {
          "description": "TaskSerializer but without detail fields.\n\nFor use in /tasks/<str:pk>/ detail views.",
          "properties": {
            "finished_at": {
              "format": "date-time",
              "type": "string"
            },
            "href": {
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "pulp_id": {
              "format": "uuid",
              "type": "string"
            },
            "started_at": {
              "format": "date-time",
              "type": "string"
            },
            "state": {
              "type": "string"
            }
          },
          "required": [
            "finished_at",
            "name",
            "pulp_id",
            "started_at",
            "state"
          ],
          "type": "object"
        },
        "UnTagImage": {
          "description": "A serializer for parsing and validating data associated with a manifest untagging.",
          "properties": {
            "tag": {
              "description": "A tag name",
              "minLength": 1,
              "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]*$",
              "type": "string"
            }
          },
          "required": [
            "tag"
          ],
          "type": "object"
        },
        "UnpaginatedCollectionVersionResponse": {
          "description": "A serializer for unpaginated CollectionVersion.",
          "properties": {
            "artifact": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ArtifactRefResponse"
                }
              ],
              "readOnly": true
            },
            "collection": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CollectionRefResponse"
                }
              ],
              "readOnly": true
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "download_url": {
              "description": "Get artifact download URL.",
              "readOnly": true,
              "type": "string"
            },
            "git_commit_sha": {
              "description": "Get the git commit sha.",
              "readOnly": true,
              "type": "string"
            },
            "git_url": {
              "description": "Get the git URL.",
              "readOnly": true,
              "type": "string"
            },
            "href": {
              "description": "Get href.",
              "readOnly": true,
              "type": "string"
            },
            "marks": {
              "description": "Get a list of mark values filtering only those in the current repo.",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "metadata": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CollectionMetadataResponse"
                }
              ],
              "readOnly": true
            },
            "name": {
              "readOnly": true,
              "type": "string"
            },
            "namespace": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CollectionNamespaceResponse"
                }
              ],
              "readOnly": true
            },
            "requires_ansible": {
              "maxLength": 255,
              "nullable": true,
              "type": "string"
            },
            "signatures": {
              "items": {
                "$ref": "#/components/schemas/CollectionVersionSignatureResponse"
              },
              "type": "array"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "version": {
              "maxLength": 128,
              "type": "string"
            }
          },
          "required": [
            "created_at",
            "signatures",
            "updated_at",
            "version"
          ],
          "type": "object"
        },
        "UnsetLabel": {
          "description": "Serializer for synchronously setting a label.",
          "properties": {
            "key": {
              "minLength": 1,
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            }
          },
          "required": [
            "key"
          ],
          "type": "object"
        },
        "UnsetLabelResponse": {
          "description": "Serializer for synchronously setting a label.",
          "properties": {
            "key": {
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            },
            "value": {
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "key"
          ],
          "type": "object"
        },
        "Upload": {
          "description": "Serializer for chunked uploads.",
          "properties": {
            "size": {
              "description": "The size of the upload in bytes.",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "size"
          ],
          "type": "object"
        },
        "UploadChunk": {
          "description": "A mixin for validating unknown serializers' fields.",
          "properties": {
            "file": {
              "description": "A chunk of the uploaded file.",
              "format": "binary",
              "type": "string",
              "writeOnly": true
            },
            "sha256": {
              "description": "The SHA-256 checksum of the chunk if available.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "file"
          ],
          "type": "object"
        },
        "UploadChunkResponse": {
          "description": "A mixin for validating unknown serializers' fields.",
          "properties": {
            "offset": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "size": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "UploadCommit": {
          "description": "A mixin for validating unknown serializers' fields.",
          "properties": {
            "sha256": {
              "description": "The expected sha256 checksum for the file.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "sha256"
          ],
          "type": "object"
        },
        "UploadDetailResponse": {
          "description": "Serializer for chunked uploads.",
          "properties": {
            "chunks": {
              "items": {
                "$ref": "#/components/schemas/UploadChunkResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "completed": {
              "description": "Timestamp when upload is committed.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "size": {
              "description": "The size of the upload in bytes.",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "size"
          ],
          "type": "object"
        },
        "UploadResponse": {
          "description": "Serializer for chunked uploads.",
          "properties": {
            "completed": {
              "description": "Timestamp when upload is committed.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "size": {
              "description": "The size of the upload in bytes.",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "size"
          ],
          "type": "object"
        },
        "UpstreamPulp": {
          "description": "Serializer for a Server.",
          "properties": {
            "api_root": {
              "description": "The API root. Defaults to '/pulp/'.",
              "minLength": 1,
              "type": "string"
            },
            "base_url": {
              "description": "The transport, hostname, and an optional port of the Pulp server. e.g. https://example.com",
              "minLength": 1,
              "type": "string"
            },
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "domain": {
              "description": "The domain of the Pulp server if enabled.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this Pulp server.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_label_select": {
              "description": "One or more comma separated labels that will be used to filter distributions on the upstream Pulp. E.g. \"foo=bar,key=val\" or \"foo,key\"",
              "nullable": true,
              "type": "string"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "api_root",
            "base_url",
            "name"
          ],
          "type": "object"
        },
        "UpstreamPulpResponse": {
          "description": "Serializer for a Server.",
          "properties": {
            "api_root": {
              "description": "The API root. Defaults to '/pulp/'.",
              "type": "string"
            },
            "base_url": {
              "description": "The transport, hostname, and an optional port of the Pulp server. e.g. https://example.com",
              "type": "string"
            },
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "domain": {
              "description": "The domain of the Pulp server if enabled.",
              "nullable": true,
              "type": "string"
            },
            "hidden_fields": {
              "description": "List of hidden (write only) fields",
              "items": {
                "properties": {
                  "is_set": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "is_set",
                  "name"
                ],
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "name": {
              "description": "A unique name for this Pulp server.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_label_select": {
              "description": "One or more comma separated labels that will be used to filter distributions on the upstream Pulp. E.g. \"foo=bar,key=val\" or \"foo,key\"",
              "nullable": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the most recent update of the remote.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            }
          },
          "required": [
            "api_root",
            "base_url",
            "name"
          ],
          "type": "object"
        },
        "User": {
          "properties": {
            "email": {
              "format": "email",
              "maxLength": 254,
              "title": "Email address",
              "type": "string"
            },
            "first_name": {
              "maxLength": 150,
              "type": "string"
            },
            "groups": {
              "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups.",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            },
            "is_superuser": {
              "description": "Designates that this user has all permissions without explicitly assigning them.",
              "title": "Superuser status",
              "type": "boolean"
            },
            "last_name": {
              "maxLength": 150,
              "type": "string"
            },
            "password": {
              "maxLength": 128,
              "type": "string",
              "writeOnly": true
            },
            "username": {
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
              "maxLength": 150,
              "minLength": 1,
              "pattern": "^[\\w.@+-]+$",
              "type": "string"
            }
          },
          "required": [
            "username"
          ],
          "type": "object"
        },
        "UserGroup": {
          "description": "Serializer for Groups that belong to an User.",
          "properties": {
            "name": {
              "description": "Name.",
              "maxLength": 150,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "UserGroupResponse": {
          "description": "Serializer for Groups that belong to an User.",
          "properties": {
            "name": {
              "description": "Name.",
              "maxLength": 150,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "UserResponse": {
          "properties": {
            "auth_provider": {
              "readOnly": true,
              "type": "string"
            },
            "date_joined": {
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "email": {
              "format": "email",
              "maxLength": 254,
              "title": "Email address",
              "type": "string"
            },
            "first_name": {
              "maxLength": 150,
              "type": "string"
            },
            "groups": {
              "description": "The groups this user belongs to. A user will get all permissions granted to each of their groups.",
              "items": {
                "format": "int64",
                "type": "integer"
              },
              "type": "array"
            },
            "id": {
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "is_superuser": {
              "description": "Designates that this user has all permissions without explicitly assigning them.",
              "title": "Superuser status",
              "type": "boolean"
            },
            "last_name": {
              "maxLength": 150,
              "type": "string"
            },
            "username": {
              "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
              "maxLength": 150,
              "pattern": "^[\\w.@+-]+$",
              "type": "string"
            }
          },
          "required": [
            "username"
          ],
          "type": "object"
        },
        "UserRole": {
          "description": "Serializer for UserRole.",
          "properties": {
            "content_object": {
              "description": "pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on either domain or model-level.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "domain": {
              "description": "Domain this role should be applied on, mutually exclusive with content_object.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "role": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "content_object",
            "role"
          ],
          "type": "object"
        },
        "UserRoleResponse": {
          "description": "Serializer for UserRole.",
          "properties": {
            "content_object": {
              "description": "pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on either domain or model-level.",
              "nullable": true,
              "type": "string"
            },
            "description": {
              "readOnly": true,
              "type": "string"
            },
            "domain": {
              "description": "Domain this role should be applied on, mutually exclusive with content_object.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "permissions": {
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "role": {
              "type": "string"
            }
          },
          "required": [
            "content_object",
            "role"
          ],
          "type": "object"
        },
        "VersionResponse": {
          "description": "Serializer for the version information of Pulp components",
          "properties": {
            "component": {
              "description": "Name of a versioned component of Pulp",
              "type": "string"
            },
            "domain_compatible": {
              "description": "Domain feature compatibility of component",
              "type": "boolean"
            },
            "module": {
              "description": "Python module name of the component",
              "type": "string"
            },
            "package": {
              "description": "Python package name providing the component",
              "type": "string"
            },
            "version": {
              "description": "Version of the component (e.g. 3.0.0)",
              "type": "string"
            }
          },
          "required": [
            "component",
            "domain_compatible",
            "module",
            "package",
            "version"
          ],
          "type": "object"
        },
        "WorkerResponse": {
          "description": "Base serializer for use with :class:`pulpcore.app.models.Model`\n\nThis ensures that all Serializers provide values for the 'pulp_href` field.\n\nThe class provides a default for the ``ref_name`` attribute in the\nModelSerializers's ``Meta`` class. This ensures that the OpenAPI definitions\nof plugins are namespaced properly.",
          "properties": {
            "current_task": {
              "description": "The task this worker is currently executing, or empty if the worker is not currently assigned to a task.",
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "last_heartbeat": {
              "description": "Timestamp of the last time the worker talked to the service.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "The name of the worker.",
              "readOnly": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "versions": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "description": "Versions of the components installed.",
              "readOnly": true,
              "type": "object"
            }
          },
          "type": "object"
        },
        "ansible.AnsibleDistribution": {
          "description": "Serializer for Ansible Distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "minLength": 1,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "repository_version": {
              "description": "RepositoryVersion to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name"
          ],
          "type": "object"
        },
        "ansible.AnsibleDistributionResponse": {
          "description": "Serializer for Ansible Distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "type": "string"
            },
            "client_url": {
              "description": "The URL of a Collection content source.",
              "readOnly": true,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "repository_version": {
              "description": "RepositoryVersion to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name"
          ],
          "type": "object"
        },
        "ansible.AnsibleNamespaceMetadata": {
          "description": "A serializer for Namespaces.",
          "properties": {
            "avatar": {
              "description": "Optional avatar image for Namespace",
              "format": "binary",
              "type": "string",
              "writeOnly": true
            },
            "company": {
              "description": "Optional namespace company owner.",
              "maxLength": 64,
              "type": "string"
            },
            "description": {
              "description": "Optional short description.",
              "maxLength": 256,
              "type": "string"
            },
            "email": {
              "description": "Optional namespace contact email.",
              "maxLength": 256,
              "type": "string"
            },
            "links": {
              "description": "Labeled related links.",
              "items": {
                "$ref": "#/components/schemas/NamespaceLink"
              },
              "type": "array"
            },
            "name": {
              "description": "Required named, only accepts lowercase, numbers and underscores.",
              "maxLength": 64,
              "minLength": 3,
              "pattern": "^(?!.*__)[a-z]+[0-9a-z_]*$",
              "type": "string"
            },
            "resources": {
              "description": "Optional resource page in markdown format.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ansible.AnsibleNamespaceMetadataResponse": {
          "description": "A serializer for Namespaces.",
          "properties": {
            "avatar_sha256": {
              "description": "SHA256 digest of avatar image if present.",
              "maxLength": 64,
              "readOnly": true,
              "type": "string"
            },
            "avatar_url": {
              "description": "Download link for avatar image if present.",
              "readOnly": true,
              "type": "string"
            },
            "company": {
              "description": "Optional namespace company owner.",
              "maxLength": 64,
              "type": "string"
            },
            "description": {
              "description": "Optional short description.",
              "maxLength": 256,
              "type": "string"
            },
            "email": {
              "description": "Optional namespace contact email.",
              "maxLength": 256,
              "type": "string"
            },
            "links": {
              "description": "Labeled related links.",
              "items": {
                "$ref": "#/components/schemas/NamespaceLinkResponse"
              },
              "type": "array"
            },
            "metadata_sha256": {
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "Required named, only accepts lowercase, numbers and underscores.",
              "maxLength": 64,
              "minLength": 3,
              "pattern": "^(?!.*__)[a-z]+[0-9a-z_]*$",
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "resources": {
              "description": "Optional resource page in markdown format.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ansible.AnsibleRepository": {
          "description": "Serializer for Ansible Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "gpgkey": {
              "description": "Gpg public key to verify collection signatures against",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "last_synced_metadata_time": {
              "description": "Last synced metadata time.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "private": {
              "type": "boolean"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ansible.AnsibleRepositoryResponse": {
          "description": "Serializer for Ansible Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "gpgkey": {
              "description": "Gpg public key to verify collection signatures against",
              "nullable": true,
              "type": "string"
            },
            "last_sync_task": {
              "readOnly": true,
              "type": "string"
            },
            "last_synced_metadata_time": {
              "description": "Last synced metadata time.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "latest_version_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "type": "string"
            },
            "private": {
              "type": "boolean"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "versions_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "ansible.Collection": {
          "description": "A serializer for Ansible Collections.",
          "properties": {
            "name": {
              "description": "The name of the Collection.",
              "minLength": 1,
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the Collection.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object"
        },
        "ansible.CollectionRemote": {
          "description": "A serializer for Collection Remotes.",
          "properties": {
            "auth_url": {
              "description": "The URL to receive a session token from, e.g. used with Automation Hub.",
              "maxLength": 255,
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "password": {
              "description": "Remote password.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyDb6Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
            },
            "proxy_password": {
              "description": "Password for proxy authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "User for proxy authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "requirements_file": {
              "description": "The string version of Collection requirements yaml.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "signed_only": {
              "default": false,
              "description": "Sync only collections that have a signature",
              "type": "boolean"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "token": {
              "maxLength": 2000,
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "Remote user.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "type": "object"
        },
        "ansible.CollectionRemoteResponse": {
          "description": "A serializer for Collection Remotes.",
          "properties": {
            "auth_url": {
              "description": "The URL to receive a session token from, e.g. used with Automation Hub.",
              "maxLength": 255,
              "nullable": true,
              "type": "string"
            },
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "last_sync_task": {
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "readOnly": true,
              "type": "string"
            },
            "pk": {
              "format": "uuid",
              "readOnly": true,
              "title": "Pulp id",
              "type": "string"
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyDb6Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "User for proxy authentication.",
              "nullable": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "repositories": {
              "items": {
                "$ref": "#/components/schemas/AnsibleRepositoryResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "requirements_file": {
              "description": "The string version of Collection requirements yaml.",
              "nullable": true,
              "type": "string"
            },
            "signed_only": {
              "default": false,
              "description": "Sync only collections that have a signature",
              "type": "boolean"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "url": {
              "description": "The URL of an external content source.",
              "type": "string"
            },
            "username": {
              "description": "Remote user.",
              "nullable": true,
              "type": "string"
            },
            "write_only_fields": {
              "items": {},
              "readOnly": true,
              "type": "array"
            }
          },
          "required": [
            "url"
          ],
          "type": "object"
        },
        "ansible.CollectionResponse": {
          "description": "A serializer for Ansible Collections.",
          "properties": {
            "name": {
              "description": "The name of the Collection.",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the Collection.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "namespace"
          ],
          "type": "object"
        },
        "ansible.CollectionVersion": {
          "description": "A serializer for CollectionVersion Content.",
          "properties": {
            "artifact": {
              "description": "Artifact file representing the physical content",
              "format": "uri",
              "type": "string"
            },
            "expected_name": {
              "description": "The name of the collection.",
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "writeOnly": true
            },
            "expected_namespace": {
              "description": "The namespace of the collection.",
              "maxLength": 64,
              "minLength": 1,
              "type": "string",
              "writeOnly": true
            },
            "expected_version": {
              "description": "The version of the collection.",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "writeOnly": true
            },
            "file": {
              "description": "An uploaded file that may be turned into the content unit.",
              "format": "binary",
              "type": "string",
              "writeOnly": true
            },
            "repository": {
              "description": "A URI of a repository the new content unit should be associated with.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            },
            "upload": {
              "description": "An uncommitted upload that may be turned into the content unit.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            }
          },
          "type": "object"
        },
        "ansible.CollectionVersionMark": {
          "description": "A serializer for mark models.",
          "properties": {
            "marked_collection": {
              "description": "The content this mark is pointing to.",
              "format": "uri",
              "type": "string"
            },
            "value": {
              "description": "The string value of this mark.",
              "minLength": 1,
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            }
          },
          "required": [
            "marked_collection",
            "value"
          ],
          "type": "object"
        },
        "ansible.CollectionVersionMarkResponse": {
          "description": "A serializer for mark models.",
          "properties": {
            "marked_collection": {
              "description": "The content this mark is pointing to.",
              "format": "uri",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "value": {
              "description": "The string value of this mark.",
              "pattern": "^[-a-zA-Z0-9_]+$",
              "type": "string"
            }
          },
          "required": [
            "marked_collection",
            "value"
          ],
          "type": "object"
        },
        "ansible.CollectionVersionResponse": {
          "description": "A serializer for CollectionVersion Content.",
          "properties": {
            "artifact": {
              "description": "Artifact file representing the physical content",
              "format": "uri",
              "type": "string"
            },
            "authors": {
              "description": "A list of the CollectionVersion content's authors.",
              "items": {
                "maxLength": 64,
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "contents": {
              "description": "A JSON field with data about the contents.",
              "readOnly": true,
              "type": "object"
            },
            "dependencies": {
              "description": "A dict declaring Collections that this collection requires to be installed for it to be usable.",
              "readOnly": true,
              "type": "object"
            },
            "description": {
              "description": "A short summary description of the collection.",
              "readOnly": true,
              "type": "string"
            },
            "docs_blob": {
              "description": "A JSON field holding the various documentation blobs in the collection.",
              "readOnly": true,
              "type": "object"
            },
            "documentation": {
              "description": "The URL to any online docs.",
              "maxLength": 2000,
              "readOnly": true,
              "type": "string"
            },
            "files": {
              "description": "A JSON field holding FILES.json data.",
              "readOnly": true,
              "type": "object"
            },
            "homepage": {
              "description": "The URL to the homepage of the collection/project.",
              "maxLength": 2000,
              "readOnly": true,
              "type": "string"
            },
            "id": {
              "description": "A collection identifier.",
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "issues": {
              "description": "The URL to the collection issue tracker.",
              "maxLength": 2000,
              "readOnly": true,
              "type": "string"
            },
            "license": {
              "description": "A list of licenses for content inside of a collection.",
              "items": {
                "maxLength": 32,
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "manifest": {
              "description": "A JSON field holding MANIFEST.json data.",
              "readOnly": true,
              "type": "object"
            },
            "md5": {
              "description": "The MD5 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "The name of the collection.",
              "maxLength": 64,
              "readOnly": true,
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the collection.",
              "maxLength": 64,
              "readOnly": true,
              "type": "string"
            },
            "origin_repository": {
              "description": "The URL of the originating SCM repository.",
              "maxLength": 2000,
              "readOnly": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "requires_ansible": {
              "description": "The version of Ansible required to use the collection. Multiple versions can be separated with a comma.",
              "maxLength": 255,
              "nullable": true,
              "readOnly": true,
              "type": "string"
            },
            "sha1": {
              "description": "The SHA-1 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "sha224": {
              "description": "The SHA-224 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "sha256": {
              "description": "The SHA-256 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "sha384": {
              "description": "The SHA-384 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "sha512": {
              "description": "The SHA-512 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "tags": {
              "items": {
                "$ref": "#/components/schemas/ansible.TagResponse"
              },
              "readOnly": true,
              "type": "array"
            },
            "version": {
              "description": "The version of the collection.",
              "maxLength": 128,
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "ansible.CollectionVersionSignature": {
          "description": "A serializer for signature models.",
          "properties": {
            "file": {
              "description": "An uploaded file that may be turned into the content unit.",
              "format": "binary",
              "type": "string",
              "writeOnly": true
            },
            "repository": {
              "description": "A URI of a repository the new content unit should be associated with.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            },
            "signed_collection": {
              "description": "The content this signature is pointing to.",
              "format": "uri",
              "type": "string"
            },
            "upload": {
              "description": "An uncommitted upload that may be turned into the content unit.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "signed_collection"
          ],
          "type": "object"
        },
        "ansible.CollectionVersionSignatureResponse": {
          "description": "A serializer for signature models.",
          "properties": {
            "pubkey_fingerprint": {
              "description": "The fingerprint of the public key.",
              "readOnly": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "signed_collection": {
              "description": "The content this signature is pointing to.",
              "format": "uri",
              "type": "string"
            },
            "signing_service": {
              "description": "The signing service used to create the signature.",
              "format": "uri",
              "nullable": true,
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "signed_collection"
          ],
          "type": "object"
        },
        "ansible.GitRemote": {
          "description": "A serializer for Git Collection Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "git_ref": {
              "description": "A git ref. e.g.: branch, tag, or commit sha.",
              "minLength": 1,
              "type": "string"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "metadata_only": {
              "description": "If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "ansible.GitRemoteResponse": {
          "description": "A serializer for Git Collection Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "git_ref": {
              "description": "A git ref. e.g.: branch, tag, or commit sha.",
              "type": "string"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "hidden_fields": {
              "description": "List of hidden (write only) fields",
              "items": {
                "properties": {
                  "is_set": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "is_set",
                  "name"
                ],
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "metadata_only": {
              "description": "If True, only metadata about the content will be stored in Pulp. Clients will retrieve content from the remote URL.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name for this remote.",
              "type": "string"
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the most recent update of the remote.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "ansible.Role": {
          "description": "A serializer for Role versions.",
          "properties": {
            "artifact": {
              "description": "Artifact file representing the physical content",
              "format": "uri",
              "type": "string"
            },
            "name": {
              "minLength": 1,
              "type": "string"
            },
            "namespace": {
              "minLength": 1,
              "type": "string"
            },
            "repository": {
              "description": "A URI of a repository the new content unit should be associated with.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            },
            "version": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "artifact",
            "name",
            "namespace",
            "version"
          ],
          "type": "object"
        },
        "ansible.RoleRemote": {
          "description": "A serializer for Ansible Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyDb6Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "ansible.RoleRemoteResponse": {
          "description": "A serializer for Ansible Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "hidden_fields": {
              "description": "List of hidden (write only) fields",
              "items": {
                "properties": {
                  "is_set": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "is_set",
                  "name"
                ],
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "type": "string"
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyDb6Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the most recent update of the remote.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "ansible.RoleResponse": {
          "description": "A serializer for Role versions.",
          "properties": {
            "artifact": {
              "description": "Artifact file representing the physical content",
              "format": "uri",
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          },
          "required": [
            "artifact",
            "name",
            "namespace",
            "version"
          ],
          "type": "object"
        },
        "ansible.Tag": {
          "description": "A serializer for nesting in the CollectionVersion model.",
          "properties": {},
          "type": "object"
        },
        "ansible.TagResponse": {
          "description": "A serializer for nesting in the CollectionVersion model.",
          "properties": {
            "name": {
              "description": "The name of the Tag.",
              "readOnly": true,
              "type": "string"
            }
          },
          "type": "object"
        },
        "certguard.RHSMCertGuard": {
          "description": "RHSM Content Guard Serializer.",
          "properties": {
            "ca_certificate": {
              "description": "A Certificate Authority (CA) certificate (or a bundle thereof) used to verify client-certificate authenticity.",
              "minLength": 1,
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "ca_certificate",
            "name"
          ],
          "type": "object"
        },
        "certguard.RHSMCertGuardResponse": {
          "description": "RHSM Content Guard Serializer.",
          "properties": {
            "ca_certificate": {
              "description": "A Certificate Authority (CA) certificate (or a bundle thereof) used to verify client-certificate authenticity.",
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "ca_certificate",
            "name"
          ],
          "type": "object"
        },
        "certguard.X509CertGuard": {
          "description": "X.509 Content Guard Serializer.",
          "properties": {
            "ca_certificate": {
              "description": "A Certificate Authority (CA) certificate (or a bundle thereof) used to verify client-certificate authenticity.",
              "minLength": 1,
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "ca_certificate",
            "name"
          ],
          "type": "object"
        },
        "certguard.X509CertGuardResponse": {
          "description": "X.509 Content Guard Serializer.",
          "properties": {
            "ca_certificate": {
              "description": "A Certificate Authority (CA) certificate (or a bundle thereof) used to verify client-certificate authenticity.",
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "The unique name.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "ca_certificate",
            "name"
          ],
          "type": "object"
        },
        "container.BlobResponse": {
          "description": "Serializer for Blobs.",
          "properties": {
            "artifact": {
              "description": "Artifact file representing the physical content",
              "format": "uri",
              "type": "string"
            },
            "digest": {
              "description": "sha256 of the Blob file",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "artifact",
            "digest"
          ],
          "type": "object"
        },
        "container.ContainerDistribution": {
          "description": "A serializer for ContainerDistribution.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "minLength": 1,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard. If none is specified, a default one will be used.",
              "format": "uri",
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "minLength": 1,
              "type": "string"
            },
            "private": {
              "description": "Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access.",
              "type": "boolean"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "repository_version": {
              "description": "RepositoryVersion to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name"
          ],
          "type": "object"
        },
        "container.ContainerDistributionResponse": {
          "description": "A serializer for ContainerDistribution.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard. If none is specified, a default one will be used.",
              "format": "uri",
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace this distribution belongs to.",
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "private": {
              "description": "Restrict pull access to explicitly authorized users. Defaults to unrestricted pull access.",
              "type": "boolean"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "registry_path": {
              "description": "The Registry hostname/name/ to use with docker pull command defined by this distribution.",
              "readOnly": true,
              "type": "string"
            },
            "remote": {
              "description": "Remote that can be used to fetch content when using pull-through caching.",
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "repository_version": {
              "description": "RepositoryVersion to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name"
          ],
          "type": "object"
        },
        "container.ContainerNamespace": {
          "description": "Serializer for ContainerNamespaces.",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "container.ContainerNamespaceResponse": {
          "description": "Serializer for ContainerNamespaces.",
          "properties": {
            "name": {
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "container.ContainerPullThroughDistribution": {
          "description": "A serializer for a specialized pull-through distribution referencing sub-distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "minLength": 1,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard. If none is specified, a default one will be used.",
              "format": "uri",
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "distributions": {
              "description": "Distributions created after pulling content through cache",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "minLength": 1,
              "type": "string"
            },
            "private": {
              "description": "Restrict pull access to explicitly authorized users. Related distributions inherit this value. Defaults to unrestricted pull access.",
              "type": "boolean"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "Remote that can be used to fetch content when using pull-through caching.",
              "format": "uri",
              "type": "string"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name",
            "remote"
          ],
          "type": "object"
        },
        "container.ContainerPullThroughDistributionResponse": {
          "description": "A serializer for a specialized pull-through distribution referencing sub-distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard. If none is specified, a default one will be used.",
              "format": "uri",
              "type": "string"
            },
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "distributions": {
              "description": "Distributions created after pulling content through cache",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace this distribution belongs to.",
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "private": {
              "description": "Restrict pull access to explicitly authorized users. Related distributions inherit this value. Defaults to unrestricted pull access.",
              "type": "boolean"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "remote": {
              "description": "Remote that can be used to fetch content when using pull-through caching.",
              "format": "uri",
              "type": "string"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name",
            "remote"
          ],
          "type": "object"
        },
        "container.ContainerPullThroughRemote": {
          "description": "A serializer for a remote used in the pull-through distribution.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy8e2Enum"
                }
              ],
              "default": "on_demand"
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "container.ContainerPullThroughRemoteResponse": {
          "description": "A serializer for a remote used in the pull-through distribution.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "hidden_fields": {
              "description": "List of hidden (write only) fields",
              "items": {
                "properties": {
                  "is_set": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "is_set",
                  "name"
                ],
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "type": "string"
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy8e2Enum"
                }
              ],
              "default": "on_demand"
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the most recent update of the remote.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "container.ContainerPushRepository": {
          "description": "Serializer for Container Push Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "manifest_signing_service": {
              "description": "A reference to an associated signing service.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "container.ContainerPushRepositoryResponse": {
          "description": "Serializer for Container Push Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "latest_version_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "manifest_signing_service": {
              "description": "A reference to an associated signing service.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "versions_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "container.ContainerRemote": {
          "description": "A Serializer for ContainerRemote.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "exclude_tags": {
              "description": "\n            A list of tags to exclude during sync.\n            Wildcards *, ? are recognized.\n            'exclude_tags' is evaluated after 'include_tags'.\n            ",
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "include_tags": {
              "description": "\n            A list of tags to include during sync.\n            Wildcards *, ? are recognized.\n            'include_tags' is evaluated before 'exclude_tags'.\n            ",
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy762Enum"
                }
              ],
              "default": "immediate",
              "description": "\n        immediate - All manifests and blobs are downloaded and saved during a sync.\n        on_demand - Only tags and manifests are downloaded. Blobs are not\n                    downloaded until they are requested for the first time by a client.\n        streamed - Blobs are streamed to the client with every request and never saved.\n        \n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sigstore": {
              "description": "A URL to a sigstore to download image signatures from",
              "format": "uri",
              "minLength": 1,
              "type": "string"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "upstream_name": {
              "description": "Name of the upstream repository",
              "minLength": 1,
              "type": "string"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "name",
            "upstream_name",
            "url"
          ],
          "type": "object"
        },
        "container.ContainerRemoteResponse": {
          "description": "A Serializer for ContainerRemote.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "exclude_tags": {
              "description": "\n            A list of tags to exclude during sync.\n            Wildcards *, ? are recognized.\n            'exclude_tags' is evaluated after 'include_tags'.\n            ",
              "items": {
                "maxLength": 255,
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "hidden_fields": {
              "description": "List of hidden (write only) fields",
              "items": {
                "properties": {
                  "is_set": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "is_set",
                  "name"
                ],
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "include_tags": {
              "description": "\n            A list of tags to include during sync.\n            Wildcards *, ? are recognized.\n            'include_tags' is evaluated before 'exclude_tags'.\n            ",
              "items": {
                "maxLength": 255,
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "type": "string"
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy762Enum"
                }
              ],
              "default": "immediate",
              "description": "\n        immediate - All manifests and blobs are downloaded and saved during a sync.\n        on_demand - Only tags and manifests are downloaded. Blobs are not\n                    downloaded until they are requested for the first time by a client.\n        streamed - Blobs are streamed to the client with every request and never saved.\n        \n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the most recent update of the remote.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sigstore": {
              "description": "A URL to a sigstore to download image signatures from",
              "format": "uri",
              "type": "string"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "upstream_name": {
              "description": "Name of the upstream repository",
              "type": "string"
            },
            "url": {
              "description": "The URL of an external content source.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "upstream_name",
            "url"
          ],
          "type": "object"
        },
        "container.ContainerRepository": {
          "description": "Serializer for Container Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "manifest_signing_service": {
              "description": "A reference to an associated signing service.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "container.ContainerRepositoryResponse": {
          "description": "Serializer for Container Repositories.",
          "properties": {
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "latest_version_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "manifest_signing_service": {
              "description": "A reference to an associated signing service.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "versions_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "container.ManifestResponse": {
          "description": "Serializer for Manifests.",
          "properties": {
            "annotations": {
              "description": "Property that contains arbitrary metadata stored inside the image manifest.",
              "readOnly": true,
              "type": "object"
            },
            "artifact": {
              "description": "Artifact file representing the physical content",
              "format": "uri",
              "type": "string"
            },
            "blobs": {
              "description": "Blobs that are referenced by this Manifest",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            },
            "config_blob": {
              "description": "Blob that contains configuration for this Manifest",
              "format": "uri",
              "type": "string"
            },
            "digest": {
              "description": "sha256 of the Manifest file",
              "type": "string"
            },
            "is_bootable": {
              "default": false,
              "description": "A boolean determining whether users can boot from an image or not.",
              "type": "boolean"
            },
            "is_flatpak": {
              "default": false,
              "description": "A boolean determining whether the image bundles a Flatpak application",
              "type": "boolean"
            },
            "labels": {
              "description": "Property describing metadata stored inside the image configuration",
              "readOnly": true,
              "type": "object"
            },
            "listed_manifests": {
              "description": "Manifests that are referenced by this Manifest List",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "type": "array"
            },
            "media_type": {
              "description": "Manifest media type of the file",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "schema_version": {
              "description": "Manifest schema version",
              "format": "int64",
              "type": "integer"
            }
          },
          "required": [
            "artifact",
            "blobs",
            "digest",
            "listed_manifests",
            "media_type",
            "schema_version"
          ],
          "type": "object"
        },
        "container.ManifestSignatureResponse": {
          "description": "Serializer for image manifest signatures.",
          "properties": {
            "creator": {
              "description": "Signature creator",
              "type": "string"
            },
            "digest": {
              "description": "sha256 digest of the signature blob",
              "type": "string"
            },
            "key_id": {
              "description": "Signing key ID",
              "type": "string"
            },
            "name": {
              "description": "Signature name in the format of `digest_algo:manifest_digest@random_32_chars`",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "signed_manifest": {
              "description": "Manifest that is signed",
              "format": "uri",
              "type": "string"
            },
            "timestamp": {
              "description": "Timestamp of a signature",
              "format": "int64",
              "type": "integer"
            },
            "type": {
              "description": "Container signature type, e.g. 'atomic'",
              "type": "string"
            }
          },
          "required": [
            "creator",
            "digest",
            "key_id",
            "name",
            "signed_manifest",
            "timestamp",
            "type"
          ],
          "type": "object"
        },
        "container.TagResponse": {
          "description": "Serializer for Tags.",
          "properties": {
            "name": {
              "description": "Tag name",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "tagged_manifest": {
              "description": "Manifest that is tagged",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "name",
            "tagged_manifest"
          ],
          "type": "object"
        },
        "file.FileAlternateContentSource": {
          "description": "Serializer for File alternate content source.",
          "properties": {
            "last_refreshed": {
              "description": "Date of last refresh of AlternateContentSource.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "Name of Alternate Content Source.",
              "minLength": 1,
              "type": "string"
            },
            "paths": {
              "description": "List of paths that will be appended to the Remote url when searching for content.",
              "items": {
                "minLength": 1,
                "type": "string"
              },
              "type": "array"
            },
            "remote": {
              "description": "The remote to provide alternate content source.",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "name",
            "remote"
          ],
          "type": "object"
        },
        "file.FileAlternateContentSourceResponse": {
          "description": "Serializer for File alternate content source.",
          "properties": {
            "last_refreshed": {
              "description": "Date of last refresh of AlternateContentSource.",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "Name of Alternate Content Source.",
              "type": "string"
            },
            "paths": {
              "description": "List of paths that will be appended to the Remote url when searching for content.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "remote": {
              "description": "The remote to provide alternate content source.",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "name",
            "remote"
          ],
          "type": "object"
        },
        "file.FileContent": {
          "description": "Serializer for File Content.",
          "properties": {
            "artifact": {
              "description": "Artifact file representing the physical content",
              "format": "uri",
              "type": "string"
            },
            "file": {
              "description": "An uploaded file that may be turned into the content unit.",
              "format": "binary",
              "type": "string",
              "writeOnly": true
            },
            "relative_path": {
              "description": "Path where the artifact is located relative to distributions base_path",
              "minLength": 1,
              "type": "string"
            },
            "repository": {
              "description": "A URI of a repository the new content unit should be associated with.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            },
            "upload": {
              "description": "An uncommitted upload that may be turned into the content unit.",
              "format": "uri",
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "relative_path"
          ],
          "type": "object"
        },
        "file.FileContentResponse": {
          "description": "Serializer for File Content.",
          "properties": {
            "artifact": {
              "description": "Artifact file representing the physical content",
              "format": "uri",
              "type": "string"
            },
            "md5": {
              "description": "The MD5 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "relative_path": {
              "description": "Path where the artifact is located relative to distributions base_path",
              "type": "string"
            },
            "sha1": {
              "description": "The SHA-1 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "sha224": {
              "description": "The SHA-224 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "sha256": {
              "description": "The SHA-256 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "sha384": {
              "description": "The SHA-384 checksum if available.",
              "readOnly": true,
              "type": "string"
            },
            "sha512": {
              "description": "The SHA-512 checksum if available.",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "relative_path"
          ],
          "type": "object"
        },
        "file.FileDistribution": {
          "description": "Serializer for File Distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "minLength": 1,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "minLength": 1,
              "type": "string"
            },
            "publication": {
              "description": "Publication to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name"
          ],
          "type": "object"
        },
        "file.FileDistributionResponse": {
          "description": "Serializer for File Distributions.",
          "properties": {
            "base_path": {
              "description": "The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")",
              "type": "string"
            },
            "base_url": {
              "description": "The URL for accessing the publication as defined by this distribution.",
              "readOnly": true,
              "type": "string"
            },
            "content_guard": {
              "description": "An optional content-guard.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "hidden": {
              "default": false,
              "description": "Whether this distribution should be shown in the content app.",
              "type": "boolean"
            },
            "name": {
              "description": "A unique name. Ex, `rawhide` and `stable`.",
              "type": "string"
            },
            "publication": {
              "description": "Publication to be served",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "repository": {
              "description": "The latest RepositoryVersion for this Repository will be served.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            }
          },
          "required": [
            "base_path",
            "name"
          ],
          "type": "object"
        },
        "file.FilePublication": {
          "description": "Serializer for File Publications.",
          "properties": {
            "manifest": {
              "default": "PULP_MANIFEST",
              "description": "Filename to use for manifest file containing metadata for all the files.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "repository": {
              "description": "A URI of the repository to be published.",
              "format": "uri",
              "type": "string"
            },
            "repository_version": {
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "file.FilePublicationResponse": {
          "description": "Serializer for File Publications.",
          "properties": {
            "distributions": {
              "description": "This publication is currently hosted as defined by these distributions.",
              "items": {
                "format": "uri",
                "type": "string"
              },
              "readOnly": true,
              "type": "array"
            },
            "manifest": {
              "default": "PULP_MANIFEST",
              "description": "Filename to use for manifest file containing metadata for all the files.",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "repository": {
              "description": "A URI of the repository to be published.",
              "format": "uri",
              "type": "string"
            },
            "repository_version": {
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "file.FileRemote": {
          "description": "Serializer for File Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "client_key": {
              "description": "A PEM encoded private key used for authentication.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "description": "The password to be used for authentication when syncing. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy762Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content. The possible values include: 'immediate', 'on_demand', and 'streamed'. 'immediate' is the default.\n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
            },
            "proxy_password": {
              "description": "The password to authenticate to the proxy. Extra leading and trailing whitespace characters are not trimmed.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "proxy_username": {
              "description": "The username to authenticte to the proxy.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "The username to be used for authentication when syncing.",
              "minLength": 1,
              "nullable": true,
              "type": "string",
              "writeOnly": true
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "file.FileRemoteResponse": {
          "description": "Serializer for File Remotes.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "connect_timeout": {
              "description": "aiohttp.ClientTimeout.connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "headers": {
              "description": "Headers for aiohttp.Clientsession",
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "hidden_fields": {
              "description": "List of hidden (write only) fields",
              "items": {
                "properties": {
                  "is_set": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "is_set",
                  "name"
                ],
                "type": "object"
              },
              "readOnly": true,
              "type": "array"
            },
            "max_retries": {
              "description": "Maximum number of retry attempts after a download failure. If not set then the default value (3) will be used.",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "name": {
              "description": "A unique name for this remote.",
              "type": "string"
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Policy762Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content. The possible values include: 'immediate', 'on_demand', and 'streamed'. 'immediate' is the default.\n\n* `immediate` - When syncing, download all metadata and content now.\n* `on_demand` - When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.\n* `streamed` - When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again."
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "nullable": true,
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the most recent update of the remote.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "sock_connect_timeout": {
              "description": "aiohttp.ClientTimeout.sock_connect (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "sock_read_timeout": {
              "description": "aiohttp.ClientTimeout.sock_read (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "total_timeout": {
              "description": "aiohttp.ClientTimeout.total (q.v.) for download-connections. The default is null, which will cause the default from the aiohttp library to be used.",
              "format": "double",
              "minimum": 0,
              "nullable": true,
              "type": "number"
            },
            "url": {
              "description": "The URL of an external content source.",
              "type": "string"
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "file.FileRepository": {
          "description": "Serializer for File Repositories.",
          "properties": {
            "autopublish": {
              "default": false,
              "description": "Whether to automatically create publications for new repository versions, and update any distributions pointing to this repository.",
              "type": "boolean"
            },
            "description": {
              "description": "An optional description.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "manifest": {
              "default": "PULP_MANIFEST",
              "description": "Filename to use for manifest file containing metadata for all the files.",
              "minLength": 1,
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "minLength": 1,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "file.FileRepositoryResponse": {
          "description": "Serializer for File Repositories.",
          "properties": {
            "autopublish": {
              "default": false,
              "description": "Whether to automatically create publications for new repository versions, and update any distributions pointing to this repository.",
              "type": "boolean"
            },
            "description": {
              "description": "An optional description.",
              "nullable": true,
              "type": "string"
            },
            "latest_version_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "manifest": {
              "default": "PULP_MANIFEST",
              "description": "Filename to use for manifest file containing metadata for all the files.",
              "nullable": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this repository.",
              "type": "string"
            },
            "pulp_created": {
              "description": "Timestamp of creation.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "pulp_labels": {
              "additionalProperties": {
                "nullable": true,
                "type": "string"
              },
              "type": "object"
            },
            "pulp_last_updated": {
              "description": "Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.",
              "format": "date-time",
              "readOnly": true,
              "type": "string"
            },
            "remote": {
              "description": "An optional remote to use by default when syncing.",
              "format": "uri",
              "nullable": true,
              "type": "string"
            },
            "retain_repo_versions": {
              "description": "Retain X versions of the repository. Default is null which retains all versions.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "versions_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "galaxy.ContainerRegistryRemoteResponse": {
          "description": "Every remote defined by a plugin should have a Remote serializer that inherits from this\nclass. Please import from `pulpcore.plugin.serializers` rather than from this module directly.",
          "properties": {
            "ca_cert": {
              "description": "A PEM encoded CA certificate used to validate the server certificate presented by the remote server.",
              "nullable": true,
              "type": "string"
            },
            "client_cert": {
              "description": "A PEM encoded client certificate used for authentication.",
              "nullable": true,
              "type": "string"
            },
            "created_at": {
              "format": "date-time",
              "type": "string"
            },
            "download_concurrency": {
              "description": "Total number of simultaneous connections. If not set then the default value will be used.",
              "format": "int64",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "id": {
              "format": "uuid",
              "type": "string"
            },
            "is_indexable": {
              "readOnly": true,
              "type": "boolean"
            },
            "last_sync_task": {
              "readOnly": true,
              "type": "string"
            },
            "name": {
              "description": "A unique name for this remote.",
              "type": "string"
            },
            "policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyDb6Enum"
                }
              ],
              "default": "immediate",
              "description": "The policy to use when downloading content.\n\n* `immediate` - immediate\n* `When syncing, download all metadata and content now.` - When syncing, download all metadata and content now."
            },
            "proxy_url": {
              "description": "The proxy URL. Format: scheme://host:port",
              "nullable": true,
              "type": "string"
            },
            "pulp_href": {
              "format": "uri",
              "readOnly": true,
              "type": "string"
            },
            "rate_limit": {
              "description": "Limits requests per second for each concurrent downloader",
              "format": "int64",
              "nullable": true,
              "type": "integer"
            },
            "tls_validation": {
              "description": "If True, TLS peer validation must be performed.",
              "type": "boolean"
            },
            "updated_at": {
              "format": "date-time",
              "type": "string"
            },
            "url": {
              "description": "The URL of an external content source.",
              "type": "string"
            },
            "write_only_fields": {
              "items": {},
              "readOnly": true,
              "type": "array"
            }
          },
          "required": [
            "name",
            "url"
          ],
          "type": "object"
        },
        "galaxy.Login": {
          "properties": {
            "password": {
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "password",
            "username"
          ],
          "type": "object"
        },
        "galaxy.LoginResponse": {
          "properties": {
            "password": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "required": [
            "password",
            "username"
          ],
          "type": "object"
        }
      }
    },
    "info": {
      "contact": {
        "email": "pulp-list@redhat.com",
        "name": "Pulp Team",
        "url": "https://pulpproject.org"
      },
      "description": "Fetch, Upload, Organize, and Distribute Ansible Collections",
      "license": {
        "name": "GPLv2+",
        "url": "https://raw.githubusercontent.com/ansible/galaxy_ng/master/LICENSE"
      },
      "title": "Automation Hub API",
      "version": "v3",
      "x-logo": {
        "url": "https://pulp.plan.io/attachments/download/517478/pulp_logo_word_rectangle.svg"
      },
      "x-pulp-app-versions": {
        "ansible": "0.21.6",
        "certguard": "3.49.11",
        "container": "2.19.3",
        "core": "3.49.11",
        "file": "3.49.11",
        "galaxy": "4.10.0dev"
      },
      "x-pulp-domain-enabled": false
    },
    "openapi": "3.0.3",
    "paths": {
      "/ansible/collections/": {
        "post": {
          "deprecated": true,
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "upload_collection",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Ansible: Collections"
          ]
        }
      },
      "/api/automation-hub/": {
        "get": {
          "operationId": "api_automation_hub_read",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Automation-Hub"
          ]
        }
      },
      "/api/automation-hub/_ui/": {
        "get": {
          "operationId": "api_automation_hub__ui_read",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/auth/login/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_auth_login_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/galaxy.LoginResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: _Ui V1 Auth Login"
          ]
        },
        "post": {
          "operationId": "api_automation_hub__ui_v1_auth_login_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/galaxy.Login"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/galaxy.Login"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/galaxy.Login"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/galaxy.LoginResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: _Ui V1 Auth Login"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/auth/logout/": {
        "post": {
          "operationId": "api_automation_hub__ui_v1_auth_logout_post",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui V1 Auth Logout"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/collection-versions/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_collection_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "dependency",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "repository",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `collection` - Collection\n* `-collection` - Collection (descending)\n* `version` - Version\n* `-version` - Version (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-collection",
                    "-namespace",
                    "-pulp_created",
                    "-version",
                    "collection",
                    "namespace",
                    "pulp_created",
                    "version"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version_range",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedgalaxy.LoginResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List collection versions",
          "tags": [
            "Api: _Ui V1 Collection-Versions"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/collection-versions/{version}/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_collection_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "pattern": "^[0-9a-z_]+/[0-9a-z_]+/[0-9A-Za-z.+-]+$",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/galaxy.LoginResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Retrieve collection version",
          "tags": [
            "Api: _Ui V1 Collection-Versions"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/collection_signing/": {
        "post": {
          "operationId": "_api_automation-hub__ui_v1_collection_signing_api_automation_hub__ui_v1_collection_signing_sign",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui V1 Collection_Signing"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/collection_signing/{path}/": {
        "post": {
          "operationId": "_api_automation-hub__ui_v1_collection_signing_{path}_api_automation_hub__ui_v1_collection_signing_sign",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui V1 Collection_Signing"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/": {
        "post": {
          "operationId": "_api_automation-hub__ui_v1_collection_signing_{path}_{namespace}_api_automation_hub__ui_v1_collection_signing_sign",
          "parameters": [
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui V1 Collection_Signing"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/": {
        "post": {
          "operationId": "_api_automation-hub__ui_v1_collection_signing_{path}_{namespace}_{collection}_api_automation_hub__ui_v1_collection_signing_sign",
          "parameters": [
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui V1 Collection_Signing"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/collection_signing/{path}/{namespace}/{collection}/{version}/": {
        "post": {
          "operationId": "_api_automation-hub__ui_v1_collection_signing_{path}_{namespace}_{collection}_{version}_api_automation_hub__ui_v1_collection_signing_sign",
          "parameters": [
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui V1 Collection_Signing"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/controllers/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_controllers_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui V1 Controllers"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/distributions/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_distributions_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedDistributionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List ansible distributions",
          "tags": [
            "Api: _Ui V1 Distributions"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/distributions/{pulp_id}/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_distributions_read",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DistributionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an ansible distribution",
          "tags": [
            "Api: _Ui V1 Distributions"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/feature-flags/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_feature_flags_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "security": [
            {}
          ],
          "tags": [
            "Api: _Ui V1 Feature-Flags"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/groups/": {
        "get": {
          "description": "ViewSet for Group.",
          "operationId": "_api_automation-hub__ui_v1_groups_groups_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "name"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGroupResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List groups",
          "tags": [
            "Groups"
          ]
        },
        "post": {
          "description": "ViewSet for Group.",
          "operationId": "_api_automation-hub__ui_v1_groups_groups_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a group",
          "tags": [
            "Groups"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/groups/{group_pk}/users/": {
        "get": {
          "description": "List group users.",
          "operationId": "_api_automation-hub__ui_v1_groups_{group_pk}_users_groups_users_list",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGroupUserResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List users",
          "tags": [
            "Groups: Users"
          ]
        },
        "post": {
          "description": "Add a user to a group.",
          "operationId": "_api_automation-hub__ui_v1_groups_{group_pk}_users_groups_users_create",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUser"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUser"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUser"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupUserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an user",
          "tags": [
            "Groups: Users"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/groups/{group_pk}/users/{id}/": {
        "delete": {
          "description": "Remove a user from a group.",
          "operationId": "_api_automation-hub__ui_v1_groups_{group_pk}_users_{id}_groups_users_delete",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete an user",
          "tags": [
            "Groups: Users"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/groups/{id}/": {
        "delete": {
          "description": "ViewSet for Group.",
          "operationId": "_api_automation-hub__ui_v1_groups_{id}_groups_delete",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a group",
          "tags": [
            "Groups"
          ]
        },
        "get": {
          "description": "ViewSet for Group.",
          "operationId": "_api_automation-hub__ui_v1_groups_{id}_groups_read",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a group",
          "tags": [
            "Groups"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/imports/collections/": {
        "get": {
          "description": "ViewSet for CollectionImports.",
          "operationId": "api_automation_hub__ui_v1_imports_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "created",
              "schema": {
                "format": "date",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `created` - Created\n* `-created` - Created (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-created",
                    "created"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "state",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedImportTaskListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List collection imports",
          "tags": [
            "Api: _Ui V1 Imports Collections"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/imports/collections/{task_id}/": {
        "get": {
          "description": "Returns a CollectionImport object.",
          "operationId": "api_automation_hub__ui_v1_imports_collections_read",
          "parameters": [
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ImportTaskDetailResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Retrieve collection import",
          "tags": [
            "Api: _Ui V1 Imports Collections"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/landing-page/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_landing_page_read",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: _Ui V1 Landing-Page"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/me/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_me_read",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CurrentUserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: _Ui V1 Me"
          ]
        },
        "put": {
          "operationId": "api_automation_hub__ui_v1_me_update",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUser"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUser"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUser"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CurrentUserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: _Ui V1 Me"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/my-distributions/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_my_distributions_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedDistributionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List ansible distributions",
          "tags": [
            "Api: _Ui V1 My-Distributions"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/my-distributions/{pulp_id}/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_my_distributions_read",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DistributionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an ansible distribution",
          "tags": [
            "Api: _Ui V1 My-Distributions"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/my-namespaces/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_my_namespaces_list",
          "parameters": [
            {
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `id` - Id\n* `-id` - Id (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-company",
                    "-id",
                    "-name",
                    "company",
                    "id",
                    "name"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedNamespaceSummaryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List namespaces",
          "tags": [
            "Api: _Ui V1 My-Namespaces"
          ]
        },
        "post": {
          "description": "Override to validate for name duplication before serializer validation.",
          "operationId": "api_automation_hub__ui_v1_my_namespaces_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a namespace",
          "tags": [
            "Api: _Ui V1 My-Namespaces"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/my-namespaces/{name}/": {
        "delete": {
          "description": "Delete a namespace.\n\n1. Perform a check to see if there are any collections in the namespace.\n   If there are, return a failure.\n2. Delete the pulp distro and repository\n3. Delete the namespace object.\n\nreturn: Response(status=204)",
          "operationId": "api_automation_hub__ui_v1_my_namespaces_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a namespace",
          "tags": [
            "Api: _Ui V1 My-Namespaces"
          ]
        },
        "get": {
          "operationId": "api_automation_hub__ui_v1_my_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a namespace",
          "tags": [
            "Api: _Ui V1 My-Namespaces"
          ]
        },
        "patch": {
          "operationId": "api_automation_hub__ui_v1_my_namespaces_partial_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a namespace",
          "tags": [
            "Api: _Ui V1 My-Namespaces"
          ]
        },
        "put": {
          "operationId": "api_automation_hub__ui_v1_my_namespaces_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a namespace",
          "tags": [
            "Api: _Ui V1 My-Namespaces"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/my-synclists/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_my_synclists_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedSyncListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List sync lists",
          "tags": [
            "Api: _Ui V1 My-Synclists"
          ]
        },
        "post": {
          "operationId": "api_automation_hub__ui_v1_my_synclists_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a sync list",
          "tags": [
            "Api: _Ui V1 My-Synclists"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/my-synclists/{id}/": {
        "delete": {
          "operationId": "api_automation_hub__ui_v1_my_synclists_delete",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a sync list",
          "tags": [
            "Api: _Ui V1 My-Synclists"
          ]
        },
        "get": {
          "operationId": "api_automation_hub__ui_v1_my_synclists_read",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a sync list",
          "tags": [
            "Api: _Ui V1 My-Synclists"
          ]
        },
        "patch": {
          "operationId": "api_automation_hub__ui_v1_my_synclists_partial_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedSyncList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedSyncList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedSyncList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a sync list",
          "tags": [
            "Api: _Ui V1 My-Synclists"
          ]
        },
        "put": {
          "operationId": "api_automation_hub__ui_v1_my_synclists_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a sync list",
          "tags": [
            "Api: _Ui V1 My-Synclists"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/my-synclists/{id}/curate/": {
        "post": {
          "operationId": "api_automation_hub__ui_v1_my_synclists_curate_curate",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: _Ui V1 My-Synclists Curate"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/namespaces/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_namespaces_list",
          "parameters": [
            {
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `id` - Id\n* `-id` - Id (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-company",
                    "-id",
                    "-name",
                    "company",
                    "id",
                    "name"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedNamespaceSummaryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List namespaces",
          "tags": [
            "Api: _Ui V1 Namespaces"
          ]
        },
        "post": {
          "description": "Override to validate for name duplication before serializer validation.",
          "operationId": "api_automation_hub__ui_v1_namespaces_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a namespace",
          "tags": [
            "Api: _Ui V1 Namespaces"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/namespaces/{name}/": {
        "delete": {
          "description": "Delete a namespace.\n\n1. Perform a check to see if there are any collections in the namespace.\n   If there are, return a failure.\n2. Delete the pulp distro and repository\n3. Delete the namespace object.\n\nreturn: Response(status=204)",
          "operationId": "api_automation_hub__ui_v1_namespaces_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a namespace",
          "tags": [
            "Api: _Ui V1 Namespaces"
          ]
        },
        "get": {
          "operationId": "api_automation_hub__ui_v1_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a namespace",
          "tags": [
            "Api: _Ui V1 Namespaces"
          ]
        },
        "patch": {
          "operationId": "api_automation_hub__ui_v1_namespaces_partial_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a namespace",
          "tags": [
            "Api: _Ui V1 Namespaces"
          ]
        },
        "put": {
          "operationId": "api_automation_hub__ui_v1_namespaces_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a namespace",
          "tags": [
            "Api: _Ui V1 Namespaces"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/remotes/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_remotes_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.CollectionRemoteResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List collection remotes",
          "tags": [
            "Api: _Ui V1 Remotes"
          ]
        },
        "post": {
          "operationId": "api_automation_hub__ui_v1_remotes_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a collection remote",
          "tags": [
            "Api: _Ui V1 Remotes"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/remotes/{pulp_id}/": {
        "delete": {
          "operationId": "api_automation_hub__ui_v1_remotes_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a collection remote",
          "tags": [
            "Api: _Ui V1 Remotes"
          ]
        },
        "get": {
          "operationId": "api_automation_hub__ui_v1_remotes_read",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection remote",
          "tags": [
            "Api: _Ui V1 Remotes"
          ]
        },
        "patch": {
          "operationId": "api_automation_hub__ui_v1_remotes_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a collection remote",
          "tags": [
            "Api: _Ui V1 Remotes"
          ]
        },
        "put": {
          "operationId": "api_automation_hub__ui_v1_remotes_update",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a collection remote",
          "tags": [
            "Api: _Ui V1 Remotes"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/repo/{distro_base_path}/": {
        "get": {
          "description": "Viewset that uses CollectionVersion's within distribution to display data for Collection's.\n\nCollection list is filterable by FilterSet and includes latest CollectionVersion.\n\nCollection detail includes CollectionVersion that is latest or via query param 'version'.",
          "operationId": "api_automation_hub__ui_v1_repo_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "include_related",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "sign_state",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedgalaxy.LoginResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: _Ui V1 Repo"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/repo/{distro_base_path}/{namespace}/{name}/": {
        "get": {
          "description": "Viewset that uses CollectionVersion's within distribution to display data for Collection's.\n\nCollection list is filterable by FilterSet and includes latest CollectionVersion.\n\nCollection detail includes CollectionVersion that is latest or via query param 'version'.",
          "operationId": "api_automation_hub__ui_v1_repo_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/galaxy.LoginResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: _Ui V1 Repo"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/search/": {
        "get": {
          "description": "Lists Search results for Collections + Roles.\nAggregates search from Collections and Roles in the same results set.\n\n\n## filtering\n\n- **search_type:** [\"sql\", \"websearch\"]\n- **keywords:** string\n    - queried against name,namespace,description,tags,platform\n    - when search_type is websearch allows operators e.g: \"this OR that AND (A OR B) -C\"\n    - when search_type is sql performs a SQL ilike on the same fields\n- **type:** [\"collection\", \"role\"]\n- **deprecated:** boolean\n- **name:** string (iexact query)\n- **namespace:** string (iexact query)\n- **tags:** string[] (allows multiple &tags=..&tags=..)\n- **platform:** string\n\n## Sorting\n\nSorting is performed by passing `order_by` parameter, optionally prefixed with `-` for DESC,\nthe allowed fields are:\n\n- name\n- namespace_name\n- download_count\n- last_updated\n- relevance (only when search_type is websearch)\n\n## Pagination\n\nPagination is based on `limit` and `offset` parameters.\n\n## Results\n\nResults are embedded in the pagination serializer including\n`meta:count` and `links:first,previous,next,last`.\n\nThe `data` key contains the results in the format::\n\n```python\n{\n  \"name\": \"brunogphmzthghu\",\n  \"namespace\": \"brunovrhvjkdh\",\n  \"description\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\",\n  \"type\": \"role\",\n  \"latest_version\": \"1.4.9\",\n  \"avatar_url\": \"https://github.com/brunogphmzthghu.png,\n  \"contents\": [],\n  \"download_count\": 9999,\n  \"last_updated\": \"2023-11-09T15:17:01.235457Z\",\n  \"deprecated\": false,\n  \"tags\": [\"development\", \"java\", \"python\"],\n  \"platforms\": [{\"name\": \"Ubuntu\", \"versions\": [\"jammy\", \"focal\"]}]\n}\n```",
          "operationId": "api_automation_hub__ui_v1_search_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Search term to be queried against search vector if search_type is websearch or SQL ilike if search_type is sql",
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Executes iexact filter on name",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Executes iexact filter on namespace",
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "order_by",
              "schema": {
                "enum": [
                  "-download_count",
                  "-last_updated",
                  "-name",
                  "-namespace_name",
                  "-relevance",
                  "download_count",
                  "last_updated",
                  "name",
                  "namespace_name",
                  "relevance"
                ],
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "platform",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "search_type",
              "schema": {
                "default": "websearch",
                "enum": [
                  "sql",
                  "websearch"
                ],
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "tags",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "in": "query",
              "name": "type",
              "schema": {
                "enum": [
                  "collection",
                  "role"
                ],
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedSearchResultsResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "security": [
            {}
          ],
          "tags": [
            "Api: _Ui V1 Search"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/settings/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_settings_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "security": [
            {}
          ],
          "tags": [
            "Api: _Ui V1 Settings"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/synclists/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_synclists_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedSyncListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List sync lists",
          "tags": [
            "Api: _Ui V1 Synclists"
          ]
        },
        "post": {
          "operationId": "api_automation_hub__ui_v1_synclists_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a sync list",
          "tags": [
            "Api: _Ui V1 Synclists"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/synclists/{id}/": {
        "delete": {
          "operationId": "api_automation_hub__ui_v1_synclists_delete",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a sync list",
          "tags": [
            "Api: _Ui V1 Synclists"
          ]
        },
        "get": {
          "operationId": "api_automation_hub__ui_v1_synclists_read",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a sync list",
          "tags": [
            "Api: _Ui V1 Synclists"
          ]
        },
        "patch": {
          "operationId": "api_automation_hub__ui_v1_synclists_partial_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedSyncList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedSyncList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedSyncList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a sync list",
          "tags": [
            "Api: _Ui V1 Synclists"
          ]
        },
        "put": {
          "operationId": "api_automation_hub__ui_v1_synclists_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this sync list.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SyncList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a sync list",
          "tags": [
            "Api: _Ui V1 Synclists"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/tags/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_tags_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedTagResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List tags",
          "tags": [
            "Api: _Ui V1 Tags"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/tags/collections/": {
        "get": {
          "description": "ViewSet for collections' tags within the system.",
          "operationId": "api_automation_hub__ui_v1_tags_collections_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)\n* `count` - Count\n* `-count` - Count (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-count",
                    "-name",
                    "count",
                    "name"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedTagResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List tags",
          "tags": [
            "Api: _Ui V1 Tags Collections"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/tags/roles/": {
        "get": {
          "description": "ViewSet for roles' tags within the system.\nTags can be populated manually by running `django-admin populate-role-tags`.",
          "operationId": "api_automation_hub__ui_v1_tags_roles_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)\n* `count` - Count\n* `-count` - Count (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-count",
                    "-name",
                    "count",
                    "name"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedLegacyRoleTagResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List legacy role tags",
          "tags": [
            "Api: _Ui V1 Tags Roles"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/users/": {
        "get": {
          "operationId": "api_automation_hub__ui_v1_users_list",
          "parameters": [
            {
              "in": "query",
              "name": "date_joined",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "email",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "email__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "email__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "first_name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "first_name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "first_name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "explode": true,
              "in": "query",
              "name": "groups",
              "schema": {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "groups__name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "last_name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "last_name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "last_name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `username` - Username\n* `-username` - Username (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `first_name` - First name\n* `-first_name` - First name (descending)\n* `last_name` - Last name\n* `-last_name` - Last name (descending)\n* `date_joined` - Date joined\n* `-date_joined` - Date joined (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-date_joined",
                    "-email",
                    "-first_name",
                    "-last_name",
                    "-username",
                    "date_joined",
                    "email",
                    "first_name",
                    "last_name",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "username",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "username__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "username__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedUserResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List users",
          "tags": [
            "Api: _Ui V1 Users"
          ]
        },
        "post": {
          "operationId": "api_automation_hub__ui_v1_users_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an user",
          "tags": [
            "Api: _Ui V1 Users"
          ]
        }
      },
      "/api/automation-hub/_ui/v1/users/{id}/": {
        "delete": {
          "operationId": "api_automation_hub__ui_v1_users_delete",
          "parameters": [
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete an user",
          "tags": [
            "Api: _Ui V1 Users"
          ]
        },
        "get": {
          "operationId": "api_automation_hub__ui_v1_users_read",
          "parameters": [
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an user",
          "tags": [
            "Api: _Ui V1 Users"
          ]
        },
        "patch": {
          "operationId": "api_automation_hub__ui_v1_users_partial_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUser"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUser"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUser"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an user",
          "tags": [
            "Api: _Ui V1 Users"
          ]
        },
        "put": {
          "operationId": "api_automation_hub__ui_v1_users_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an user",
          "tags": [
            "Api: _Ui V1 Users"
          ]
        }
      },
      "/api/automation-hub/api/": {
        "get": {
          "operationId": "api_automation_hub_api_read",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Api"
          ]
        }
      },
      "/api/automation-hub/content/{path}/": {
        "get": {
          "operationId": "api_automation_hub_content_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content"
          ]
        }
      },
      "/api/automation-hub/content/{path}/api/": {
        "get": {
          "operationId": "api_automation_hub_content_api_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content Api"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepoMetadataResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/artifacts/collections/": {
        "post": {
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "api_automation_hub_content_v3_artifacts_collections_create",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Pulp_Ansible: Artifacts Collections V3"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/artifacts/collections/{path}/{filename}": {
        "get": {
          "description": "Download collection.",
          "operationId": "api_automation_hub_content_v3_artifacts_collections_get",
          "parameters": [
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Artifacts Collections"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collection_versions/all/": {
        "get": {
          "operationId": "api_automation_hub_content_v3_collection_versions_all_get",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collection_Versions All"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collections/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collections/all/": {
        "get": {
          "operationId": "api_automation_hub_content_v3_collections_all_get",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections All"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/": {
        "delete": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_collections_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections"
          ]
        },
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections"
          ]
        },
        "patch": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_collections_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_collections_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections Versions"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/": {
        "delete": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_collections_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections Versions"
          ]
        },
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_collections_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections Versions"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/": {
        "post": {
          "description": "Copy collection version from one  repository to another.",
          "operationId": "api_automation_hub_content_v3_collections_versions_copy_copy_content",
          "parameters": [
            {
              "in": "path",
              "name": "dest_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "source_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections Versions Copy"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_collections_versions_docs_blob_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections Versions Docs-Blob"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/": {
        "post": {
          "description": "Remove content from source repo and add to destination repo.\n\nCreates new RepositoryVersion of source repo without content included.\nCreates new RepositoryVersion of destination repo with content included.",
          "operationId": "api_automation_hub_content_v3_collections_versions_move_move_content",
          "parameters": [
            {
              "in": "path",
              "name": "dest_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "source_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Collections Versions Move"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/excludes/": {
        "get": {
          "operationId": "api_automation_hub_content_v3_excludes_read",
          "parameters": [
            {
              "in": "query",
              "name": "format",
              "schema": {
                "enum": [
                  "json",
                  "yaml"
                ],
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Excludes"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/imports/collections/{task}/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_imports_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Api: Content V3 Imports Collections"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/namespaces/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_namespaces_list",
          "parameters": [
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "company__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where metadata_sha256 matches value",
              "in": "query",
              "name": "metadata_sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "metadata_sha256__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-avatar_sha256",
                    "-company",
                    "-description",
                    "-email",
                    "-links",
                    "-metadata_sha256",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-resources",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "avatar_sha256",
                    "company",
                    "description",
                    "email",
                    "links",
                    "metadata_sha256",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "resources",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Namespaces"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/namespaces/{name}/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_content_v3_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Namespaces"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/client-configuration/": {
        "get": {
          "description": "Return configurations for the ansible-galaxy client.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_client_configuration_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ClientConfigurationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Client-Configuration"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/": {
        "get": {
          "description": "ViewSet for Repository Metadata.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepoMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/": {
        "get": {
          "description": "Unpaginated ViewSet for Collections.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_all_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/CollectionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections All-Collections"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/": {
        "get": {
          "description": "Returns paginated CollectionVersions list.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_all_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections All-Versions"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/": {
        "post": {
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_artifacts_create",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Pulp_Ansible: Artifacts Collections V3"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}": {
        "get": {
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_artifacts_download",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Artifacts"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/": {
        "get": {
          "description": "ViewSet for Collections.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_index_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Index"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_index_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Index"
          ]
        },
        "get": {
          "description": "ViewSet for Collections.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_index_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Index"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous update task",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_index_update",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Index"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/": {
        "get": {
          "description": "Returns paginated CollectionVersions list.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Index Versions"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Index Versions"
          ]
        },
        "get": {
          "description": "Returns a CollectionVersion object.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Index Versions"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/": {
        "get": {
          "description": "Returns a CollectionVersion object.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_collections_index_versions_docs_blob_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Collections Index Versions Docs-Blob"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/namespaces/": {
        "get": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_namespaces_list",
          "parameters": [
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "company__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where metadata_sha256 matches value",
              "in": "query",
              "name": "metadata_sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "metadata_sha256__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-avatar_sha256",
                    "-company",
                    "-description",
                    "-email",
                    "-links",
                    "-metadata_sha256",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-resources",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "avatar_sha256",
                    "company",
                    "description",
                    "email",
                    "links",
                    "metadata_sha256",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "resources",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Namespaces"
          ]
        },
        "post": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_namespaces_create",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Namespaces"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/content/{distro_base_path}/namespaces/{name}/": {
        "delete": {
          "description": "Try to remove the Namespace if no Collections under Namespace are present.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_namespaces_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Namespaces"
          ]
        },
        "get": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Namespaces"
          ]
        },
        "patch": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_content_namespaces_partial_update",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Content Namespaces"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/imports/collections/{task}/": {
        "get": {
          "description": "Returns a CollectionImport object.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_imports_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter messages since a given timestamp",
              "in": "query",
              "name": "since",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Api: Content V3 Plugin Ansible Imports Collections"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/plugin/ansible/search/collection-versions/": {
        "get": {
          "description": "A viewset for cross-repo searches.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_search_collection_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "dependency",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter collectionversions that are in these distrubtion ids.",
              "explode": true,
              "in": "query",
              "name": "distribution",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter collectionversions that are in these base paths.",
              "explode": true,
              "in": "query",
              "name": "distribution_base_path",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_signed",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_created` - by CV created\n* `-pulp_created` - by CV created (descending)\n* `namespace` - by CV namespace\n* `-namespace` - by CV namespace (descending)\n* `name` - by CV name\n* `-name` - by CV name (descending)\n* `version` - by CV version\n* `-version` - by CV version (descending)",
              "explode": false,
              "in": "query",
              "name": "order_by",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pulp_created",
                    "-version",
                    "name",
                    "namespace",
                    "pulp_created",
                    "version"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter collectionversions that are in these repository ids.",
              "explode": true,
              "in": "query",
              "name": "repository",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "repository_label",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter collectionversions that are in these repositories.",
              "explode": true,
              "in": "query",
              "name": "repository_name",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "signed",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version_range",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionSearchListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Search Collection-Versions"
          ]
        },
        "post": {
          "description": "A viewset for cross-repo searches.",
          "operationId": "api_automation_hub_content_v3_plugin_ansible_search_collection_versions_rebuild",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Plugin Ansible Search Collection-Versions"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/sync/": {
        "post": {
          "description": "Trigger an asynchronous sync task",
          "operationId": "api_automation_hub_content_v3_sync_sync",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Sync"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/sync/config/": {
        "get": {
          "operationId": "api_automation_hub_content_v3_sync_config_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Sync Config"
          ]
        },
        "put": {
          "operationId": "api_automation_hub_content_v3_sync_config_update",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Content V3 Sync Config"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/tasks/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "_api_automation-hub_content_{path}_v3_tasks_tasks_list",
          "parameters": [
            {
              "description": "Filter results where child_tasks matches value",
              "in": "query",
              "name": "child_tasks",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "created_resources",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "exclusive_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "exclusive_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where finished_at matches value",
              "in": "query",
              "name": "finished_at",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is greater than value",
              "in": "query",
              "name": "finished_at__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is greater than or equal to value",
              "in": "query",
              "name": "finished_at__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is less than value",
              "in": "query",
              "name": "finished_at__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is less than or equal to value",
              "in": "query",
              "name": "finished_at__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "finished_at__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where logging_cid matches value",
              "in": "query",
              "name": "logging_cid",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where logging_cid contains value",
              "in": "query",
              "name": "logging_cid__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name not equal to value",
              "in": "query",
              "name": "name__ne",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `state` - State\n* `-state` - State (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `logging_cid` - Logging cid\n* `-logging_cid` - Logging cid (descending)\n* `unblocked_at` - Unblocked at\n* `-unblocked_at` - Unblocked at (descending)\n* `started_at` - Started at\n* `-started_at` - Started at (descending)\n* `finished_at` - Finished at\n* `-finished_at` - Finished at (descending)\n* `error` - Error\n* `-error` - Error (descending)\n* `enc_args` - Enc args\n* `-enc_args` - Enc args (descending)\n* `enc_kwargs` - Enc kwargs\n* `-enc_kwargs` - Enc kwargs (descending)\n* `reserved_resources_record` - Reserved resources record\n* `-reserved_resources_record` - Reserved resources record (descending)\n* `versions` - Versions\n* `-versions` - Versions (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-enc_args",
                    "-enc_kwargs",
                    "-error",
                    "-finished_at",
                    "-logging_cid",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-reserved_resources_record",
                    "-started_at",
                    "-state",
                    "-unblocked_at",
                    "-versions",
                    "enc_args",
                    "enc_kwargs",
                    "error",
                    "finished_at",
                    "logging_cid",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "reserved_resources_record",
                    "started_at",
                    "state",
                    "unblocked_at",
                    "versions"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where parent_task matches value",
              "in": "query",
              "name": "parent_task",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "reserved_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "reserved_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "reserved_resources_record",
              "schema": {
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            {
              "in": "query",
              "name": "shared_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "shared_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where started_at matches value",
              "in": "query",
              "name": "started_at",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is greater than value",
              "in": "query",
              "name": "started_at__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is greater than or equal to value",
              "in": "query",
              "name": "started_at__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is less than value",
              "in": "query",
              "name": "started_at__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is less than or equal to value",
              "in": "query",
              "name": "started_at__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "started_at__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where state matches value\n\n* `waiting` - Waiting\n* `skipped` - Skipped\n* `running` - Running\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled\n* `canceling` - Canceling",
              "in": "query",
              "name": "state",
              "schema": {
                "enum": [
                  "canceled",
                  "canceling",
                  "completed",
                  "failed",
                  "running",
                  "skipped",
                  "waiting"
                ],
                "type": "string"
              }
            },
            {
              "description": "Filter results where state is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "state__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where state not equal to value",
              "in": "query",
              "name": "state__ne",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where task_group matches value",
              "in": "query",
              "name": "task_group",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where worker matches value",
              "in": "query",
              "name": "worker",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where worker is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "worker__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where worker has a null value",
              "in": "query",
              "name": "worker__isnull",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedTaskSummaryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List tasks",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/content/{path}/v3/tasks/{pulp_id}/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "_api_automation-hub_content_{path}_v3_tasks_{pulp_id}_tasks_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a task",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/access_policies/": {
        "get": {
          "description": "ViewSet for AccessPolicy.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
          "operationId": "access_policies_list",
          "parameters": [
            {
              "description": "Filter results where customized matches value",
              "in": "query",
              "name": "customized",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `creation_hooks` - Creation hooks\n* `-creation_hooks` - Creation hooks (descending)\n* `statements` - Statements\n* `-statements` - Statements (descending)\n* `viewset_name` - Viewset name\n* `-viewset_name` - Viewset name (descending)\n* `customized` - Customized\n* `-customized` - Customized (descending)\n* `queryset_scoping` - Queryset scoping\n* `-queryset_scoping` - Queryset scoping (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-creation_hooks",
                    "-customized",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-queryset_scoping",
                    "-statements",
                    "-viewset_name",
                    "creation_hooks",
                    "customized",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "queryset_scoping",
                    "statements",
                    "viewset_name"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where viewset_name matches value",
              "in": "query",
              "name": "viewset_name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where viewset_name contains value",
              "in": "query",
              "name": "viewset_name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where viewset_name contains value",
              "in": "query",
              "name": "viewset_name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where viewset_name matches value",
              "in": "query",
              "name": "viewset_name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where viewset_name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "viewset_name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where viewset_name matches regex value",
              "in": "query",
              "name": "viewset_name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where viewset_name starts with value",
              "in": "query",
              "name": "viewset_name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where viewset_name matches regex value",
              "in": "query",
              "name": "viewset_name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where viewset_name starts with value",
              "in": "query",
              "name": "viewset_name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedAccessPolicyResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List access policys",
          "tags": [
            "Access_Policies"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/": {
        "get": {
          "description": "ViewSet for AccessPolicy.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
          "operationId": "access_policies_read",
          "parameters": [
            {
              "description": "A UUID string identifying this access policy.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessPolicyResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an access policy",
          "tags": [
            "Access_Policies"
          ]
        },
        "patch": {
          "description": "ViewSet for AccessPolicy.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
          "operationId": "access_policies_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this access policy.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedAccessPolicy"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedAccessPolicy"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedAccessPolicy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessPolicyResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an access policy",
          "tags": [
            "Access_Policies"
          ]
        },
        "put": {
          "description": "ViewSet for AccessPolicy.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
          "operationId": "access_policies_update",
          "parameters": [
            {
              "description": "A UUID string identifying this access policy.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPolicy"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPolicy"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPolicy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessPolicyResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an access policy",
          "tags": [
            "Access_Policies"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/access_policies/{pulp_id}/reset/": {
        "post": {
          "description": "Reset the access policy to its uncustomized default value.",
          "operationId": "access_policies_reset",
          "parameters": [
            {
              "description": "A UUID string identifying this access policy.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessPolicyResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Access_Policies"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/acs/file/file/": {
        "get": {
          "description": "Alternate Content Source ViewSet for File\n\nACS support is provided as a tech preview in pulp_file.",
          "operationId": "acs_file_file_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `last_refreshed` - Last refreshed\n* `-last_refreshed` - Last refreshed (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-last_refreshed",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "last_refreshed",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedfile.FileAlternateContentSourceResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List file alternate content sources",
          "tags": [
            "Acs: File"
          ]
        },
        "post": {
          "description": "Alternate Content Source ViewSet for File\n\nACS support is provided as a tech preview in pulp_file.",
          "operationId": "acs_file_file_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileAlternateContentSource"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileAlternateContentSource"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileAlternateContentSource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FileAlternateContentSourceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a file alternate content source",
          "tags": [
            "Acs: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/acs/file/file/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete ACS task",
          "operationId": "acs_file_file_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a file alternate content source",
          "tags": [
            "Acs: File"
          ]
        },
        "get": {
          "description": "Alternate Content Source ViewSet for File\n\nACS support is provided as a tech preview in pulp_file.",
          "operationId": "acs_file_file_read",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FileAlternateContentSourceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a file alternate content source",
          "tags": [
            "Acs: File"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "acs_file_file_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileAlternateContentSource"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileAlternateContentSource"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileAlternateContentSource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a file alternate content source",
          "tags": [
            "Acs: File"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "acs_file_file_update",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileAlternateContentSource"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileAlternateContentSource"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileAlternateContentSource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a file alternate content source",
          "tags": [
            "Acs: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/acs/file/file/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "acs_file_file_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Acs: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/acs/file/file/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "acs_file_file_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Acs: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/acs/file/file/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "acs_file_file_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Acs: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/acs/file/file/{pulp_id}/refresh/": {
        "post": {
          "description": "Trigger an asynchronous task to create Alternate Content Source content.",
          "operationId": "acs_file_file_refresh",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskGroupOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Refresh metadata",
          "tags": [
            "Acs: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/acs/file/file/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "acs_file_file_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file alternate content source.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Acs: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/ansible/collections/": {
        "get": {
          "description": "Viewset for Ansible Collections.",
          "operationId": "ansible_collections_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.CollectionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List collections",
          "tags": [
            "Ansible: Collections"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/": {
        "get": {
          "description": "Viewset for Ansible Collections.",
          "operationId": "ansible_collections_read",
          "parameters": [
            {
              "description": "A UUID string identifying this collection.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection",
          "tags": [
            "Ansible: Collections"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "ansible_collections_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this collection.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Ansible: Collections"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "ansible_collections_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this collection.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Ansible: Collections"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "ansible_collections_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this collection.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Ansible: Collections"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/ansible/collections/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "ansible_collections_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this collection.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Ansible: Collections"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/artifacts/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "artifacts_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where md5 matches value",
              "in": "query",
              "name": "md5",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `file` - File\n* `-file` - File (descending)\n* `size` - Size\n* `-size` - Size (descending)\n* `md5` - Md5\n* `-md5` - Md5 (descending)\n* `sha1` - Sha1\n* `-sha1` - Sha1 (descending)\n* `sha224` - Sha224\n* `-sha224` - Sha224 (descending)\n* `sha256` - Sha256\n* `-sha256` - Sha256 (descending)\n* `sha384` - Sha384\n* `-sha384` - Sha384 (descending)\n* `sha512` - Sha512\n* `-sha512` - Sha512 (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-file",
                    "-md5",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-sha1",
                    "-sha224",
                    "-sha256",
                    "-sha384",
                    "-sha512",
                    "-size",
                    "-timestamp_of_interest",
                    "file",
                    "md5",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "sha1",
                    "sha224",
                    "sha256",
                    "sha384",
                    "sha512",
                    "size",
                    "timestamp_of_interest"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Artifacts have been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where sha1 matches value",
              "in": "query",
              "name": "sha1",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where sha224 matches value",
              "in": "query",
              "name": "sha224",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where sha256 matches value",
              "in": "query",
              "name": "sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where sha384 matches value",
              "in": "query",
              "name": "sha384",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where sha512 matches value",
              "in": "query",
              "name": "sha512",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedArtifactResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List artifacts",
          "tags": [
            "Artifacts"
          ]
        },
        "post": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "artifacts_create",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Artifact"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Artifact"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArtifactResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an artifact",
          "tags": [
            "Artifacts"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/artifacts/{pulp_id}/": {
        "delete": {
          "description": "Remove Artifact only if it is not associated with any Content.",
          "operationId": "artifacts_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this artifact.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete an artifact",
          "tags": [
            "Artifacts"
          ]
        },
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "artifacts_read",
          "parameters": [
            {
              "description": "A UUID string identifying this artifact.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArtifactResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an artifact",
          "tags": [
            "Artifacts"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/": {
        "get": {
          "description": "Endpoint to list all content.",
          "operationId": "content_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-pk",
                    "pk"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Pulp type\n\n* `core.publishedmetadata` - core.publishedmetadata\n* `file.file` - file.file\n* `container.blob` - container.blob\n* `container.manifest` - container.manifest\n* `container.tag` - container.tag\n* `container.signature` - container.signature\n* `ansible.role` - ansible.role\n* `ansible.collection_version` - ansible.collection_version\n* `ansible.collection_mark` - ansible.collection_mark\n* `ansible.collection_signature` - ansible.collection_signature\n* `ansible.namespace` - ansible.namespace\n* `ansible.collection_deprecation` - ansible.collection_deprecation",
              "in": "query",
              "name": "pulp_type",
              "schema": {
                "enum": [
                  "ansible.collection_deprecation",
                  "ansible.collection_mark",
                  "ansible.collection_signature",
                  "ansible.collection_version",
                  "ansible.namespace",
                  "ansible.role",
                  "container.blob",
                  "container.manifest",
                  "container.signature",
                  "container.tag",
                  "core.publishedmetadata",
                  "file.file"
                ],
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.\n\n* `core.publishedmetadata` - core.publishedmetadata\n* `file.file` - file.file\n* `container.blob` - container.blob\n* `container.manifest` - container.manifest\n* `container.tag` - container.tag\n* `container.signature` - container.signature\n* `ansible.role` - ansible.role\n* `ansible.collection_version` - ansible.collection_version\n* `ansible.collection_mark` - ansible.collection_mark\n* `ansible.collection_signature` - ansible.collection_signature\n* `ansible.namespace` - ansible.namespace\n* `ansible.collection_deprecation` - ansible.collection_deprecation",
              "explode": false,
              "in": "query",
              "name": "pulp_type__in",
              "schema": {
                "items": {
                  "enum": [
                    "ansible.collection_deprecation",
                    "ansible.collection_mark",
                    "ansible.collection_signature",
                    "ansible.collection_version",
                    "ansible.namespace",
                    "ansible.role",
                    "container.blob",
                    "container.manifest",
                    "container.signature",
                    "container.tag",
                    "core.publishedmetadata",
                    "file.file"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedMultipleArtifactContentResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List content",
          "tags": [
            "Content"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/": {
        "get": {
          "description": "ViewSet for AnsibleCollectionDeprecated.",
          "operationId": "content_ansible_collection_deprecations_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-pk",
                    "pk"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.CollectionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List ansible collection deprecateds",
          "tags": [
            "Content: Collection_Deprecations"
          ]
        },
        "post": {
          "description": "ViewSet for AnsibleCollectionDeprecated.",
          "operationId": "content_ansible_collection_deprecations_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.Collection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.Collection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.Collection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an ansible collection deprecated",
          "tags": [
            "Content: Collection_Deprecations"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/collection_deprecations/{pulp_id}/": {
        "get": {
          "description": "ViewSet for AnsibleCollectionDeprecated.",
          "operationId": "content_ansible_collection_deprecations_read",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible collection deprecated.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an ansible collection deprecated",
          "tags": [
            "Content: Collection_Deprecations"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/collection_marks/": {
        "get": {
          "description": "ViewSet for looking at mark objects for CollectionVersion content.",
          "operationId": "content_ansible_collection_marks_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter marks for collection version",
              "in": "query",
              "name": "marked_collection",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `value` - Value\n* `-value` - Value (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-value",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "timestamp_of_interest",
                    "upstream_id",
                    "value"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter marks by value",
              "in": "query",
              "name": "value",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where value is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "value__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.CollectionVersionMarkResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List collection version marks",
          "tags": [
            "Content: Collection_Marks"
          ]
        },
        "post": {
          "description": "ViewSet for looking at mark objects for CollectionVersion content.",
          "operationId": "content_ansible_collection_marks_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionMark"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionMark"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionMark"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionVersionMarkResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a collection version mark",
          "tags": [
            "Content: Collection_Marks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/collection_marks/{pulp_id}/": {
        "get": {
          "description": "ViewSet for looking at mark objects for CollectionVersion content.",
          "operationId": "content_ansible_collection_marks_read",
          "parameters": [
            {
              "description": "A UUID string identifying this collection version mark.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionVersionMarkResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection version mark",
          "tags": [
            "Content: Collection_Marks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/": {
        "get": {
          "description": "ViewSet for looking at signature objects for CollectionVersion content.",
          "operationId": "content_ansible_collection_signatures_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `data` - Data\n* `-data` - Data (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `pubkey_fingerprint` - Pubkey fingerprint\n* `-pubkey_fingerprint` - Pubkey fingerprint (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-data",
                    "-digest",
                    "-pk",
                    "-pubkey_fingerprint",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "data",
                    "digest",
                    "pk",
                    "pubkey_fingerprint",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Filter results where pubkey_fingerprint matches value",
              "in": "query",
              "name": "pubkey_fingerprint",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where pubkey_fingerprint is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "pubkey_fingerprint__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter signatures for collection version",
              "in": "query",
              "name": "signed_collection",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter signatures produced by signature service",
              "in": "query",
              "name": "signing_service",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.CollectionVersionSignatureResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List collection version signatures",
          "tags": [
            "Content: Collection_Signatures"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous task to create content,optionally create new repository version.",
          "operationId": "content_ansible_collection_signatures_create",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionSignature"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersionSignature"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a collection version signature",
          "tags": [
            "Content: Collection_Signatures"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/collection_signatures/{pulp_id}/": {
        "get": {
          "description": "ViewSet for looking at signature objects for CollectionVersion content.",
          "operationId": "content_ansible_collection_signatures_read",
          "parameters": [
            {
              "description": "A UUID string identifying this collection version signature.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionVersionSignatureResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection version signature",
          "tags": [
            "Content: Collection_Signatures"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/": {
        "get": {
          "description": "ViewSet for Ansible Collection.",
          "operationId": "content_ansible_collection_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.CollectionVersionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List collection versions",
          "tags": [
            "Content: Collection_Versions"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous task to create content,optionally create new repository version.",
          "operationId": "content_ansible_collection_versions_create",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersion"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionVersion"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a collection version",
          "tags": [
            "Content: Collection_Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/collection_versions/{pulp_id}/": {
        "get": {
          "description": "ViewSet for Ansible Collection.",
          "operationId": "content_ansible_collection_versions_read",
          "parameters": [
            {
              "description": "A UUID string identifying this collection version.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection version",
          "tags": [
            "Content: Collection_Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/namespaces/": {
        "get": {
          "description": "ViewSet for AnsibleNamespace.",
          "operationId": "content_ansible_namespaces_list",
          "parameters": [
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "company__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where metadata_sha256 matches value",
              "in": "query",
              "name": "metadata_sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "metadata_sha256__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-avatar_sha256",
                    "-company",
                    "-description",
                    "-email",
                    "-links",
                    "-metadata_sha256",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-resources",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "avatar_sha256",
                    "company",
                    "description",
                    "email",
                    "links",
                    "metadata_sha256",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "resources",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List ansible namespace metadatas",
          "tags": [
            "Content: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/namespaces/{pulp_id}/": {
        "get": {
          "description": "ViewSet for AnsibleNamespace.",
          "operationId": "content_ansible_namespaces_read",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible namespace metadata.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an ansible namespace metadata",
          "tags": [
            "Content: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/namespaces/{pulp_id}/avatar/": {
        "get": {
          "description": "Get the logo for the this namespace.",
          "operationId": "content_ansible_namespaces_avatar",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible namespace metadata.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "302": {
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Unspecified response body",
                    "type": "object"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Content: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/roles/": {
        "get": {
          "description": "ViewSet for Role.",
          "operationId": "content_ansible_roles_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where namespace matches value",
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.RoleResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Content: Roles"
          ]
        },
        "post": {
          "description": "ViewSet for Role.",
          "operationId": "content_ansible_roles_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.Role"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.Role"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.Role"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.RoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a role",
          "tags": [
            "Content: Roles"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/ansible/roles/{pulp_id}/": {
        "get": {
          "description": "ViewSet for Role.",
          "operationId": "content_ansible_roles_read",
          "parameters": [
            {
              "description": "A UUID string identifying this role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.RoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a role",
          "tags": [
            "Content: Roles"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/container/blobs/": {
        "get": {
          "description": "ViewSet for Blobs.",
          "operationId": "content_container_blobs_list",
          "parameters": [
            {
              "description": "Filter results where digest matches value",
              "in": "query",
              "name": "digest",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where digest is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "digest__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-digest",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "digest",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.BlobResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List blobs",
          "tags": [
            "Content: Blobs"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/container/blobs/{pulp_id}/": {
        "get": {
          "description": "ViewSet for Blobs.",
          "operationId": "content_container_blobs_read",
          "parameters": [
            {
              "description": "A UUID string identifying this blob.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.BlobResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a blob",
          "tags": [
            "Content: Blobs"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/container/manifests/": {
        "get": {
          "description": "ViewSet for Manifest.",
          "operationId": "content_container_manifests_list",
          "parameters": [
            {
              "description": "Filter results where digest matches value",
              "in": "query",
              "name": "digest",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where digest is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "digest__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where is_bootable matches value",
              "in": "query",
              "name": "is_bootable",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where is_flatpak matches value",
              "in": "query",
              "name": "is_flatpak",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "* `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json\n* `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json\n* `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json\n* `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json\n* `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json",
              "explode": true,
              "in": "query",
              "name": "media_type",
              "schema": {
                "items": {
                  "enum": [
                    "application/vnd.docker.distribution.manifest.list.v2+json",
                    "application/vnd.docker.distribution.manifest.v1+json",
                    "application/vnd.docker.distribution.manifest.v2+json",
                    "application/vnd.oci.image.index.v1+json",
                    "application/vnd.oci.image.manifest.v1+json"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `schema_version` - Schema version\n* `-schema_version` - Schema version (descending)\n* `media_type` - Media type\n* `-media_type` - Media type (descending)\n* `annotations` - Annotations\n* `-annotations` - Annotations (descending)\n* `labels` - Labels\n* `-labels` - Labels (descending)\n* `is_bootable` - Is bootable\n* `-is_bootable` - Is bootable (descending)\n* `is_flatpak` - Is flatpak\n* `-is_flatpak` - Is flatpak (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-annotations",
                    "-digest",
                    "-is_bootable",
                    "-is_flatpak",
                    "-labels",
                    "-media_type",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-schema_version",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "annotations",
                    "digest",
                    "is_bootable",
                    "is_flatpak",
                    "labels",
                    "media_type",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "schema_version",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ManifestResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List manifests",
          "tags": [
            "Content: Manifests"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/container/manifests/{pulp_id}/": {
        "get": {
          "description": "ViewSet for Manifest.",
          "operationId": "content_container_manifests_read",
          "parameters": [
            {
              "description": "A UUID string identifying this manifest.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ManifestResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a manifest",
          "tags": [
            "Content: Manifests"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/container/signatures/": {
        "get": {
          "description": "ViewSet for image signatures.",
          "operationId": "content_container_signatures_list",
          "parameters": [
            {
              "description": "Filter results where digest matches value",
              "in": "query",
              "name": "digest",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where digest is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "digest__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where key_id matches value",
              "in": "query",
              "name": "key_id",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where key_id is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "key_id__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "manifest",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `type` - Type\n* `-type` - Type (descending)\n* `key_id` - Key id\n* `-key_id` - Key id (descending)\n* `timestamp` - Timestamp\n* `-timestamp` - Timestamp (descending)\n* `creator` - Creator\n* `-creator` - Creator (descending)\n* `data` - Data\n* `-data` - Data (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-creator",
                    "-data",
                    "-digest",
                    "-key_id",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-timestamp",
                    "-timestamp_of_interest",
                    "-type",
                    "-upstream_id",
                    "creator",
                    "data",
                    "digest",
                    "key_id",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "timestamp",
                    "timestamp_of_interest",
                    "type",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ManifestSignatureResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List manifest signatures",
          "tags": [
            "Content: Signatures"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/container/signatures/{pulp_id}/": {
        "get": {
          "description": "ViewSet for image signatures.",
          "operationId": "content_container_signatures_read",
          "parameters": [
            {
              "description": "A UUID string identifying this manifest signature.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ManifestSignatureResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a manifest signature",
          "tags": [
            "Content: Signatures"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/container/tags/": {
        "get": {
          "description": "ViewSet for Tag.",
          "operationId": "content_container_tags_list",
          "parameters": [
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "digest",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "* `application/vnd.docker.distribution.manifest.v1+json` - application/vnd.docker.distribution.manifest.v1+json\n* `application/vnd.docker.distribution.manifest.v2+json` - application/vnd.docker.distribution.manifest.v2+json\n* `application/vnd.docker.distribution.manifest.list.v2+json` - application/vnd.docker.distribution.manifest.list.v2+json\n* `application/vnd.oci.image.manifest.v1+json` - application/vnd.oci.image.manifest.v1+json\n* `application/vnd.oci.image.index.v1+json` - application/vnd.oci.image.index.v1+json",
              "explode": true,
              "in": "query",
              "name": "media_type",
              "schema": {
                "items": {
                  "enum": [
                    "application/vnd.docker.distribution.manifest.list.v2+json",
                    "application/vnd.docker.distribution.manifest.v1+json",
                    "application/vnd.docker.distribution.manifest.v2+json",
                    "application/vnd.oci.image.index.v1+json",
                    "application/vnd.oci.image.manifest.v1+json"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.TagResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List tags",
          "tags": [
            "Content: Tags"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/container/tags/{pulp_id}/": {
        "get": {
          "description": "ViewSet for Tag.",
          "operationId": "content_container_tags_read",
          "parameters": [
            {
              "description": "A UUID string identifying this tag.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.TagResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a tag",
          "tags": [
            "Content: Tags"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/file/files/": {
        "get": {
          "description": "\nFileContent represents a single file and its metadata, which can be added and removed from\nrepositories.",
          "operationId": "content_file_files_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `relative_path` - Relative path\n* `-relative_path` - Relative path (descending)\n* `digest` - Digest\n* `-digest` - Digest (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-digest",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-relative_path",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "digest",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "relative_path",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where relative_path matches value",
              "in": "query",
              "name": "relative_path",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedfile.FileContentResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List file contents",
          "tags": [
            "Content: Files"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous task to create content,optionally create new repository version.",
          "operationId": "content_file_files_create",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileContent"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileContent"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a file content",
          "tags": [
            "Content: Files"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/content/file/files/{pulp_id}/": {
        "get": {
          "description": "\nFileContent represents a single file and its metadata, which can be added and removed from\nrepositories.",
          "operationId": "content_file_files_read",
          "parameters": [
            {
              "description": "A UUID string identifying this file content.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FileContentResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a file content",
          "tags": [
            "Content: Files"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/": {
        "get": {
          "description": "Endpoint to list all contentguards.",
          "operationId": "contentguards_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "description",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Pulp type\n\n* `core.rbac` - core.rbac\n* `core.content_redirect` - core.content_redirect\n* `core.header` - core.header\n* `core.composite` - core.composite\n* `certguard.rhsm` - certguard.rhsm\n* `certguard.x509` - certguard.x509",
              "in": "query",
              "name": "pulp_type",
              "schema": {
                "enum": [
                  "certguard.rhsm",
                  "certguard.x509",
                  "core.composite",
                  "core.content_redirect",
                  "core.header",
                  "core.rbac"
                ],
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.\n\n* `core.rbac` - core.rbac\n* `core.content_redirect` - core.content_redirect\n* `core.header` - core.header\n* `core.composite` - core.composite\n* `certguard.rhsm` - certguard.rhsm\n* `certguard.x509` - certguard.x509",
              "explode": false,
              "in": "query",
              "name": "pulp_type__in",
              "schema": {
                "items": {
                  "enum": [
                    "certguard.rhsm",
                    "certguard.x509",
                    "core.composite",
                    "core.content_redirect",
                    "core.header",
                    "core.rbac"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedContentGuardResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List content guards",
          "tags": [
            "Contentguards"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/certguard/rhsm/": {
        "get": {
          "description": "RHSMCertGuard API Viewsets.",
          "operationId": "contentguards_certguard_rhsm_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "description",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcertguard.RHSMCertGuardResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List rhsm cert guards",
          "tags": [
            "Contentguards: Rhsm"
          ]
        },
        "post": {
          "description": "RHSMCertGuard API Viewsets.",
          "operationId": "contentguards_certguard_rhsm_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.RHSMCertGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.RHSMCertGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.RHSMCertGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/certguard.RHSMCertGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a rhsm cert guard",
          "tags": [
            "Contentguards: Rhsm"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/certguard/rhsm/{pulp_id}/": {
        "delete": {
          "description": "RHSMCertGuard API Viewsets.",
          "operationId": "contentguards_certguard_rhsm_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this rhsm cert guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a rhsm cert guard",
          "tags": [
            "Contentguards: Rhsm"
          ]
        },
        "get": {
          "description": "RHSMCertGuard API Viewsets.",
          "operationId": "contentguards_certguard_rhsm_read",
          "parameters": [
            {
              "description": "A UUID string identifying this rhsm cert guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/certguard.RHSMCertGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a rhsm cert guard",
          "tags": [
            "Contentguards: Rhsm"
          ]
        },
        "patch": {
          "description": "RHSMCertGuard API Viewsets.",
          "operationId": "contentguards_certguard_rhsm_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this rhsm cert guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcertguard.RHSMCertGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcertguard.RHSMCertGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcertguard.RHSMCertGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/certguard.RHSMCertGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a rhsm cert guard",
          "tags": [
            "Contentguards: Rhsm"
          ]
        },
        "put": {
          "description": "RHSMCertGuard API Viewsets.",
          "operationId": "contentguards_certguard_rhsm_update",
          "parameters": [
            {
              "description": "A UUID string identifying this rhsm cert guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.RHSMCertGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.RHSMCertGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.RHSMCertGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/certguard.RHSMCertGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a rhsm cert guard",
          "tags": [
            "Contentguards: Rhsm"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/certguard/x509/": {
        "get": {
          "description": "X509CertGuard API Viewsets.",
          "operationId": "contentguards_certguard_x509_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "description",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcertguard.X509CertGuardResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List x509 cert guards",
          "tags": [
            "Contentguards: X509"
          ]
        },
        "post": {
          "description": "X509CertGuard API Viewsets.",
          "operationId": "contentguards_certguard_x509_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.X509CertGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.X509CertGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.X509CertGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/certguard.X509CertGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a x509 cert guard",
          "tags": [
            "Contentguards: X509"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/certguard/x509/{pulp_id}/": {
        "delete": {
          "description": "X509CertGuard API Viewsets.",
          "operationId": "contentguards_certguard_x509_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this x509 cert guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a x509 cert guard",
          "tags": [
            "Contentguards: X509"
          ]
        },
        "get": {
          "description": "X509CertGuard API Viewsets.",
          "operationId": "contentguards_certguard_x509_read",
          "parameters": [
            {
              "description": "A UUID string identifying this x509 cert guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/certguard.X509CertGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a x509 cert guard",
          "tags": [
            "Contentguards: X509"
          ]
        },
        "patch": {
          "description": "X509CertGuard API Viewsets.",
          "operationId": "contentguards_certguard_x509_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this x509 cert guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcertguard.X509CertGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcertguard.X509CertGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcertguard.X509CertGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/certguard.X509CertGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a x509 cert guard",
          "tags": [
            "Contentguards: X509"
          ]
        },
        "put": {
          "description": "X509CertGuard API Viewsets.",
          "operationId": "contentguards_certguard_x509_update",
          "parameters": [
            {
              "description": "A UUID string identifying this x509 cert guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.X509CertGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.X509CertGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/certguard.X509CertGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/certguard.X509CertGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a x509 cert guard",
          "tags": [
            "Contentguards: X509"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/composite/": {
        "get": {
          "description": "Content guard that queries a list-of content-guards for access permissions.",
          "operationId": "contentguards_core_composite_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "description",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCompositeContentGuardResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List composite content guards",
          "tags": [
            "Contentguards: Composite"
          ]
        },
        "post": {
          "description": "Content guard that queries a list-of content-guards for access permissions.",
          "operationId": "contentguards_core_composite_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CompositeContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a composite content guard",
          "tags": [
            "Contentguards: Composite"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/composite/{pulp_id}/": {
        "delete": {
          "description": "Content guard that queries a list-of content-guards for access permissions.",
          "operationId": "contentguards_core_composite_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this composite content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a composite content guard",
          "tags": [
            "Contentguards: Composite"
          ]
        },
        "get": {
          "description": "Content guard that queries a list-of content-guards for access permissions.",
          "operationId": "contentguards_core_composite_read",
          "parameters": [
            {
              "description": "A UUID string identifying this composite content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CompositeContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a composite content guard",
          "tags": [
            "Contentguards: Composite"
          ]
        },
        "patch": {
          "description": "Content guard that queries a list-of content-guards for access permissions.",
          "operationId": "contentguards_core_composite_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this composite content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCompositeContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCompositeContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCompositeContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CompositeContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a composite content guard",
          "tags": [
            "Contentguards: Composite"
          ]
        },
        "put": {
          "description": "Content guard that queries a list-of content-guards for access permissions.",
          "operationId": "contentguards_core_composite_update",
          "parameters": [
            {
              "description": "A UUID string identifying this composite content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CompositeContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a composite content guard",
          "tags": [
            "Contentguards: Composite"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/composite/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "contentguards_core_composite_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this composite content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Contentguards: Composite"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/composite/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "contentguards_core_composite_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this composite content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Contentguards: Composite"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/composite/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "contentguards_core_composite_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this composite content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Contentguards: Composite"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/composite/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "contentguards_core_composite_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this composite content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Contentguards: Composite"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/": {
        "get": {
          "description": "Content guard to protect preauthenticated redirects to the content app.",
          "operationId": "contentguards_core_content_redirect_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "description",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedContentRedirectContentGuardResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List content redirect content guards",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        },
        "post": {
          "description": "Content guard to protect preauthenticated redirects to the content app.",
          "operationId": "contentguards_core_content_redirect_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a content redirect content guard",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/": {
        "delete": {
          "description": "Content guard to protect preauthenticated redirects to the content app.",
          "operationId": "contentguards_core_content_redirect_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this content redirect content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a content redirect content guard",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        },
        "get": {
          "description": "Content guard to protect preauthenticated redirects to the content app.",
          "operationId": "contentguards_core_content_redirect_read",
          "parameters": [
            {
              "description": "A UUID string identifying this content redirect content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a content redirect content guard",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        },
        "patch": {
          "description": "Content guard to protect preauthenticated redirects to the content app.",
          "operationId": "contentguards_core_content_redirect_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this content redirect content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedContentRedirectContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedContentRedirectContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedContentRedirectContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a content redirect content guard",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        },
        "put": {
          "description": "Content guard to protect preauthenticated redirects to the content app.",
          "operationId": "contentguards_core_content_redirect_update",
          "parameters": [
            {
              "description": "A UUID string identifying this content redirect content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ContentRedirectContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContentRedirectContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a content redirect content guard",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "contentguards_core_content_redirect_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this content redirect content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "contentguards_core_content_redirect_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this content redirect content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "contentguards_core_content_redirect_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this content redirect content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/content_redirect/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "contentguards_core_content_redirect_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this content redirect content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Contentguards: Content_Redirect"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/header/": {
        "get": {
          "description": "Content guard to protect the content app using a specific header.",
          "operationId": "contentguards_core_header_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "description",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedHeaderContentGuardResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List header content guards",
          "tags": [
            "Contentguards: Header"
          ]
        },
        "post": {
          "description": "Content guard to protect the content app using a specific header.",
          "operationId": "contentguards_core_header_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeaderContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/HeaderContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/HeaderContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HeaderContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a header content guard",
          "tags": [
            "Contentguards: Header"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/header/{pulp_id}/": {
        "delete": {
          "description": "Content guard to protect the content app using a specific header.",
          "operationId": "contentguards_core_header_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this header content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a header content guard",
          "tags": [
            "Contentguards: Header"
          ]
        },
        "get": {
          "description": "Content guard to protect the content app using a specific header.",
          "operationId": "contentguards_core_header_read",
          "parameters": [
            {
              "description": "A UUID string identifying this header content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HeaderContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a header content guard",
          "tags": [
            "Contentguards: Header"
          ]
        },
        "patch": {
          "description": "Content guard to protect the content app using a specific header.",
          "operationId": "contentguards_core_header_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this header content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedHeaderContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedHeaderContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedHeaderContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HeaderContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a header content guard",
          "tags": [
            "Contentguards: Header"
          ]
        },
        "put": {
          "description": "Content guard to protect the content app using a specific header.",
          "operationId": "contentguards_core_header_update",
          "parameters": [
            {
              "description": "A UUID string identifying this header content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeaderContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/HeaderContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/HeaderContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HeaderContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a header content guard",
          "tags": [
            "Contentguards: Header"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/header/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "contentguards_core_header_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this header content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Contentguards: Header"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/header/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "contentguards_core_header_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this header content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Contentguards: Header"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/header/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "contentguards_core_header_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this header content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Contentguards: Header"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/header/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "contentguards_core_header_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this header content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Contentguards: Header"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/rbac/": {
        "get": {
          "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
          "operationId": "contentguards_core_rbac_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "description",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRBACContentGuardResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List rbac content guards",
          "tags": [
            "Contentguards: Rbac"
          ]
        },
        "post": {
          "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
          "operationId": "contentguards_core_rbac_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RBACContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a rbac content guard",
          "tags": [
            "Contentguards: Rbac"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/": {
        "delete": {
          "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
          "operationId": "contentguards_core_rbac_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this rbac content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a rbac content guard",
          "tags": [
            "Contentguards: Rbac"
          ]
        },
        "get": {
          "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
          "operationId": "contentguards_core_rbac_read",
          "parameters": [
            {
              "description": "A UUID string identifying this rbac content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RBACContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a rbac content guard",
          "tags": [
            "Contentguards: Rbac"
          ]
        },
        "patch": {
          "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
          "operationId": "contentguards_core_rbac_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this rbac content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedRBACContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedRBACContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedRBACContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RBACContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a rbac content guard",
          "tags": [
            "Contentguards: Rbac"
          ]
        },
        "put": {
          "description": "Viewset for creating contentguards that use RBAC to protect content.\nHas add and remove actions for managing permission for users and groups to download content\nprotected by this guard.",
          "operationId": "contentguards_core_rbac_update",
          "parameters": [
            {
              "description": "A UUID string identifying this rbac content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuard"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuard"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RBACContentGuard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RBACContentGuardResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a rbac content guard",
          "tags": [
            "Contentguards: Rbac"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "contentguards_core_rbac_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this rbac content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Contentguards: Rbac"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "contentguards_core_rbac_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this rbac content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Contentguards: Rbac"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "contentguards_core_rbac_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this rbac content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Contentguards: Rbac"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/contentguards/core/rbac/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "contentguards_core_rbac_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this rbac content guard.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Contentguards: Rbac"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/": {
        "get": {
          "description": "Provides base viewset for Distributions.",
          "operationId": "distributions_list",
          "parameters": [
            {
              "description": "Filter results where base_path matches value",
              "in": "query",
              "name": "base_path",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "base_path__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-base_path",
                    "-hidden",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "base_path",
                    "hidden",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Pulp type\n\n* `core.artifact` - core.artifact\n* `file.file` - file.file\n* `container.pull-through` - container.pull-through\n* `container.container` - container.container\n* `ansible.ansible` - ansible.ansible",
              "in": "query",
              "name": "pulp_type",
              "schema": {
                "enum": [
                  "ansible.ansible",
                  "container.container",
                  "container.pull-through",
                  "core.artifact",
                  "file.file"
                ],
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.\n\n* `core.artifact` - core.artifact\n* `file.file` - file.file\n* `container.pull-through` - container.pull-through\n* `container.container` - container.container\n* `ansible.ansible` - ansible.ansible",
              "explode": false,
              "in": "query",
              "name": "pulp_type__in",
              "schema": {
                "items": {
                  "enum": [
                    "ansible.ansible",
                    "container.container",
                    "container.pull-through",
                    "core.artifact",
                    "file.file"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository matches value",
              "in": "query",
              "name": "repository",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "repository__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter distributions based on the content served by them",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedDistributionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List distributions",
          "tags": [
            "Distributions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/": {
        "get": {
          "description": "ViewSet for Ansible Distributions.",
          "operationId": "distributions_ansible_ansible_list",
          "parameters": [
            {
              "description": "Filter results where base_path matches value",
              "in": "query",
              "name": "base_path",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "base_path__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-base_path",
                    "-hidden",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "base_path",
                    "hidden",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository matches value",
              "in": "query",
              "name": "repository",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "repository__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter distributions based on the content served by them",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleDistributionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List ansible distributions",
          "tags": [
            "Distributions: Ansible"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous create task",
          "operationId": "distributions_ansible_ansible_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an ansible distribution",
          "tags": [
            "Distributions: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "distributions_ansible_ansible_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete an ansible distribution",
          "tags": [
            "Distributions: Ansible"
          ]
        },
        "get": {
          "description": "ViewSet for Ansible Distributions.",
          "operationId": "distributions_ansible_ansible_read",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleDistributionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an ansible distribution",
          "tags": [
            "Distributions: Ansible"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "distributions_ansible_ansible_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an ansible distribution",
          "tags": [
            "Distributions: Ansible"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "distributions_ansible_ansible_update",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an ansible distribution",
          "tags": [
            "Distributions: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "distributions_ansible_ansible_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Distributions: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "distributions_ansible_ansible_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Distributions: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "distributions_ansible_ansible_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Distributions: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "distributions_ansible_ansible_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Distributions: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "distributions_ansible_ansible_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Distributions: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/ansible/ansible/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "distributions_ansible_ansible_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Distributions: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/container/": {
        "get": {
          "description": "The Container Distribution will serve the latest version of a Repository if\n``repository`` is specified. The Container Distribution will serve a specific\nrepository version if ``repository_version``. Note that **either**\n``repository`` or ``repository_version`` can be set on a Container\nDistribution, but not both.",
          "operationId": "distributions_container_container_list",
          "parameters": [
            {
              "description": "Filter results where base_path matches value",
              "in": "query",
              "name": "base_path",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "base_path__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace__name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `private` - Private\n* `-private` - Private (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-base_path",
                    "-description",
                    "-hidden",
                    "-name",
                    "-pk",
                    "-private",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "base_path",
                    "description",
                    "hidden",
                    "name",
                    "pk",
                    "private",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository matches value",
              "in": "query",
              "name": "repository",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "repository__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter distributions based on the content served by them",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ContainerDistributionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List container distributions",
          "tags": [
            "Distributions: Container"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous create task",
          "operationId": "distributions_container_container_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a container distribution",
          "tags": [
            "Distributions: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "distributions_container_container_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a container distribution",
          "tags": [
            "Distributions: Container"
          ]
        },
        "get": {
          "description": "The Container Distribution will serve the latest version of a Repository if\n``repository`` is specified. The Container Distribution will serve a specific\nrepository version if ``repository_version``. Note that **either**\n``repository`` or ``repository_version`` can be set on a Container\nDistribution, but not both.",
          "operationId": "distributions_container_container_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerDistributionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container distribution",
          "tags": [
            "Distributions: Container"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "distributions_container_container_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container distribution",
          "tags": [
            "Distributions: Container"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "distributions_container_container_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container distribution",
          "tags": [
            "Distributions: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "distributions_container_container_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Distributions: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "distributions_container_container_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Distributions: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "distributions_container_container_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Distributions: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "distributions_container_container_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Distributions: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "distributions_container_container_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Distributions: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/container/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "distributions_container_container_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Distributions: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/pull-through/": {
        "get": {
          "description": "A special pull-through Container Distribution that will reference distributions serving content.",
          "operationId": "distributions_container_pull_through_list",
          "parameters": [
            {
              "description": "Filter results where base_path matches value",
              "in": "query",
              "name": "base_path",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "base_path__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-base_path",
                    "-hidden",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "base_path",
                    "hidden",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository matches value",
              "in": "query",
              "name": "repository",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "repository__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter distributions based on the content served by them",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ContainerPullThroughDistributionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List container pull through distributions",
          "tags": [
            "Distributions: Pull-Through"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous create task",
          "operationId": "distributions_container_pull_through_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a container pull through distribution",
          "tags": [
            "Distributions: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/pull-through/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "distributions_container_pull_through_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a container pull through distribution",
          "tags": [
            "Distributions: Pull-Through"
          ]
        },
        "get": {
          "description": "A special pull-through Container Distribution that will reference distributions serving content.",
          "operationId": "distributions_container_pull_through_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerPullThroughDistributionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container pull through distribution",
          "tags": [
            "Distributions: Pull-Through"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "distributions_container_pull_through_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPullThroughDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPullThroughDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPullThroughDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container pull through distribution",
          "tags": [
            "Distributions: Pull-Through"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "distributions_container_pull_through_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container pull through distribution",
          "tags": [
            "Distributions: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/pull-through/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "distributions_container_pull_through_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Distributions: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/pull-through/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "distributions_container_pull_through_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Distributions: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/pull-through/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "distributions_container_pull_through_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Distributions: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/pull-through/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "distributions_container_pull_through_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Distributions: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/pull-through/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "distributions_container_pull_through_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Distributions: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/container/pull-through/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "distributions_container_pull_through_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Distributions: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/core/artifacts/": {
        "get": {
          "description": "ViewSet for ArtifactDistribution.",
          "operationId": "distributions_core_artifacts_list",
          "parameters": [
            {
              "description": "Filter results where base_path matches value",
              "in": "query",
              "name": "base_path",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "base_path__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-base_path",
                    "-hidden",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "base_path",
                    "hidden",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository matches value",
              "in": "query",
              "name": "repository",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "repository__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter distributions based on the content served by them",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedArtifactDistributionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List artifact distributions",
          "tags": [
            "Distributions: Artifacts"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/core/artifacts/{pulp_id}/": {
        "get": {
          "description": "ViewSet for ArtifactDistribution.",
          "operationId": "distributions_core_artifacts_read",
          "parameters": [
            {
              "description": "A UUID string identifying this artifact distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArtifactDistributionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an artifact distribution",
          "tags": [
            "Distributions: Artifacts"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/file/file/": {
        "get": {
          "description": "\nFileDistributions host File\nPublications which makes the metadata and the referenced File Content available to HTTP\nclients. Additionally, a FileDistribution with an associated FilePublication can be the target\nurl of a File Remote , allowing\nanother instance of Pulp to sync the content.",
          "operationId": "distributions_file_file_list",
          "parameters": [
            {
              "description": "Filter results where base_path matches value",
              "in": "query",
              "name": "base_path",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path contains value",
              "in": "query",
              "name": "base_path__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where base_path is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "base_path__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `base_path` - Base path\n* `-base_path` - Base path (descending)\n* `hidden` - Hidden\n* `-hidden` - Hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-base_path",
                    "-hidden",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "base_path",
                    "hidden",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository matches value",
              "in": "query",
              "name": "repository",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where repository is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "repository__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter distributions based on the content served by them",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedfile.FileDistributionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List file distributions",
          "tags": [
            "Distributions: File"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous create task",
          "operationId": "distributions_file_file_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a file distribution",
          "tags": [
            "Distributions: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/file/file/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "distributions_file_file_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a file distribution",
          "tags": [
            "Distributions: File"
          ]
        },
        "get": {
          "description": "\nFileDistributions host File\nPublications which makes the metadata and the referenced File Content available to HTTP\nclients. Additionally, a FileDistribution with an associated FilePublication can be the target\nurl of a File Remote , allowing\nanother instance of Pulp to sync the content.",
          "operationId": "distributions_file_file_read",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FileDistributionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a file distribution",
          "tags": [
            "Distributions: File"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "distributions_file_file_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a file distribution",
          "tags": [
            "Distributions: File"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "distributions_file_file_update",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileDistribution"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileDistribution"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileDistribution"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a file distribution",
          "tags": [
            "Distributions: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/file/file/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "distributions_file_file_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Distributions: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/file/file/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "distributions_file_file_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Distributions: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/file/file/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "distributions_file_file_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Distributions: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/file/file/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "distributions_file_file_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Distributions: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/file/file/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "distributions_file_file_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Distributions: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/distributions/file/file/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "distributions_file_file_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this file distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Distributions: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/docs/api.json": {
        "get": {
          "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
          "operationId": "docs_api.json_get",
          "parameters": [
            {
              "in": "query",
              "name": "lang",
              "schema": {
                "enum": [
                  "en-us",
                  "es",
                  "fr",
                  "ja",
                  "ko",
                  "nl",
                  "zh-hans"
                ],
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                },
                "application/vnd.oai.openapi+json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Docs: Api.Json"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/docs/api.yaml": {
        "get": {
          "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
          "operationId": "docs_api.yaml_get",
          "parameters": [
            {
              "in": "query",
              "name": "lang",
              "schema": {
                "enum": [
                  "en-us",
                  "es",
                  "fr",
                  "ja",
                  "ko",
                  "nl",
                  "zh-hans"
                ],
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/vnd.oai.openapi": {
                  "schema": {
                    "type": "object"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Docs: Api.Yaml"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/domains/": {
        "get": {
          "description": "ViewSet for Domain.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
          "operationId": "domains_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `storage_class` - Storage class\n* `-storage_class` - Storage class (descending)\n* `storage_settings` - Storage settings\n* `-storage_settings` - Storage settings (descending)\n* `redirect_to_object_storage` - Redirect to object storage\n* `-redirect_to_object_storage` - Redirect to object storage (descending)\n* `hide_guarded_distributions` - Hide guarded distributions\n* `-hide_guarded_distributions` - Hide guarded distributions (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-hide_guarded_distributions",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-redirect_to_object_storage",
                    "-storage_class",
                    "-storage_settings",
                    "description",
                    "hide_guarded_distributions",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "redirect_to_object_storage",
                    "storage_class",
                    "storage_settings"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedDomainResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List domains",
          "tags": [
            "Domains"
          ]
        },
        "post": {
          "description": "ViewSet for Domain.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
          "operationId": "domains_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DomainResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a domain",
          "tags": [
            "Domains"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/domains/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "domains_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this domain.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a domain",
          "tags": [
            "Domains"
          ]
        },
        "get": {
          "description": "ViewSet for Domain.\n\nNOTE: This API endpoint is in \"tech preview\" and subject to change",
          "operationId": "domains_read",
          "parameters": [
            {
              "description": "A UUID string identifying this domain.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DomainResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a domain",
          "tags": [
            "Domains"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "domains_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this domain.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedDomain"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedDomain"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedDomain"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a domain",
          "tags": [
            "Domains"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "domains_update",
          "parameters": [
            {
              "description": "A UUID string identifying this domain.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a domain",
          "tags": [
            "Domains"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/exporters/core/filesystem/": {
        "get": {
          "description": "Endpoint for managing FilesystemExporters.",
          "operationId": "exporters_core_filesystem_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `path` - Path\n* `-path` - Path (descending)\n* `method` - Method\n* `-method` - Method (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-method",
                    "-name",
                    "-path",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "method",
                    "name",
                    "path",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedFilesystemExporterResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List filesystem exporters",
          "tags": [
            "Exporters: Filesystem"
          ]
        },
        "post": {
          "description": "Endpoint for managing FilesystemExporters.",
          "operationId": "exporters_core_filesystem_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FilesystemExporterResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a filesystem exporter",
          "tags": [
            "Exporters: Filesystem"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/": {
        "get": {
          "description": "Endpoint for managing FilesystemExports.",
          "operationId": "exporters_core_filesystem_exports_list",
          "parameters": [
            {
              "in": "path",
              "name": "exporter_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedFilesystemExportResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List filesystem exports",
          "tags": [
            "Exporters: Filesystem Exports"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous task to export files to the filesystem",
          "operationId": "exporters_core_filesystem_exports_create",
          "parameters": [
            {
              "in": "path",
              "name": "exporter_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExport"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExport"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExport"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a filesystem export",
          "tags": [
            "Exporters: Filesystem Exports"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{exporter_pk}/exports/{pulp_id}/": {
        "delete": {
          "description": "Endpoint for managing FilesystemExports.",
          "operationId": "exporters_core_filesystem_exports_delete",
          "parameters": [
            {
              "in": "path",
              "name": "exporter_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this filesystem export.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a filesystem export",
          "tags": [
            "Exporters: Filesystem Exports"
          ]
        },
        "get": {
          "description": "Endpoint for managing FilesystemExports.",
          "operationId": "exporters_core_filesystem_exports_read",
          "parameters": [
            {
              "in": "path",
              "name": "exporter_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this filesystem export.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FilesystemExportResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a filesystem export",
          "tags": [
            "Exporters: Filesystem Exports"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/exporters/core/filesystem/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "exporters_core_filesystem_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this filesystem exporter.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a filesystem exporter",
          "tags": [
            "Exporters: Filesystem"
          ]
        },
        "get": {
          "description": "Endpoint for managing FilesystemExporters.",
          "operationId": "exporters_core_filesystem_read",
          "parameters": [
            {
              "description": "A UUID string identifying this filesystem exporter.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FilesystemExporterResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a filesystem exporter",
          "tags": [
            "Exporters: Filesystem"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "exporters_core_filesystem_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this filesystem exporter.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedFilesystemExporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedFilesystemExporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedFilesystemExporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a filesystem exporter",
          "tags": [
            "Exporters: Filesystem"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "exporters_core_filesystem_update",
          "parameters": [
            {
              "description": "A UUID string identifying this filesystem exporter.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/FilesystemExporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a filesystem exporter",
          "tags": [
            "Exporters: Filesystem"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/exporters/core/pulp/": {
        "get": {
          "description": "ViewSet for viewing PulpExporters.",
          "operationId": "exporters_core_pulp_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `path` - Path\n* `-path` - Path (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-path",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "name",
                    "path",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedPulpExporterResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List pulp exporters",
          "tags": [
            "Exporters: Pulp"
          ]
        },
        "post": {
          "description": "ViewSet for viewing PulpExporters.",
          "operationId": "exporters_core_pulp_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PulpExporterResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a pulp exporter",
          "tags": [
            "Exporters: Pulp"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/": {
        "get": {
          "description": "ViewSet for viewing exports from a PulpExporter.",
          "operationId": "exporters_core_pulp_exports_list",
          "parameters": [
            {
              "in": "path",
              "name": "exporter_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedPulpExportResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List pulp exports",
          "tags": [
            "Exporters: Pulp Exports"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous task to export a set of repositories",
          "operationId": "exporters_core_pulp_exports_create",
          "parameters": [
            {
              "in": "path",
              "name": "exporter_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExport"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExport"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExport"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a pulp export",
          "tags": [
            "Exporters: Pulp Exports"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/exporters/core/pulp/{exporter_pk}/exports/{pulp_id}/": {
        "delete": {
          "description": "ViewSet for viewing exports from a PulpExporter.",
          "operationId": "exporters_core_pulp_exports_delete",
          "parameters": [
            {
              "in": "path",
              "name": "exporter_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this pulp export.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a pulp export",
          "tags": [
            "Exporters: Pulp Exports"
          ]
        },
        "get": {
          "description": "ViewSet for viewing exports from a PulpExporter.",
          "operationId": "exporters_core_pulp_exports_read",
          "parameters": [
            {
              "in": "path",
              "name": "exporter_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this pulp export.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PulpExportResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a pulp export",
          "tags": [
            "Exporters: Pulp Exports"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/exporters/core/pulp/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "exporters_core_pulp_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this pulp exporter.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a pulp exporter",
          "tags": [
            "Exporters: Pulp"
          ]
        },
        "get": {
          "description": "ViewSet for viewing PulpExporters.",
          "operationId": "exporters_core_pulp_read",
          "parameters": [
            {
              "description": "A UUID string identifying this pulp exporter.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PulpExporterResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a pulp exporter",
          "tags": [
            "Exporters: Pulp"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "exporters_core_pulp_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this pulp exporter.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedPulpExporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedPulpExporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedPulpExporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a pulp exporter",
          "tags": [
            "Exporters: Pulp"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "exporters_core_pulp_update",
          "parameters": [
            {
              "description": "A UUID string identifying this pulp exporter.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PulpExporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a pulp exporter",
          "tags": [
            "Exporters: Pulp"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/galaxy_ng/container-distribution-proxy/{pulp_id}/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "galaxy_ng_container_distribution_proxy_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container distribution.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContainerRepositoryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container distribution",
          "tags": [
            "Galaxy_Ng: Container-Distribution-Proxy"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/galaxy_ng/registry-remote/{pulp_id}/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "galaxy_ng_registry_remote_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container registry remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/galaxy.ContainerRegistryRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container registry remote",
          "tags": [
            "Galaxy_Ng: Registry-Remote"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/": {
        "get": {
          "description": "ViewSet for Group.",
          "operationId": "_api_automation-hub_pulp_api_v3_groups_groups_list",
          "parameters": [
            {
              "description": "Filter results where id matches value",
              "in": "query",
              "name": "id",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where id is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "id__in",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `id` - Id\n* `-id` - Id (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-id",
                    "-name",
                    "-pk",
                    "id",
                    "name",
                    "pk"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGroupResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List groups",
          "tags": [
            "Groups"
          ]
        },
        "post": {
          "description": "ViewSet for Group.",
          "operationId": "_api_automation-hub_pulp_api_v3_groups_groups_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a group",
          "tags": [
            "Groups"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/": {
        "get": {
          "description": "ViewSet for GroupRole.",
          "operationId": "groups_roles_list",
          "parameters": [
            {
              "description": "content_object",
              "in": "query",
              "name": "content_object",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Foreign Key referenced by HREF",
              "in": "query",
              "name": "domain",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `role` - Role\n* `-role` - Role (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-pk",
                    "-pulp_created",
                    "-role",
                    "description",
                    "pk",
                    "pulp_created",
                    "role"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "role",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "role__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "role__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "role__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "role__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGroupRoleResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List group roles",
          "tags": [
            "Groups: Roles"
          ]
        },
        "post": {
          "description": "ViewSet for GroupRole.",
          "operationId": "groups_roles_create",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a group role",
          "tags": [
            "Groups: Roles"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{group_pk}/roles/{pulp_id}/": {
        "delete": {
          "description": "ViewSet for GroupRole.",
          "operationId": "groups_roles_delete",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this group role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a group role",
          "tags": [
            "Groups: Roles"
          ]
        },
        "get": {
          "description": "ViewSet for GroupRole.",
          "operationId": "groups_roles_read",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this group role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a group role",
          "tags": [
            "Groups: Roles"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/": {
        "get": {
          "description": "List group users.",
          "operationId": "_api_automation-hub_pulp_api_v3_groups_{group_pk}_users_groups_users_list",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGroupUserResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List users",
          "tags": [
            "Groups: Users"
          ]
        },
        "post": {
          "description": "Add a user to a group.",
          "operationId": "_api_automation-hub_pulp_api_v3_groups_{group_pk}_users_groups_users_create",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUser"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUser"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUser"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupUserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an user",
          "tags": [
            "Groups: Users"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{group_pk}/users/{id}/": {
        "delete": {
          "description": "Remove a user from a group.",
          "operationId": "_api_automation-hub_pulp_api_v3_groups_{group_pk}_users_{id}_groups_users_delete",
          "parameters": [
            {
              "in": "path",
              "name": "group_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete an user",
          "tags": [
            "Groups: Users"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{id}/": {
        "delete": {
          "description": "ViewSet for Group.",
          "operationId": "_api_automation-hub_pulp_api_v3_groups_{id}_groups_delete",
          "parameters": [
            {
              "description": "A unique integer value identifying this group.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a group",
          "tags": [
            "Groups"
          ]
        },
        "get": {
          "description": "ViewSet for Group.",
          "operationId": "_api_automation-hub_pulp_api_v3_groups_{id}_groups_read",
          "parameters": [
            {
              "description": "A unique integer value identifying this group.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a group",
          "tags": [
            "Groups"
          ]
        },
        "patch": {
          "description": "ViewSet for Group.",
          "operationId": "groups_partial_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this group.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedGroup"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedGroup"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedGroup"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a group",
          "tags": [
            "Groups"
          ]
        },
        "put": {
          "description": "ViewSet for Group.",
          "operationId": "groups_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this group.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a group",
          "tags": [
            "Groups"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "groups_add_role",
          "parameters": [
            {
              "description": "A unique integer value identifying this group.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Groups"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "groups_list_roles",
          "parameters": [
            {
              "description": "A unique integer value identifying this group.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Groups"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "groups_my_permissions",
          "parameters": [
            {
              "description": "A unique integer value identifying this group.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Groups"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/groups/{id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "groups_remove_role",
          "parameters": [
            {
              "description": "A unique integer value identifying this group.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Groups"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/importers/core/pulp/": {
        "get": {
          "description": "ViewSet for PulpImporters.",
          "operationId": "importers_core_pulp_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedPulpImporterResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List pulp importers",
          "tags": [
            "Importers: Pulp"
          ]
        },
        "post": {
          "description": "ViewSet for PulpImporters.",
          "operationId": "importers_core_pulp_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PulpImporterResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a pulp importer",
          "tags": [
            "Importers: Pulp"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/importers/core/pulp/import-check/": {
        "post": {
          "description": "Evaluates validity of proposed PulpImport parameters 'toc', 'path', and 'repo_mapping'.\n\n* Checks that toc, path are in ALLOWED_IMPORT_PATHS\n* if ALLOWED:\n  * Checks that toc, path exist and are readable\n  * If toc specified, checks that containing dir is writeable\n* Checks that repo_mapping is valid JSON",
          "operationId": "pulp_import_check_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImportCheck"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImportCheck"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImportCheck"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PulpImportCheckResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Validate the parameters to be used for a PulpImport call",
          "tags": [
            "Importers: Pulp Import-Check"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/": {
        "get": {
          "description": "ViewSet for PulpImports.",
          "operationId": "importers_core_pulp_imports_list",
          "parameters": [
            {
              "in": "path",
              "name": "importer_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedImportResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List pulp imports",
          "tags": [
            "Importers: Pulp Imports"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous task to import a Pulp export.",
          "operationId": "importers_core_pulp_imports_create",
          "parameters": [
            {
              "in": "path",
              "name": "importer_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImport"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImport"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImport"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskGroupOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a pulp import",
          "tags": [
            "Importers: Pulp Imports"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/importers/core/pulp/{importer_pk}/imports/{pulp_id}/": {
        "delete": {
          "description": "ViewSet for PulpImports.",
          "operationId": "importers_core_pulp_imports_delete",
          "parameters": [
            {
              "in": "path",
              "name": "importer_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this pulp import.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a pulp import",
          "tags": [
            "Importers: Pulp Imports"
          ]
        },
        "get": {
          "description": "ViewSet for PulpImports.",
          "operationId": "importers_core_pulp_imports_read",
          "parameters": [
            {
              "in": "path",
              "name": "importer_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this pulp import.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ImportResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a pulp import",
          "tags": [
            "Importers: Pulp Imports"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/importers/core/pulp/{pulp_id}/": {
        "delete": {
          "description": "ViewSet for PulpImporters.",
          "operationId": "importers_core_pulp_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this pulp importer.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a pulp importer",
          "tags": [
            "Importers: Pulp"
          ]
        },
        "get": {
          "description": "ViewSet for PulpImporters.",
          "operationId": "importers_core_pulp_read",
          "parameters": [
            {
              "description": "A UUID string identifying this pulp importer.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PulpImporterResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a pulp importer",
          "tags": [
            "Importers: Pulp"
          ]
        },
        "patch": {
          "description": "ViewSet for PulpImporters.",
          "operationId": "importers_core_pulp_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this pulp importer.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedPulpImporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedPulpImporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedPulpImporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PulpImporterResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a pulp importer",
          "tags": [
            "Importers: Pulp"
          ]
        },
        "put": {
          "description": "ViewSet for PulpImporters.",
          "operationId": "importers_core_pulp_update",
          "parameters": [
            {
              "description": "A UUID string identifying this pulp importer.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporter"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporter"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PulpImporter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PulpImporterResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a pulp importer",
          "tags": [
            "Importers: Pulp"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/orphans/": {
        "delete": {
          "description": "DEPRECATED! Trigger an asynchronous task that deletes all orphaned content and artifacts. Use the `POST /pulp/api/v3/orphans/cleanup/` call instead.",
          "operationId": "orphans_delete",
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete orphans",
          "tags": [
            "Orphans"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/orphans/cleanup/": {
        "post": {
          "description": "Trigger an asynchronous orphan cleanup operation.",
          "operationId": "orphans_cleanup_cleanup",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrphansCleanup"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/OrphansCleanup"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/OrphansCleanup"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Orphans: Cleanup"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/publications/": {
        "get": {
          "description": "A base class for any publication viewset.",
          "operationId": "publications_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content__in",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `pass_through` - Pass through\n* `-pass_through` - Pass through (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-complete",
                    "-pass_through",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "complete",
                    "pass_through",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where pulp_created matches value",
              "in": "query",
              "name": "pulp_created",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than value",
              "in": "query",
              "name": "pulp_created__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than or equal to value",
              "in": "query",
              "name": "pulp_created__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than value",
              "in": "query",
              "name": "pulp_created__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than or equal to value",
              "in": "query",
              "name": "pulp_created__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_created__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Pulp type\n\n* `file.file` - file.file",
              "in": "query",
              "name": "pulp_type",
              "schema": {
                "enum": [
                  "file.file"
                ],
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.\n\n* `file.file` - file.file",
              "explode": false,
              "in": "query",
              "name": "pulp_type__in",
              "schema": {
                "items": {
                  "enum": [
                    "file.file"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository referenced by HREF",
              "in": "query",
              "name": "repository",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedPublicationResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List publications",
          "tags": [
            "Publications"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/publications/file/file/": {
        "get": {
          "description": "\nA FilePublication contains metadata about all the File Content in a particular File Repository Version.\nOnce a FilePublication has been created, it can be hosted using the\nFile Distribution API.",
          "operationId": "publications_file_file_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content__in",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `pass_through` - Pass through\n* `-pass_through` - Pass through (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-complete",
                    "-pass_through",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "complete",
                    "pass_through",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where pulp_created matches value",
              "in": "query",
              "name": "pulp_created",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than value",
              "in": "query",
              "name": "pulp_created__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than or equal to value",
              "in": "query",
              "name": "pulp_created__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than value",
              "in": "query",
              "name": "pulp_created__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than or equal to value",
              "in": "query",
              "name": "pulp_created__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_created__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository referenced by HREF",
              "in": "query",
              "name": "repository",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedfile.FilePublicationResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List file publications",
          "tags": [
            "Publications: File"
          ]
        },
        "post": {
          "description": "Trigger an asynchronous task to publish file content.",
          "operationId": "publications_file_file_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FilePublication"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FilePublication"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FilePublication"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a file publication",
          "tags": [
            "Publications: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/publications/file/file/{pulp_id}/": {
        "delete": {
          "description": "\nA FilePublication contains metadata about all the File Content in a particular File Repository Version.\nOnce a FilePublication has been created, it can be hosted using the\nFile Distribution API.",
          "operationId": "publications_file_file_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this file publication.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a file publication",
          "tags": [
            "Publications: File"
          ]
        },
        "get": {
          "description": "\nA FilePublication contains metadata about all the File Content in a particular File Repository Version.\nOnce a FilePublication has been created, it can be hosted using the\nFile Distribution API.",
          "operationId": "publications_file_file_read",
          "parameters": [
            {
              "description": "A UUID string identifying this file publication.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FilePublicationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a file publication",
          "tags": [
            "Publications: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/publications/file/file/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "publications_file_file_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file publication.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Publications: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/publications/file/file/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "publications_file_file_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this file publication.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Publications: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/publications/file/file/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "publications_file_file_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this file publication.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Publications: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/publications/file/file/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "publications_file_file_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file publication.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Publications: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "pulp_ansible_namespaces_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedNamespaceSummaryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List namespaces",
          "tags": [
            "Pulp_Ansible: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_ansible/namespaces/{id}/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "pulp_ansible_namespaces_read",
          "parameters": [
            {
              "description": "A unique integer value identifying this namespace.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceSummaryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a namespace",
          "tags": [
            "Pulp_Ansible: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_ansible/tags/": {
        "get": {
          "description": "ViewSet for Tag models.",
          "operationId": "pulp_ansible_tags_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedTagResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List tags",
          "tags": [
            "Pulp_Ansible: Tags"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_container/namespaces/": {
        "get": {
          "description": "ViewSet for ContainerNamespaces.",
          "operationId": "pulp_container_namespaces_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ContainerNamespaceResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List container namespaces",
          "tags": [
            "Pulp_Container: Namespaces"
          ]
        },
        "post": {
          "description": "ViewSet for ContainerNamespaces.",
          "operationId": "pulp_container_namespaces_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerNamespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerNamespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerNamespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerNamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a container namespace",
          "tags": [
            "Pulp_Container: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "pulp_container_namespaces_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this container namespace.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a container namespace",
          "tags": [
            "Pulp_Container: Namespaces"
          ]
        },
        "get": {
          "description": "ViewSet for ContainerNamespaces.",
          "operationId": "pulp_container_namespaces_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container namespace.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerNamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container namespace",
          "tags": [
            "Pulp_Container: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "pulp_container_namespaces_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container namespace.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Pulp_Container: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "pulp_container_namespaces_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this container namespace.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Pulp_Container: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "pulp_container_namespaces_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this container namespace.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Pulp_Container: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/pulp_container/namespaces/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "pulp_container_namespaces_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container namespace.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Pulp_Container: Namespaces"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "remotes_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-ca_cert",
                    "-client_cert",
                    "-client_key",
                    "-connect_timeout",
                    "-download_concurrency",
                    "-headers",
                    "-max_retries",
                    "-name",
                    "-password",
                    "-pk",
                    "-policy",
                    "-proxy_password",
                    "-proxy_url",
                    "-proxy_username",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-rate_limit",
                    "-sock_connect_timeout",
                    "-sock_read_timeout",
                    "-tls_validation",
                    "-total_timeout",
                    "-url",
                    "-username",
                    "ca_cert",
                    "client_cert",
                    "client_key",
                    "connect_timeout",
                    "download_concurrency",
                    "headers",
                    "max_retries",
                    "name",
                    "password",
                    "pk",
                    "policy",
                    "proxy_password",
                    "proxy_url",
                    "proxy_username",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "rate_limit",
                    "sock_connect_timeout",
                    "sock_read_timeout",
                    "tls_validation",
                    "total_timeout",
                    "url",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated matches value",
              "in": "query",
              "name": "pulp_last_updated",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than value",
              "in": "query",
              "name": "pulp_last_updated__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than value",
              "in": "query",
              "name": "pulp_last_updated__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_last_updated__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Pulp type\n\n* `galaxy.remote` - galaxy.remote\n* `file.file` - file.file\n* `container.container` - container.container\n* `container.remote` - container.remote\n* `ansible.role` - ansible.role\n* `ansible.collection` - ansible.collection\n* `ansible.git` - ansible.git",
              "in": "query",
              "name": "pulp_type",
              "schema": {
                "enum": [
                  "ansible.collection",
                  "ansible.git",
                  "ansible.role",
                  "container.container",
                  "container.remote",
                  "file.file",
                  "galaxy.remote"
                ],
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.\n\n* `galaxy.remote` - galaxy.remote\n* `file.file` - file.file\n* `container.container` - container.container\n* `container.remote` - container.remote\n* `ansible.role` - ansible.role\n* `ansible.collection` - ansible.collection\n* `ansible.git` - ansible.git",
              "explode": false,
              "in": "query",
              "name": "pulp_type__in",
              "schema": {
                "items": {
                  "enum": [
                    "ansible.collection",
                    "ansible.git",
                    "ansible.role",
                    "container.container",
                    "container.remote",
                    "file.file",
                    "galaxy.remote"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRemoteResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List remotes",
          "tags": [
            "Remotes"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/collection/": {
        "get": {
          "description": "ViewSet for Collection Remotes.",
          "operationId": "remotes_ansible_collection_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `requirements_file` - Requirements file\n* `-requirements_file` - Requirements file (descending)\n* `auth_url` - Auth url\n* `-auth_url` - Auth url (descending)\n* `token` - Token\n* `-token` - Token (descending)\n* `sync_dependencies` - Sync dependencies\n* `-sync_dependencies` - Sync dependencies (descending)\n* `signed_only` - Signed only\n* `-signed_only` - Signed only (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-auth_url",
                    "-ca_cert",
                    "-client_cert",
                    "-client_key",
                    "-connect_timeout",
                    "-download_concurrency",
                    "-headers",
                    "-max_retries",
                    "-name",
                    "-password",
                    "-pk",
                    "-policy",
                    "-proxy_password",
                    "-proxy_url",
                    "-proxy_username",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-rate_limit",
                    "-requirements_file",
                    "-signed_only",
                    "-sock_connect_timeout",
                    "-sock_read_timeout",
                    "-sync_dependencies",
                    "-tls_validation",
                    "-token",
                    "-total_timeout",
                    "-url",
                    "-username",
                    "auth_url",
                    "ca_cert",
                    "client_cert",
                    "client_key",
                    "connect_timeout",
                    "download_concurrency",
                    "headers",
                    "max_retries",
                    "name",
                    "password",
                    "pk",
                    "policy",
                    "proxy_password",
                    "proxy_url",
                    "proxy_username",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "rate_limit",
                    "requirements_file",
                    "signed_only",
                    "sock_connect_timeout",
                    "sock_read_timeout",
                    "sync_dependencies",
                    "tls_validation",
                    "token",
                    "total_timeout",
                    "url",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated matches value",
              "in": "query",
              "name": "pulp_last_updated",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than value",
              "in": "query",
              "name": "pulp_last_updated__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than value",
              "in": "query",
              "name": "pulp_last_updated__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_last_updated__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where url matches value",
              "in": "query",
              "name": "url",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where url contains value",
              "in": "query",
              "name": "url__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where url contains value",
              "in": "query",
              "name": "url__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where url is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "url__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.CollectionRemoteResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List collection remotes",
          "tags": [
            "Remotes: Collection"
          ]
        },
        "post": {
          "description": "ViewSet for Collection Remotes.",
          "operationId": "remotes_ansible_collection_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a collection remote",
          "tags": [
            "Remotes: Collection"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "remotes_ansible_collection_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a collection remote",
          "tags": [
            "Remotes: Collection"
          ]
        },
        "get": {
          "description": "ViewSet for Collection Remotes.",
          "operationId": "remotes_ansible_collection_read",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.CollectionRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection remote",
          "tags": [
            "Remotes: Collection"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "remotes_ansible_collection_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.CollectionRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a collection remote",
          "tags": [
            "Remotes: Collection"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "remotes_ansible_collection_update",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.CollectionRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a collection remote",
          "tags": [
            "Remotes: Collection"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "remotes_ansible_collection_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Remotes: Collection"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "remotes_ansible_collection_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Remotes: Collection"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "remotes_ansible_collection_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Remotes: Collection"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "remotes_ansible_collection_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Remotes: Collection"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "remotes_ansible_collection_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Remotes: Collection"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/collection/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "remotes_ansible_collection_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this collection remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Remotes: Collection"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/git/": {
        "get": {
          "description": "ViewSet for Ansible Remotes.\n\nThis is a tech preview feature. The functionality may change in the future.",
          "operationId": "remotes_ansible_git_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-ca_cert",
                    "-client_cert",
                    "-client_key",
                    "-connect_timeout",
                    "-download_concurrency",
                    "-headers",
                    "-max_retries",
                    "-name",
                    "-password",
                    "-pk",
                    "-policy",
                    "-proxy_password",
                    "-proxy_url",
                    "-proxy_username",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-rate_limit",
                    "-sock_connect_timeout",
                    "-sock_read_timeout",
                    "-tls_validation",
                    "-total_timeout",
                    "-url",
                    "-username",
                    "ca_cert",
                    "client_cert",
                    "client_key",
                    "connect_timeout",
                    "download_concurrency",
                    "headers",
                    "max_retries",
                    "name",
                    "password",
                    "pk",
                    "policy",
                    "proxy_password",
                    "proxy_url",
                    "proxy_username",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "rate_limit",
                    "sock_connect_timeout",
                    "sock_read_timeout",
                    "tls_validation",
                    "total_timeout",
                    "url",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated matches value",
              "in": "query",
              "name": "pulp_last_updated",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than value",
              "in": "query",
              "name": "pulp_last_updated__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than value",
              "in": "query",
              "name": "pulp_last_updated__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_last_updated__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.GitRemoteResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List git remotes",
          "tags": [
            "Remotes: Git"
          ]
        },
        "post": {
          "description": "ViewSet for Ansible Remotes.\n\nThis is a tech preview feature. The functionality may change in the future.",
          "operationId": "remotes_ansible_git_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.GitRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.GitRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.GitRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.GitRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a git remote",
          "tags": [
            "Remotes: Git"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "remotes_ansible_git_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a git remote",
          "tags": [
            "Remotes: Git"
          ]
        },
        "get": {
          "description": "ViewSet for Ansible Remotes.\n\nThis is a tech preview feature. The functionality may change in the future.",
          "operationId": "remotes_ansible_git_read",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.GitRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a git remote",
          "tags": [
            "Remotes: Git"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "remotes_ansible_git_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.GitRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.GitRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.GitRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a git remote",
          "tags": [
            "Remotes: Git"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "remotes_ansible_git_update",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.GitRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.GitRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.GitRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a git remote",
          "tags": [
            "Remotes: Git"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "remotes_ansible_git_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Remotes: Git"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "remotes_ansible_git_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Remotes: Git"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "remotes_ansible_git_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Remotes: Git"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "remotes_ansible_git_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Remotes: Git"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "remotes_ansible_git_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Remotes: Git"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/git/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "remotes_ansible_git_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this git remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Remotes: Git"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/role/": {
        "get": {
          "description": "ViewSet for Role Remotes.",
          "operationId": "remotes_ansible_role_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-ca_cert",
                    "-client_cert",
                    "-client_key",
                    "-connect_timeout",
                    "-download_concurrency",
                    "-headers",
                    "-max_retries",
                    "-name",
                    "-password",
                    "-pk",
                    "-policy",
                    "-proxy_password",
                    "-proxy_url",
                    "-proxy_username",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-rate_limit",
                    "-sock_connect_timeout",
                    "-sock_read_timeout",
                    "-tls_validation",
                    "-total_timeout",
                    "-url",
                    "-username",
                    "ca_cert",
                    "client_cert",
                    "client_key",
                    "connect_timeout",
                    "download_concurrency",
                    "headers",
                    "max_retries",
                    "name",
                    "password",
                    "pk",
                    "policy",
                    "proxy_password",
                    "proxy_url",
                    "proxy_username",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "rate_limit",
                    "sock_connect_timeout",
                    "sock_read_timeout",
                    "tls_validation",
                    "total_timeout",
                    "url",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated matches value",
              "in": "query",
              "name": "pulp_last_updated",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than value",
              "in": "query",
              "name": "pulp_last_updated__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than value",
              "in": "query",
              "name": "pulp_last_updated__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_last_updated__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.RoleRemoteResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List role remotes",
          "tags": [
            "Remotes: Role"
          ]
        },
        "post": {
          "description": "ViewSet for Role Remotes.",
          "operationId": "remotes_ansible_role_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.RoleRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a role remote",
          "tags": [
            "Remotes: Role"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "remotes_ansible_role_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a role remote",
          "tags": [
            "Remotes: Role"
          ]
        },
        "get": {
          "description": "ViewSet for Role Remotes.",
          "operationId": "remotes_ansible_role_read",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.RoleRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a role remote",
          "tags": [
            "Remotes: Role"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "remotes_ansible_role_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.RoleRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.RoleRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.RoleRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a role remote",
          "tags": [
            "Remotes: Role"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "remotes_ansible_role_update",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.RoleRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a role remote",
          "tags": [
            "Remotes: Role"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "remotes_ansible_role_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Remotes: Role"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "remotes_ansible_role_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Remotes: Role"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "remotes_ansible_role_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Remotes: Role"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "remotes_ansible_role_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Remotes: Role"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "remotes_ansible_role_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Remotes: Role"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/ansible/role/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "remotes_ansible_role_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this role remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Remotes: Role"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/container/": {
        "get": {
          "description": "Container remotes represent an external repository that implements the Container\nRegistry API. Container remotes support deferred downloading by configuring\nthe ``policy`` field.  ``on_demand`` and ``streamed`` policies can provide\nsignificant disk space savings.",
          "operationId": "remotes_container_container_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-ca_cert",
                    "-client_cert",
                    "-client_key",
                    "-connect_timeout",
                    "-download_concurrency",
                    "-headers",
                    "-max_retries",
                    "-name",
                    "-password",
                    "-pk",
                    "-policy",
                    "-proxy_password",
                    "-proxy_url",
                    "-proxy_username",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-rate_limit",
                    "-sock_connect_timeout",
                    "-sock_read_timeout",
                    "-tls_validation",
                    "-total_timeout",
                    "-url",
                    "-username",
                    "ca_cert",
                    "client_cert",
                    "client_key",
                    "connect_timeout",
                    "download_concurrency",
                    "headers",
                    "max_retries",
                    "name",
                    "password",
                    "pk",
                    "policy",
                    "proxy_password",
                    "proxy_url",
                    "proxy_username",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "rate_limit",
                    "sock_connect_timeout",
                    "sock_read_timeout",
                    "tls_validation",
                    "total_timeout",
                    "url",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated matches value",
              "in": "query",
              "name": "pulp_last_updated",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than value",
              "in": "query",
              "name": "pulp_last_updated__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than value",
              "in": "query",
              "name": "pulp_last_updated__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_last_updated__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ContainerRemoteResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List container remotes",
          "tags": [
            "Remotes: Container"
          ]
        },
        "post": {
          "description": "Container remotes represent an external repository that implements the Container\nRegistry API. Container remotes support deferred downloading by configuring\nthe ``policy`` field.  ``on_demand`` and ``streamed`` policies can provide\nsignificant disk space savings.",
          "operationId": "remotes_container_container_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a container remote",
          "tags": [
            "Remotes: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "remotes_container_container_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a container remote",
          "tags": [
            "Remotes: Container"
          ]
        },
        "get": {
          "description": "Container remotes represent an external repository that implements the Container\nRegistry API. Container remotes support deferred downloading by configuring\nthe ``policy`` field.  ``on_demand`` and ``streamed`` policies can provide\nsignificant disk space savings.",
          "operationId": "remotes_container_container_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container remote",
          "tags": [
            "Remotes: Container"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "remotes_container_container_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container remote",
          "tags": [
            "Remotes: Container"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "remotes_container_container_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container remote",
          "tags": [
            "Remotes: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "remotes_container_container_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Remotes: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "remotes_container_container_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Remotes: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "remotes_container_container_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Remotes: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "remotes_container_container_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Remotes: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "remotes_container_container_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Remotes: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/container/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "remotes_container_container_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Remotes: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/pull-through/": {
        "get": {
          "description": "A Container Remote referencing a remote registry used as a source for the pull-through caching.",
          "operationId": "remotes_container_pull_through_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-ca_cert",
                    "-client_cert",
                    "-client_key",
                    "-connect_timeout",
                    "-download_concurrency",
                    "-headers",
                    "-max_retries",
                    "-name",
                    "-password",
                    "-pk",
                    "-policy",
                    "-proxy_password",
                    "-proxy_url",
                    "-proxy_username",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-rate_limit",
                    "-sock_connect_timeout",
                    "-sock_read_timeout",
                    "-tls_validation",
                    "-total_timeout",
                    "-url",
                    "-username",
                    "ca_cert",
                    "client_cert",
                    "client_key",
                    "connect_timeout",
                    "download_concurrency",
                    "headers",
                    "max_retries",
                    "name",
                    "password",
                    "pk",
                    "policy",
                    "proxy_password",
                    "proxy_url",
                    "proxy_username",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "rate_limit",
                    "sock_connect_timeout",
                    "sock_read_timeout",
                    "tls_validation",
                    "total_timeout",
                    "url",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated matches value",
              "in": "query",
              "name": "pulp_last_updated",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than value",
              "in": "query",
              "name": "pulp_last_updated__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than value",
              "in": "query",
              "name": "pulp_last_updated__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_last_updated__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ContainerPullThroughRemoteResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List container pull through remotes",
          "tags": [
            "Remotes: Pull-Through"
          ]
        },
        "post": {
          "description": "A Container Remote referencing a remote registry used as a source for the pull-through caching.",
          "operationId": "remotes_container_pull_through_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerPullThroughRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a container pull through remote",
          "tags": [
            "Remotes: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/pull-through/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "remotes_container_pull_through_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a container pull through remote",
          "tags": [
            "Remotes: Pull-Through"
          ]
        },
        "get": {
          "description": "A Container Remote referencing a remote registry used as a source for the pull-through caching.",
          "operationId": "remotes_container_pull_through_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerPullThroughRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container pull through remote",
          "tags": [
            "Remotes: Pull-Through"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "remotes_container_pull_through_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPullThroughRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPullThroughRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPullThroughRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container pull through remote",
          "tags": [
            "Remotes: Pull-Through"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "remotes_container_pull_through_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPullThroughRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container pull through remote",
          "tags": [
            "Remotes: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/pull-through/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "remotes_container_pull_through_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Remotes: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/pull-through/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "remotes_container_pull_through_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Remotes: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/pull-through/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "remotes_container_pull_through_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Remotes: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/pull-through/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "remotes_container_pull_through_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Remotes: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/pull-through/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "remotes_container_pull_through_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Remotes: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/container/pull-through/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "remotes_container_pull_through_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container pull through remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Remotes: Pull-Through"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/file/file/": {
        "get": {
          "description": "\nFileRemote represents an external source of File\nContent.  The target url of a FileRemote must contain a file manifest, which contains the\nmetadata for all files at the source.",
          "operationId": "remotes_file_file_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `url` - Url\n* `-url` - Url (descending)\n* `ca_cert` - Ca cert\n* `-ca_cert` - Ca cert (descending)\n* `client_cert` - Client cert\n* `-client_cert` - Client cert (descending)\n* `client_key` - Client key\n* `-client_key` - Client key (descending)\n* `tls_validation` - Tls validation\n* `-tls_validation` - Tls validation (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `proxy_url` - Proxy url\n* `-proxy_url` - Proxy url (descending)\n* `proxy_username` - Proxy username\n* `-proxy_username` - Proxy username (descending)\n* `proxy_password` - Proxy password\n* `-proxy_password` - Proxy password (descending)\n* `download_concurrency` - Download concurrency\n* `-download_concurrency` - Download concurrency (descending)\n* `max_retries` - Max retries\n* `-max_retries` - Max retries (descending)\n* `policy` - Policy\n* `-policy` - Policy (descending)\n* `total_timeout` - Total timeout\n* `-total_timeout` - Total timeout (descending)\n* `connect_timeout` - Connect timeout\n* `-connect_timeout` - Connect timeout (descending)\n* `sock_connect_timeout` - Sock connect timeout\n* `-sock_connect_timeout` - Sock connect timeout (descending)\n* `sock_read_timeout` - Sock read timeout\n* `-sock_read_timeout` - Sock read timeout (descending)\n* `headers` - Headers\n* `-headers` - Headers (descending)\n* `rate_limit` - Rate limit\n* `-rate_limit` - Rate limit (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-ca_cert",
                    "-client_cert",
                    "-client_key",
                    "-connect_timeout",
                    "-download_concurrency",
                    "-headers",
                    "-max_retries",
                    "-name",
                    "-password",
                    "-pk",
                    "-policy",
                    "-proxy_password",
                    "-proxy_url",
                    "-proxy_username",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-rate_limit",
                    "-sock_connect_timeout",
                    "-sock_read_timeout",
                    "-tls_validation",
                    "-total_timeout",
                    "-url",
                    "-username",
                    "ca_cert",
                    "client_cert",
                    "client_key",
                    "connect_timeout",
                    "download_concurrency",
                    "headers",
                    "max_retries",
                    "name",
                    "password",
                    "pk",
                    "policy",
                    "proxy_password",
                    "proxy_url",
                    "proxy_username",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "rate_limit",
                    "sock_connect_timeout",
                    "sock_read_timeout",
                    "tls_validation",
                    "total_timeout",
                    "url",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated matches value",
              "in": "query",
              "name": "pulp_last_updated",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than value",
              "in": "query",
              "name": "pulp_last_updated__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is greater than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than value",
              "in": "query",
              "name": "pulp_last_updated__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is less than or equal to value",
              "in": "query",
              "name": "pulp_last_updated__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_last_updated is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_last_updated__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedfile.FileRemoteResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List file remotes",
          "tags": [
            "Remotes: File"
          ]
        },
        "post": {
          "description": "\nFileRemote represents an external source of File\nContent.  The target url of a FileRemote must contain a file manifest, which contains the\nmetadata for all files at the source.",
          "operationId": "remotes_file_file_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FileRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a file remote",
          "tags": [
            "Remotes: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/file/file/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "remotes_file_file_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a file remote",
          "tags": [
            "Remotes: File"
          ]
        },
        "get": {
          "description": "\nFileRemote represents an external source of File\nContent.  The target url of a FileRemote must contain a file manifest, which contains the\nmetadata for all files at the source.",
          "operationId": "remotes_file_file_read",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FileRemoteResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a file remote",
          "tags": [
            "Remotes: File"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "remotes_file_file_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a file remote",
          "tags": [
            "Remotes: File"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "remotes_file_file_update",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRemote"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRemote"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRemote"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a file remote",
          "tags": [
            "Remotes: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/file/file/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "remotes_file_file_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Remotes: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/file/file/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "remotes_file_file_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Remotes: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/file/file/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "remotes_file_file_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Remotes: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/file/file/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "remotes_file_file_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Remotes: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/file/file/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "remotes_file_file_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Remotes: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/remotes/file/file/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "remotes_file_file_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this file remote.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Remotes: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repair/": {
        "post": {
          "description": "Trigger an asynchronous task that checks for missing or corrupted artifacts, and attempts to redownload them.",
          "operationId": "repair_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Repair Artifact Storage",
          "tags": [
            "Repair"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/": {
        "get": {
          "description": "Endpoint to list all repositories.",
          "operationId": "repositories_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "latest_with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-next_version",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-retain_repo_versions",
                    "-user_hidden",
                    "description",
                    "name",
                    "next_version",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "retain_repo_versions",
                    "user_hidden"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Pulp type\n\n* `file.file` - file.file\n* `container.container` - container.container\n* `container.container-push` - container.container-push\n* `ansible.ansible` - ansible.ansible",
              "in": "query",
              "name": "pulp_type",
              "schema": {
                "enum": [
                  "ansible.ansible",
                  "container.container",
                  "container.container-push",
                  "file.file"
                ],
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.\n\n* `file.file` - file.file\n* `container.container` - container.container\n* `container.container-push` - container.container-push\n* `ansible.ansible` - ansible.ansible",
              "explode": false,
              "in": "query",
              "name": "pulp_type__in",
              "schema": {
                "items": {
                  "enum": [
                    "ansible.ansible",
                    "container.container",
                    "container.container-push",
                    "file.file"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Foreign Key referenced by HREF",
              "in": "query",
              "name": "remote",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where retain_repo_versions matches value",
              "in": "query",
              "name": "retain_repo_versions",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than value",
              "in": "query",
              "name": "retain_repo_versions__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions has a null value",
              "in": "query",
              "name": "retain_repo_versions__isnull",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than value",
              "in": "query",
              "name": "retain_repo_versions__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions not equal to value",
              "in": "query",
              "name": "retain_repo_versions__ne",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "retain_repo_versions__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRepositoryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List repositories",
          "tags": [
            "Repositories"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/": {
        "get": {
          "description": "ViewSet for Ansible Repositories.",
          "operationId": "repositories_ansible_ansible_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "latest_with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-next_version",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-retain_repo_versions",
                    "-user_hidden",
                    "description",
                    "name",
                    "next_version",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "retain_repo_versions",
                    "user_hidden"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Foreign Key referenced by HREF",
              "in": "query",
              "name": "remote",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where retain_repo_versions matches value",
              "in": "query",
              "name": "retain_repo_versions",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than value",
              "in": "query",
              "name": "retain_repo_versions__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions has a null value",
              "in": "query",
              "name": "retain_repo_versions__isnull",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than value",
              "in": "query",
              "name": "retain_repo_versions__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions not equal to value",
              "in": "query",
              "name": "retain_repo_versions__ne",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "retain_repo_versions__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleRepositoryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List ansible repositorys",
          "tags": [
            "Repositories: Ansible"
          ]
        },
        "post": {
          "description": "ViewSet for Ansible Repositories.",
          "operationId": "repositories_ansible_ansible_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleRepositoryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an ansible repository",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "repositories_ansible_ansible_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete an ansible repository",
          "tags": [
            "Repositories: Ansible"
          ]
        },
        "get": {
          "description": "ViewSet for Ansible Repositories.",
          "operationId": "repositories_ansible_ansible_read",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleRepositoryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an ansible repository",
          "tags": [
            "Repositories: Ansible"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "repositories_ansible_ansible_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an ansible repository",
          "tags": [
            "Repositories: Ansible"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "repositories_ansible_ansible_update",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an ansible repository",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "repositories_ansible_ansible_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/copy_collection_version/": {
        "post": {
          "description": "Trigger an asynchronous task to copy collection versions.",
          "operationId": "repositories_ansible_ansible_copy_collection_version",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionCopyMove"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionCopyMove"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionCopyMove"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "repositories_ansible_ansible_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/mark/": {
        "post": {
          "description": "Trigger an asynchronous task to mark Ansible content.",
          "operationId": "repositories_ansible_ansible_mark",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryMark"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryMark"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryMark"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/modify/": {
        "post": {
          "description": "Trigger an asynchronous task to create a new repository version.",
          "operationId": "repositories_ansible_ansible_modify",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAddRemoveContent"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAddRemoveContent"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAddRemoveContent"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Modify Repository Content",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/move_collection_version/": {
        "post": {
          "description": "Trigger an asynchronous task to move collection versions.",
          "operationId": "repositories_ansible_ansible_move_collection_version",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionCopyMove"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionCopyMove"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionCopyMove"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "repositories_ansible_ansible_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/rebuild_metadata/": {
        "post": {
          "description": "Trigger an asynchronous task to rebuild Ansible content meta.",
          "operationId": "repositories_ansible_ansible_rebuild_metadata",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "repositories_ansible_ansible_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "repositories_ansible_ansible_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sign/": {
        "post": {
          "description": "Trigger an asynchronous task to sign Ansible content.",
          "operationId": "repositories_ansible_ansible_sign",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositorySignature"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositorySignature"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositorySignature"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/sync/": {
        "post": {
          "description": "Trigger an asynchronous task to sync Ansible content.",
          "operationId": "repositories_ansible_ansible_sync",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositorySyncURL"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositorySyncURL"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositorySyncURL"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/unmark/": {
        "post": {
          "description": "Trigger an asynchronous task to unmark Ansible content.",
          "operationId": "repositories_ansible_ansible_unmark",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryMark"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryMark"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryMark"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "repositories_ansible_ansible_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this ansible repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Repositories: Ansible"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/": {
        "get": {
          "description": "AnsibleRepositoryVersion represents a single file repository version.",
          "operationId": "repositories_ansible_ansible_versions_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content__in",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number matches value",
              "in": "query",
              "name": "number",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than value",
              "in": "query",
              "name": "number__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than or equal to value",
              "in": "query",
              "name": "number__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than value",
              "in": "query",
              "name": "number__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than or equal to value",
              "in": "query",
              "name": "number__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "number__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-complete",
                    "-info",
                    "-number",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "complete",
                    "info",
                    "number",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where pulp_created matches value",
              "in": "query",
              "name": "pulp_created",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than value",
              "in": "query",
              "name": "pulp_created__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than or equal to value",
              "in": "query",
              "name": "pulp_created__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than value",
              "in": "query",
              "name": "pulp_created__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than or equal to value",
              "in": "query",
              "name": "pulp_created__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_created__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List repository versions",
          "tags": [
            "Repositories: Ansible Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/": {
        "delete": {
          "description": "Trigger an asynchronous task to delete a repository version.",
          "operationId": "repositories_ansible_ansible_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a repository version",
          "tags": [
            "Repositories: Ansible Versions"
          ]
        },
        "get": {
          "description": "AnsibleRepositoryVersion represents a single file repository version.",
          "operationId": "repositories_ansible_ansible_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepositoryVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a repository version",
          "tags": [
            "Repositories: Ansible Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/rebuild_metadata/": {
        "post": {
          "description": "Trigger an asynchronous task to rebuild Ansible content meta.",
          "operationId": "repositories_ansible_ansible_versions_rebuild_metadata",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/AnsibleRepositoryRebuild"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/ansible/ansible/{repository_pk}/versions/{number}/repair/": {
        "post": {
          "description": "Trigger an asynchronous task to repair a repository version.",
          "operationId": "repositories_ansible_ansible_versions_repair",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Ansible Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/": {
        "get": {
          "description": "ViewSet for a container push repository.\n\nPOST and DELETE are disallowed because a push repository is tightly coupled with a\nContainerDistribution which handles it automatically.\nCreated - during push operation, removed - with ContainerDistribution removal.",
          "operationId": "repositories_container_container_push_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "latest_with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-next_version",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-retain_repo_versions",
                    "-user_hidden",
                    "description",
                    "name",
                    "next_version",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "retain_repo_versions",
                    "user_hidden"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Foreign Key referenced by HREF",
              "in": "query",
              "name": "remote",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where retain_repo_versions matches value",
              "in": "query",
              "name": "retain_repo_versions",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than value",
              "in": "query",
              "name": "retain_repo_versions__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions has a null value",
              "in": "query",
              "name": "retain_repo_versions__isnull",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than value",
              "in": "query",
              "name": "retain_repo_versions__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions not equal to value",
              "in": "query",
              "name": "retain_repo_versions__ne",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "retain_repo_versions__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ContainerPushRepositoryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List container push repositorys",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/": {
        "get": {
          "description": "ViewSet for a container push repository.\n\nPOST and DELETE are disallowed because a push repository is tightly coupled with a\nContainerDistribution which handles it automatically.\nCreated - during push operation, removed - with ContainerDistribution removal.",
          "operationId": "repositories_container_container_push_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerPushRepositoryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container push repository",
          "tags": [
            "Repositories: Container-Push"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "repositories_container_container_push_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPushRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPushRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerPushRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container push repository",
          "tags": [
            "Repositories: Container-Push"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "repositories_container_container_push_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPushRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPushRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerPushRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container push repository",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "repositories_container_container_push_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "repositories_container_container_push_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "repositories_container_container_push_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_image/": {
        "post": {
          "description": "Trigger an asynchronous task to remove a manifest and all its associated data by a digest",
          "operationId": "repositories_container_container_push_remove_image",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveImage"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveImage"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveImage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete an image from a repository",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "repositories_container_container_push_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/remove_signatures/": {
        "post": {
          "description": "Create a task which deletes signatures by the passed key_id.",
          "operationId": "repositories_container_container_push_remove_signatures",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveSignatures"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveSignatures"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveSignatures"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RemoveSignaturesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/sign/": {
        "post": {
          "description": "Trigger an asynchronous task to sign content.",
          "operationId": "repositories_container_container_push_sign",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySign"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySign"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySign"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Sign images in the repo",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/tag/": {
        "post": {
          "description": "Trigger an asynchronous task to tag an image in the repository",
          "operationId": "repositories_container_container_push_tag",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagImage"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/TagImage"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/TagImage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a Tag",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{pulp_id}/untag/": {
        "post": {
          "description": "Trigger an asynchronous task to untag an image in the repository",
          "operationId": "repositories_container_container_push_untag",
          "parameters": [
            {
              "description": "A UUID string identifying this container push repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnTagImage"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnTagImage"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnTagImage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a tag",
          "tags": [
            "Repositories: Container-Push"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/": {
        "get": {
          "description": "ContainerPushRepositoryVersion represents a single container push repository version.\n\nRepository versions of a push repository are not allowed to be deleted. Versioning of such\nrepositories, as well as creation/removal, happens automatically without explicit user actions.\nUsers could make a repository not functional by accident if allowed to delete repository\nversions.",
          "operationId": "repositories_container_container_push_versions_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content__in",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number matches value",
              "in": "query",
              "name": "number",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than value",
              "in": "query",
              "name": "number__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than or equal to value",
              "in": "query",
              "name": "number__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than value",
              "in": "query",
              "name": "number__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than or equal to value",
              "in": "query",
              "name": "number__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "number__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-complete",
                    "-info",
                    "-number",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "complete",
                    "info",
                    "number",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where pulp_created matches value",
              "in": "query",
              "name": "pulp_created",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than value",
              "in": "query",
              "name": "pulp_created__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than or equal to value",
              "in": "query",
              "name": "pulp_created__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than value",
              "in": "query",
              "name": "pulp_created__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than or equal to value",
              "in": "query",
              "name": "pulp_created__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_created__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List repository versions",
          "tags": [
            "Repositories: Container-Push Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/": {
        "delete": {
          "description": "Trigger an asynchronous task to delete a repository version.",
          "operationId": "repositories_container_container_push_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a repository version",
          "tags": [
            "Repositories: Container-Push Versions"
          ]
        },
        "get": {
          "description": "ContainerPushRepositoryVersion represents a single container push repository version.\n\nRepository versions of a push repository are not allowed to be deleted. Versioning of such\nrepositories, as well as creation/removal, happens automatically without explicit user actions.\nUsers could make a repository not functional by accident if allowed to delete repository\nversions.",
          "operationId": "repositories_container_container_push_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepositoryVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a repository version",
          "tags": [
            "Repositories: Container-Push Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container-push/{repository_pk}/versions/{number}/repair/": {
        "post": {
          "description": "Trigger an asynchronous task to repair a repository version.",
          "operationId": "repositories_container_container_push_versions_repair",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Container-Push Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/": {
        "get": {
          "description": "ViewSet for container repo.",
          "operationId": "repositories_container_container_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "latest_with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-next_version",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-retain_repo_versions",
                    "-user_hidden",
                    "description",
                    "name",
                    "next_version",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "retain_repo_versions",
                    "user_hidden"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Foreign Key referenced by HREF",
              "in": "query",
              "name": "remote",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where retain_repo_versions matches value",
              "in": "query",
              "name": "retain_repo_versions",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than value",
              "in": "query",
              "name": "retain_repo_versions__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions has a null value",
              "in": "query",
              "name": "retain_repo_versions__isnull",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than value",
              "in": "query",
              "name": "retain_repo_versions__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions not equal to value",
              "in": "query",
              "name": "retain_repo_versions__ne",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "retain_repo_versions__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedcontainer.ContainerRepositoryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List container repositorys",
          "tags": [
            "Repositories: Container"
          ]
        },
        "post": {
          "description": "ViewSet for container repo.",
          "operationId": "repositories_container_container_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerRepositoryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a container repository",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "repositories_container_container_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a container repository",
          "tags": [
            "Repositories: Container"
          ]
        },
        "get": {
          "description": "ViewSet for container repo.",
          "operationId": "repositories_container_container_read",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/container.ContainerRepositoryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a container repository",
          "tags": [
            "Repositories: Container"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "repositories_container_container_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedcontainer.ContainerRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container repository",
          "tags": [
            "Repositories: Container"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "repositories_container_container_update",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/container.ContainerRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a container repository",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add/": {
        "post": {
          "description": "Trigger an asynchronous task to recursively add container content.",
          "operationId": "repositories_container_container_add",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveManage"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveManage"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveManage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add content",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "repositories_container_container_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/build_image/": {
        "post": {
          "description": "Trigger an asynchronous task to build an OCI image from a Containerfile. A new repository version is created with the new image and tag. This API is in tech preview. Backwards compatibility when upgrading is not guaranteed.",
          "operationId": "repositories_container_container_build_image",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/OCIBuildImage"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/OCIBuildImage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Build an Image",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_manifests/": {
        "post": {
          "description": "Trigger an asynchronous task to copy manifests",
          "operationId": "repositories_container_container_copy_manifests",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManifestCopy"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ManifestCopy"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ManifestCopy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Copy manifests",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/copy_tags/": {
        "post": {
          "description": "Trigger an asynchronous task to copy tags",
          "operationId": "repositories_container_container_copy_tags",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCopy"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/TagCopy"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/TagCopy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Copy tags",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "repositories_container_container_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "repositories_container_container_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove/": {
        "post": {
          "description": "Trigger an async task to recursively remove container content.",
          "operationId": "repositories_container_container_remove",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveManage"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveManage"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RecursiveManage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove content",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "repositories_container_container_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "repositories_container_container_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sign/": {
        "post": {
          "description": "Trigger an asynchronous task to sign content.",
          "operationId": "repositories_container_container_sign",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySign"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySign"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySign"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Sign images in the repo",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/sync/": {
        "post": {
          "description": "Trigger an asynchronous task to sync content.",
          "operationId": "repositories_container_container_sync",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerRepositorySyncURL"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerRepositorySyncURL"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerRepositorySyncURL"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Sync from a remote",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/tag/": {
        "post": {
          "description": "Trigger an asynchronous task to tag an image in the repository",
          "operationId": "repositories_container_container_tag",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagImage"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/TagImage"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/TagImage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a Tag",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "repositories_container_container_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{pulp_id}/untag/": {
        "post": {
          "description": "Trigger an asynchronous task to untag an image in the repository",
          "operationId": "repositories_container_container_untag",
          "parameters": [
            {
              "description": "A UUID string identifying this container repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnTagImage"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnTagImage"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnTagImage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a tag",
          "tags": [
            "Repositories: Container"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/": {
        "get": {
          "description": "ContainerRepositoryVersion represents a single container repository version.",
          "operationId": "repositories_container_container_versions_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content__in",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number matches value",
              "in": "query",
              "name": "number",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than value",
              "in": "query",
              "name": "number__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than or equal to value",
              "in": "query",
              "name": "number__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than value",
              "in": "query",
              "name": "number__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than or equal to value",
              "in": "query",
              "name": "number__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "number__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-complete",
                    "-info",
                    "-number",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "complete",
                    "info",
                    "number",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where pulp_created matches value",
              "in": "query",
              "name": "pulp_created",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than value",
              "in": "query",
              "name": "pulp_created__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than or equal to value",
              "in": "query",
              "name": "pulp_created__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than value",
              "in": "query",
              "name": "pulp_created__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than or equal to value",
              "in": "query",
              "name": "pulp_created__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_created__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List repository versions",
          "tags": [
            "Repositories: Container Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/": {
        "delete": {
          "description": "Trigger an asynchronous task to delete a repository version.",
          "operationId": "repositories_container_container_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a repository version",
          "tags": [
            "Repositories: Container Versions"
          ]
        },
        "get": {
          "description": "ContainerRepositoryVersion represents a single container repository version.",
          "operationId": "repositories_container_container_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepositoryVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a repository version",
          "tags": [
            "Repositories: Container Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/container/container/{repository_pk}/versions/{number}/repair/": {
        "post": {
          "description": "Trigger an asynchronous task to repair a repository version.",
          "operationId": "repositories_container_container_versions_repair",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Container Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/": {
        "get": {
          "description": "\nFileRepository represents a single file repository, to which content can be synced, added,\nor removed.",
          "operationId": "repositories_file_file_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "latest_with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pulp_labels` - Pulp labels\n* `-pulp_labels` - Pulp labels (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `next_version` - Next version\n* `-next_version` - Next version (descending)\n* `retain_repo_versions` - Retain repo versions\n* `-retain_repo_versions` - Retain repo versions (descending)\n* `user_hidden` - User hidden\n* `-user_hidden` - User hidden (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-name",
                    "-next_version",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_labels",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-retain_repo_versions",
                    "-user_hidden",
                    "description",
                    "name",
                    "next_version",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_labels",
                    "pulp_last_updated",
                    "pulp_type",
                    "retain_repo_versions",
                    "user_hidden"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "pulp_label_select",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Foreign Key referenced by HREF",
              "in": "query",
              "name": "remote",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where retain_repo_versions matches value",
              "in": "query",
              "name": "retain_repo_versions",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than value",
              "in": "query",
              "name": "retain_repo_versions__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is greater than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions has a null value",
              "in": "query",
              "name": "retain_repo_versions__isnull",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than value",
              "in": "query",
              "name": "retain_repo_versions__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is less than or equal to value",
              "in": "query",
              "name": "retain_repo_versions__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions not equal to value",
              "in": "query",
              "name": "retain_repo_versions__ne",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where retain_repo_versions is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "retain_repo_versions__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "with_content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedfile.FileRepositoryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List file repositorys",
          "tags": [
            "Repositories: File"
          ]
        },
        "post": {
          "description": "\nFileRepository represents a single file repository, to which content can be synced, added,\nor removed.",
          "operationId": "repositories_file_file_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FileRepositoryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a file repository",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "repositories_file_file_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a file repository",
          "tags": [
            "Repositories: File"
          ]
        },
        "get": {
          "description": "\nFileRepository represents a single file repository, to which content can be synced, added,\nor removed.",
          "operationId": "repositories_file_file_read",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/file.FileRepositoryResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a file repository",
          "tags": [
            "Repositories: File"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous partial update task",
          "operationId": "repositories_file_file_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedfile.FileRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a file repository",
          "tags": [
            "Repositories: File"
          ]
        },
        "put": {
          "description": "Trigger an asynchronous update task",
          "operationId": "repositories_file_file_update",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRepository"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRepository"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/file.FileRepository"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a file repository",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "repositories_file_file_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "repositories_file_file_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/modify/": {
        "post": {
          "description": "Trigger an asynchronous task to create a new repository version.",
          "operationId": "repositories_file_file_modify",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAddRemoveContent"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAddRemoveContent"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAddRemoveContent"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Modify Repository Content",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "repositories_file_file_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "repositories_file_file_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/set_label/": {
        "post": {
          "description": "Set a single pulp_label on the object to a specific value or null.",
          "operationId": "repositories_file_file_set_label",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/SetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Set a label",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/sync/": {
        "post": {
          "description": "Trigger an asynchronous task to sync file content.",
          "operationId": "repositories_file_file_sync",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySyncURL"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySyncURL"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/RepositorySyncURL"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Sync from a remote",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{pulp_id}/unset_label/": {
        "post": {
          "description": "Unset a single pulp_label on the object.",
          "operationId": "repositories_file_file_unset_label",
          "parameters": [
            {
              "description": "A UUID string identifying this file repository.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UnsetLabel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnsetLabelResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Unset a label",
          "tags": [
            "Repositories: File"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{repository_pk}/versions/": {
        "get": {
          "description": "\nFileRepositoryVersion represents a single file repository version.",
          "operationId": "repositories_file_file_versions_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content__in",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number matches value",
              "in": "query",
              "name": "number",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than value",
              "in": "query",
              "name": "number__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than or equal to value",
              "in": "query",
              "name": "number__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than value",
              "in": "query",
              "name": "number__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than or equal to value",
              "in": "query",
              "name": "number__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "number__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-complete",
                    "-info",
                    "-number",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "complete",
                    "info",
                    "number",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where pulp_created matches value",
              "in": "query",
              "name": "pulp_created",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than value",
              "in": "query",
              "name": "pulp_created__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than or equal to value",
              "in": "query",
              "name": "pulp_created__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than value",
              "in": "query",
              "name": "pulp_created__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than or equal to value",
              "in": "query",
              "name": "pulp_created__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_created__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List repository versions",
          "tags": [
            "Repositories: File Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{repository_pk}/versions/{number}/": {
        "delete": {
          "description": "Trigger an asynchronous task to delete a repository version.",
          "operationId": "repositories_file_file_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Delete a repository version",
          "tags": [
            "Repositories: File Versions"
          ]
        },
        "get": {
          "description": "\nFileRepositoryVersion represents a single file repository version.",
          "operationId": "repositories_file_file_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepositoryVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a repository version",
          "tags": [
            "Repositories: File Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/file/file/{repository_pk}/versions/{number}/repair/": {
        "post": {
          "description": "Trigger an asynchronous task to repair a repository version.",
          "operationId": "repositories_file_file_versions_repair",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "repository_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Repair"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: File Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repositories/reclaim_space/": {
        "post": {
          "description": "Trigger an asynchronous space reclaim operation.",
          "operationId": "repositories_reclaim_space_reclaim",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReclaimSpace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ReclaimSpace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ReclaimSpace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Repositories: Reclaim_Space"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/repository_versions/": {
        "get": {
          "description": "A mixin to hold the shared get_queryset logic used by RepositoryVersionViewSets.",
          "operationId": "repository_versions_list",
          "parameters": [
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Content Unit referenced by HREF",
              "in": "query",
              "name": "content__in",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number matches value",
              "in": "query",
              "name": "number",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than value",
              "in": "query",
              "name": "number__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is greater than or equal to value",
              "in": "query",
              "name": "number__gte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than value",
              "in": "query",
              "name": "number__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is less than or equal to value",
              "in": "query",
              "name": "number__lte",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where number is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "number__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `number` - Number\n* `-number` - Number (descending)\n* `complete` - Complete\n* `-complete` - Complete (descending)\n* `info` - Info\n* `-info` - Info (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-complete",
                    "-info",
                    "-number",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "complete",
                    "info",
                    "number",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where pulp_created matches value",
              "in": "query",
              "name": "pulp_created",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than value",
              "in": "query",
              "name": "pulp_created__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is greater than or equal to value",
              "in": "query",
              "name": "pulp_created__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than value",
              "in": "query",
              "name": "pulp_created__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is less than or equal to value",
              "in": "query",
              "name": "pulp_created__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where pulp_created is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "pulp_created__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRepositoryVersionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List repository versions",
          "tags": [
            "Repository_Versions"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/roles/": {
        "get": {
          "description": "ViewSet for Role.",
          "operationId": "roles_list",
          "parameters": [
            {
              "description": "Filter roles that have any of the permissions in the list.",
              "explode": true,
              "in": "query",
              "name": "contains_permission",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where description matches value",
              "in": "query",
              "name": "description",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where description contains value",
              "in": "query",
              "name": "description__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where description contains value",
              "in": "query",
              "name": "description__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where description matches value",
              "in": "query",
              "name": "description__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter roles that only have permissions for the specified object HREF.",
              "in": "query",
              "name": "for_object_type",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where locked matches value",
              "in": "query",
              "name": "locked",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `locked` - Locked\n* `-locked` - Locked (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-locked",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "description",
                    "locked",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedRoleResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Roles"
          ]
        },
        "post": {
          "description": "ViewSet for Role.",
          "operationId": "roles_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a role",
          "tags": [
            "Roles"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/roles/{pulp_id}/": {
        "delete": {
          "description": "ViewSet for Role.",
          "operationId": "roles_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a role",
          "tags": [
            "Roles"
          ]
        },
        "get": {
          "description": "ViewSet for Role.",
          "operationId": "roles_read",
          "parameters": [
            {
              "description": "A UUID string identifying this role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a role",
          "tags": [
            "Roles"
          ]
        },
        "patch": {
          "description": "ViewSet for Role.",
          "operationId": "roles_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a role",
          "tags": [
            "Roles"
          ]
        },
        "put": {
          "description": "ViewSet for Role.",
          "operationId": "roles_update",
          "parameters": [
            {
              "description": "A UUID string identifying this role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a role",
          "tags": [
            "Roles"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/signing-services/": {
        "get": {
          "description": "A ViewSet that supports browsing of existing signing services.",
          "operationId": "signing_services_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `public_key` - Public key\n* `-public_key` - Public key (descending)\n* `pubkey_fingerprint` - Pubkey fingerprint\n* `-pubkey_fingerprint` - Pubkey fingerprint (descending)\n* `script` - Script\n* `-script` - Script (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-pk",
                    "-pubkey_fingerprint",
                    "-public_key",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-script",
                    "name",
                    "pk",
                    "pubkey_fingerprint",
                    "public_key",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "script"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedSigningServiceResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List signing services",
          "tags": [
            "Signing-Services"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/signing-services/{pulp_id}/": {
        "get": {
          "description": "A ViewSet that supports browsing of existing signing services.",
          "operationId": "signing_services_read",
          "parameters": [
            {
              "description": "A UUID string identifying this signing service.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SigningServiceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a signing service",
          "tags": [
            "Signing-Services"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/status/": {
        "get": {
          "description": "Returns status and app information about Pulp.\n\nInformation includes:\n * version of pulpcore and loaded pulp plugins\n * known workers\n * known content apps\n * database connection status\n * redis connection status\n * disk usage information",
          "operationId": "status_read",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StatusResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect status of Pulp",
          "tags": [
            "Status"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/task-groups/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "task_groups_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedTaskGroupResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List task groups",
          "tags": [
            "Task-Groups"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/task-groups/{pulp_id}/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "task_groups_read",
          "parameters": [
            {
              "description": "A UUID string identifying this task group.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskGroupResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a task group",
          "tags": [
            "Task-Groups"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/task-schedules/": {
        "get": {
          "description": "ViewSet to monitor task schedules.",
          "operationId": "task_schedules_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `next_dispatch` - Next dispatch\n* `-next_dispatch` - Next dispatch (descending)\n* `dispatch_interval` - Dispatch interval\n* `-dispatch_interval` - Dispatch interval (descending)\n* `task_name` - Task name\n* `-task_name` - Task name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-dispatch_interval",
                    "-name",
                    "-next_dispatch",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-task_name",
                    "dispatch_interval",
                    "name",
                    "next_dispatch",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "task_name"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where task_name matches value",
              "in": "query",
              "name": "task_name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where task_name contains value",
              "in": "query",
              "name": "task_name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedTaskScheduleResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List task schedules",
          "tags": [
            "Task-Schedules"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/": {
        "get": {
          "description": "ViewSet to monitor task schedules.",
          "operationId": "task_schedules_read",
          "parameters": [
            {
              "description": "A UUID string identifying this task schedule.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskScheduleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a task schedule",
          "tags": [
            "Task-Schedules"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "task_schedules_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this task schedule.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Task-Schedules"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "task_schedules_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this task schedule.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Task-Schedules"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "task_schedules_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this task schedule.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Task-Schedules"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/task-schedules/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "task_schedules_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this task schedule.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Task-Schedules"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/tasks/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "_api_automation-hub_pulp_api_v3_tasks_tasks_list",
          "parameters": [
            {
              "description": "Filter results where child_tasks matches value",
              "in": "query",
              "name": "child_tasks",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "created_resources",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "exclusive_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "exclusive_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where finished_at matches value",
              "in": "query",
              "name": "finished_at",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is greater than value",
              "in": "query",
              "name": "finished_at__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is greater than or equal to value",
              "in": "query",
              "name": "finished_at__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is less than value",
              "in": "query",
              "name": "finished_at__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is less than or equal to value",
              "in": "query",
              "name": "finished_at__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "finished_at__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where logging_cid matches value",
              "in": "query",
              "name": "logging_cid",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where logging_cid contains value",
              "in": "query",
              "name": "logging_cid__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name not equal to value",
              "in": "query",
              "name": "name__ne",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `state` - State\n* `-state` - State (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `logging_cid` - Logging cid\n* `-logging_cid` - Logging cid (descending)\n* `unblocked_at` - Unblocked at\n* `-unblocked_at` - Unblocked at (descending)\n* `started_at` - Started at\n* `-started_at` - Started at (descending)\n* `finished_at` - Finished at\n* `-finished_at` - Finished at (descending)\n* `error` - Error\n* `-error` - Error (descending)\n* `enc_args` - Enc args\n* `-enc_args` - Enc args (descending)\n* `enc_kwargs` - Enc kwargs\n* `-enc_kwargs` - Enc kwargs (descending)\n* `reserved_resources_record` - Reserved resources record\n* `-reserved_resources_record` - Reserved resources record (descending)\n* `versions` - Versions\n* `-versions` - Versions (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-enc_args",
                    "-enc_kwargs",
                    "-error",
                    "-finished_at",
                    "-logging_cid",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-reserved_resources_record",
                    "-started_at",
                    "-state",
                    "-unblocked_at",
                    "-versions",
                    "enc_args",
                    "enc_kwargs",
                    "error",
                    "finished_at",
                    "logging_cid",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "reserved_resources_record",
                    "started_at",
                    "state",
                    "unblocked_at",
                    "versions"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where parent_task matches value",
              "in": "query",
              "name": "parent_task",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "reserved_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "reserved_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "reserved_resources_record",
              "schema": {
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            {
              "in": "query",
              "name": "shared_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "shared_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where started_at matches value",
              "in": "query",
              "name": "started_at",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is greater than value",
              "in": "query",
              "name": "started_at__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is greater than or equal to value",
              "in": "query",
              "name": "started_at__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is less than value",
              "in": "query",
              "name": "started_at__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is less than or equal to value",
              "in": "query",
              "name": "started_at__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "started_at__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where state matches value\n\n* `waiting` - Waiting\n* `skipped` - Skipped\n* `running` - Running\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled\n* `canceling` - Canceling",
              "in": "query",
              "name": "state",
              "schema": {
                "enum": [
                  "canceled",
                  "canceling",
                  "completed",
                  "failed",
                  "running",
                  "skipped",
                  "waiting"
                ],
                "type": "string"
              }
            },
            {
              "description": "Filter results where state is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "state__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where state not equal to value",
              "in": "query",
              "name": "state__ne",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where task_group matches value",
              "in": "query",
              "name": "task_group",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where worker matches value",
              "in": "query",
              "name": "worker",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where worker is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "worker__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where worker has a null value",
              "in": "query",
              "name": "worker__isnull",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedTaskResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List tasks",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/tasks/purge/": {
        "post": {
          "description": "Trigger an asynchronous task that deletes completed tasks that finished prior to a specified timestamp.",
          "operationId": "tasks_purge",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Purge"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Purge"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Purge"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Purge Completed Tasks",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/": {
        "delete": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "tasks_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a task",
          "tags": [
            "Tasks"
          ]
        },
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "_api_automation-hub_pulp_api_v3_tasks_{pulp_id}_tasks_read",
          "parameters": [
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a task",
          "tags": [
            "Tasks"
          ]
        },
        "patch": {
          "description": "This operation cancels a task.",
          "operationId": "tasks_cancel",
          "parameters": [
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedTaskCancel"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedTaskCancel"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedTaskCancel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              },
              "description": ""
            },
            "409": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Cancel a task",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "tasks_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "tasks_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "tasks_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/tasks/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "tasks_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/uploads/": {
        "get": {
          "description": "View for chunked uploads.",
          "operationId": "uploads_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `size` - Size\n* `-size` - Size (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-size",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "size"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where size matches value",
              "in": "query",
              "name": "size",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where size is greater than value",
              "in": "query",
              "name": "size__gt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where size is less than value",
              "in": "query",
              "name": "size__lt",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where size is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "size__range",
              "schema": {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedUploadResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List uploads",
          "tags": [
            "Uploads"
          ]
        },
        "post": {
          "description": "View for chunked uploads.",
          "operationId": "uploads_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UploadResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an upload",
          "tags": [
            "Uploads"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/": {
        "delete": {
          "description": "View for chunked uploads.",
          "operationId": "uploads_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this upload.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete an upload",
          "tags": [
            "Uploads"
          ]
        },
        "get": {
          "description": "View for chunked uploads.",
          "operationId": "uploads_read",
          "parameters": [
            {
              "description": "A UUID string identifying this upload.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UploadDetailResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an upload",
          "tags": [
            "Uploads"
          ]
        },
        "put": {
          "description": "Upload a chunk for an upload.",
          "operationId": "uploads_update",
          "parameters": [
            {
              "description": "The Content-Range header specifies the location of the file chunk within the file.",
              "in": "header",
              "name": "Content-Range",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A UUID string identifying this upload.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UploadChunk"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UploadChunk"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UploadResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a file chunk",
          "tags": [
            "Uploads"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "uploads_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this upload.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Uploads"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/commit/": {
        "post": {
          "description": "Queues a Task that creates an Artifact, and the Upload gets deleted and cannot be re-used.",
          "operationId": "uploads_commit",
          "parameters": [
            {
              "description": "A UUID string identifying this upload.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadCommit"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UploadCommit"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UploadCommit"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Finish an Upload",
          "tags": [
            "Uploads"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "uploads_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this upload.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Uploads"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "uploads_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this upload.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Uploads"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/uploads/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "uploads_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this upload.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Uploads"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/upstream-pulps/": {
        "get": {
          "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
          "operationId": "upstream_pulps_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedUpstreamPulpResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List upstream pulps",
          "tags": [
            "Upstream-Pulps"
          ]
        },
        "post": {
          "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
          "operationId": "upstream_pulps_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulp"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulp"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulp"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpstreamPulpResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an upstream pulp",
          "tags": [
            "Upstream-Pulps"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/upstream-pulps/{pulp_id}/": {
        "delete": {
          "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
          "operationId": "upstream_pulps_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete an upstream pulp",
          "tags": [
            "Upstream-Pulps"
          ]
        },
        "get": {
          "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
          "operationId": "upstream_pulps_read",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpstreamPulpResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an upstream pulp",
          "tags": [
            "Upstream-Pulps"
          ]
        },
        "patch": {
          "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
          "operationId": "upstream_pulps_partial_update",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUpstreamPulp"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUpstreamPulp"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUpstreamPulp"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpstreamPulpResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an upstream pulp",
          "tags": [
            "Upstream-Pulps"
          ]
        },
        "put": {
          "description": "API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.",
          "operationId": "upstream_pulps_update",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulp"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulp"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UpstreamPulp"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpstreamPulpResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an upstream pulp",
          "tags": [
            "Upstream-Pulps"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/upstream-pulps/{pulp_id}/add_role/": {
        "post": {
          "description": "Add a role for this object to users/groups.",
          "operationId": "upstream_pulps_add_role",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Add a role",
          "tags": [
            "Upstream-Pulps"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/upstream-pulps/{pulp_id}/list_roles/": {
        "get": {
          "description": "List roles assigned to this object.",
          "operationId": "upstream_pulps_list_roles",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ObjectRolesResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List roles",
          "tags": [
            "Upstream-Pulps"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/upstream-pulps/{pulp_id}/my_permissions/": {
        "get": {
          "description": "List permissions available to the current user on this object.",
          "operationId": "upstream_pulps_my_permissions",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MyPermissionsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user permissions",
          "tags": [
            "Upstream-Pulps"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/upstream-pulps/{pulp_id}/remove_role/": {
        "post": {
          "description": "Remove a role for this object from users/groups.",
          "operationId": "upstream_pulps_remove_role",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/NestedRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NestedRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Remove a role",
          "tags": [
            "Upstream-Pulps"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/upstream-pulps/{pulp_id}/replicate/": {
        "post": {
          "description": "Trigger an asynchronous repository replication task group. This API is provided as a tech preview.",
          "operationId": "upstream_pulps_replicate",
          "parameters": [
            {
              "description": "A UUID string identifying this upstream pulp.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskGroupOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Replicate",
          "tags": [
            "Upstream-Pulps"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/users/": {
        "get": {
          "description": "ViewSet for User.",
          "operationId": "users_list",
          "parameters": [
            {
              "description": "Filter results where email matches value",
              "in": "query",
              "name": "email",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where email contains value",
              "in": "query",
              "name": "email__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where email contains value",
              "in": "query",
              "name": "email__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where email matches value",
              "in": "query",
              "name": "email__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where email is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "email__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where first_name matches value",
              "in": "query",
              "name": "first_name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where first_name contains value",
              "in": "query",
              "name": "first_name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where first_name contains value",
              "in": "query",
              "name": "first_name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where first_name matches value",
              "in": "query",
              "name": "first_name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where first_name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "first_name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where is_active matches value",
              "in": "query",
              "name": "is_active",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where is_staff matches value",
              "in": "query",
              "name": "is_staff",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where last_name matches value",
              "in": "query",
              "name": "last_name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_name contains value",
              "in": "query",
              "name": "last_name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_name contains value",
              "in": "query",
              "name": "last_name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_name matches value",
              "in": "query",
              "name": "last_name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "last_name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `id` - Id\n* `-id` - Id (descending)\n* `password` - Password\n* `-password` - Password (descending)\n* `last_login` - Last login\n* `-last_login` - Last login (descending)\n* `is_superuser` - Is superuser\n* `-is_superuser` - Is superuser (descending)\n* `username` - Username\n* `-username` - Username (descending)\n* `first_name` - First name\n* `-first_name` - First name (descending)\n* `last_name` - Last name\n* `-last_name` - Last name (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `is_staff` - Is staff\n* `-is_staff` - Is staff (descending)\n* `is_active` - Is active\n* `-is_active` - Is active (descending)\n* `date_joined` - Date joined\n* `-date_joined` - Date joined (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-date_joined",
                    "-email",
                    "-first_name",
                    "-id",
                    "-is_active",
                    "-is_staff",
                    "-is_superuser",
                    "-last_login",
                    "-last_name",
                    "-password",
                    "-pk",
                    "-username",
                    "date_joined",
                    "email",
                    "first_name",
                    "id",
                    "is_active",
                    "is_staff",
                    "is_superuser",
                    "last_login",
                    "last_name",
                    "password",
                    "pk",
                    "username"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where username matches value",
              "in": "query",
              "name": "username",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where username contains value",
              "in": "query",
              "name": "username__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where username contains value",
              "in": "query",
              "name": "username__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where username matches value",
              "in": "query",
              "name": "username__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where username is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "username__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedUserResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List users",
          "tags": [
            "Users"
          ]
        },
        "post": {
          "description": "ViewSet for User.",
          "operationId": "users_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an user",
          "tags": [
            "Users"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/users/{id}/": {
        "delete": {
          "description": "ViewSet for User.",
          "operationId": "users_delete",
          "parameters": [
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete an user",
          "tags": [
            "Users"
          ]
        },
        "get": {
          "description": "ViewSet for User.",
          "operationId": "users_read",
          "parameters": [
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an user",
          "tags": [
            "Users"
          ]
        },
        "patch": {
          "description": "ViewSet for User.",
          "operationId": "users_partial_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUser"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUser"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedUser"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an user",
          "tags": [
            "Users"
          ]
        },
        "put": {
          "description": "ViewSet for User.",
          "operationId": "users_update",
          "parameters": [
            {
              "description": "A unique integer value identifying this user.",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update an user",
          "tags": [
            "Users"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/": {
        "get": {
          "description": "ViewSet for UserRole.",
          "operationId": "users_roles_list",
          "parameters": [
            {
              "description": "content_object",
              "in": "query",
              "name": "content_object",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Foreign Key referenced by HREF",
              "in": "query",
              "name": "domain",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `role` - Role\n* `-role` - Role (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-description",
                    "-pk",
                    "-pulp_created",
                    "-role",
                    "description",
                    "pk",
                    "pulp_created",
                    "role"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "role",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "role__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "role__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "role__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "role__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "user_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedUserRoleResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List user roles",
          "tags": [
            "Users: Roles"
          ]
        },
        "post": {
          "description": "ViewSet for UserRole.",
          "operationId": "users_roles_create",
          "parameters": [
            {
              "in": "path",
              "name": "user_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRole"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/UserRole"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UserRole"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create an user role",
          "tags": [
            "Users: Roles"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/users/{user_pk}/roles/{pulp_id}/": {
        "delete": {
          "description": "ViewSet for UserRole.",
          "operationId": "users_roles_delete",
          "parameters": [
            {
              "description": "A UUID string identifying this user role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "user_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete an user role",
          "tags": [
            "Users: Roles"
          ]
        },
        "get": {
          "description": "ViewSet for UserRole.",
          "operationId": "users_roles_read",
          "parameters": [
            {
              "description": "A UUID string identifying this user role.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "user_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserRoleResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect an user role",
          "tags": [
            "Users: Roles"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/workers/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "workers_list",
          "parameters": [
            {
              "description": "Filter results where last_heartbeat matches value",
              "in": "query",
              "name": "last_heartbeat",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_heartbeat is greater than value",
              "in": "query",
              "name": "last_heartbeat__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_heartbeat is greater than or equal to value",
              "in": "query",
              "name": "last_heartbeat__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_heartbeat is less than value",
              "in": "query",
              "name": "last_heartbeat__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_heartbeat is less than or equal to value",
              "in": "query",
              "name": "last_heartbeat__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where last_heartbeat is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "last_heartbeat__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "missing",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "online",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `last_heartbeat` - Last heartbeat\n* `-last_heartbeat` - Last heartbeat (descending)\n* `versions` - Versions\n* `-versions` - Versions (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-last_heartbeat",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-versions",
                    "last_heartbeat",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "versions"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedWorkerResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List workers",
          "tags": [
            "Workers"
          ]
        }
      },
      "/api/automation-hub/pulp/api/v3/workers/{pulp_id}/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "workers_read",
          "parameters": [
            {
              "description": "A UUID string identifying this worker.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkerResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a worker",
          "tags": [
            "Workers"
          ]
        }
      },
      "/api/automation-hub/service-index/": {
        "get": {
          "description": "Link other resource registry endpoints",
          "operationId": "api_automation_hub_service_index_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Service-Index"
          ]
        }
      },
      "/api/automation-hub/service-index/metadata/": {
        "get": {
          "operationId": "api_automation_hub_service_index_metadata_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Service-Index Metadata"
          ]
        }
      },
      "/api/automation-hub/service-index/resource-types/": {
        "get": {
          "description": "Index of the resource types that are configured in the system.",
          "operationId": "api_automation_hub_service_index_resource_types_list",
          "parameters": [
            {
              "description": "A page number within the paginated result set.",
              "in": "query",
              "name": "page",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedResourceTypeResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List resource types",
          "tags": [
            "Api: Service-Index Resource-Types"
          ]
        }
      },
      "/api/automation-hub/service-index/resource-types/{name}/": {
        "get": {
          "description": "Index of the resource types that are configured in the system.",
          "operationId": "api_automation_hub_service_index_resource_types_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "pattern": "^[^/]+$",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceTypeResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a resource type",
          "tags": [
            "Api: Service-Index Resource-Types"
          ]
        }
      },
      "/api/automation-hub/service-index/resource-types/{name}/manifest/": {
        "get": {
          "description": "Returns the as a stream the csv of resource_id,hash for a given resource type.",
          "operationId": "api_automation_hub_service_index_resource_types_manifest_manifest",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "pattern": "^[^/]+$",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceTypeResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Service-Index Resource-Types Manifest"
          ]
        }
      },
      "/api/automation-hub/service-index/resources/": {
        "get": {
          "description": "Index of all the resources in the system.",
          "operationId": "api_automation_hub_service_index_resources_list",
          "parameters": [
            {
              "description": "A page number within the paginated result set.",
              "in": "query",
              "name": "page",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedResourceListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List resources",
          "tags": [
            "Api: Service-Index Resources"
          ]
        },
        "post": {
          "description": "Index of all the resources in the system.",
          "operationId": "api_automation_hub_service_index_resources_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a resource",
          "tags": [
            "Api: Service-Index Resources"
          ]
        }
      },
      "/api/automation-hub/service-index/resources/{ansible_id}/": {
        "delete": {
          "description": "Index of all the resources in the system.",
          "operationId": "api_automation_hub_service_index_resources_delete",
          "parameters": [
            {
              "in": "path",
              "name": "ansible_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a resource",
          "tags": [
            "Api: Service-Index Resources"
          ]
        },
        "get": {
          "description": "Index of all the resources in the system.",
          "operationId": "api_automation_hub_service_index_resources_read",
          "parameters": [
            {
              "in": "path",
              "name": "ansible_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a resource",
          "tags": [
            "Api: Service-Index Resources"
          ]
        },
        "patch": {
          "description": "Index of all the resources in the system.",
          "operationId": "api_automation_hub_service_index_resources_partial_update",
          "parameters": [
            {
              "in": "path",
              "name": "ansible_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedResource"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedResource"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedResource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a resource",
          "tags": [
            "Api: Service-Index Resources"
          ]
        },
        "put": {
          "description": "Index of all the resources in the system.",
          "operationId": "api_automation_hub_service_index_resources_update",
          "parameters": [
            {
              "in": "path",
              "name": "ansible_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a resource",
          "tags": [
            "Api: Service-Index Resources"
          ]
        }
      },
      "/api/automation-hub/service-index/resources/{ansible_id}/additional_data/": {
        "get": {
          "description": "Index of all the resources in the system.",
          "operationId": "api_automation_hub_service_index_resources_additional_data_additional_data",
          "parameters": [
            {
              "in": "path",
              "name": "ansible_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: Service-Index Resources Additional_Data"
          ]
        }
      },
      "/api/automation-hub/service-index/validate-local-account/": {
        "post": {
          "description": "Validate a user's username and password.",
          "operationId": "api_automation_hub_service_index_validate_local_account_post",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: Service-Index Validate-Local-Account"
          ]
        }
      },
      "/api/automation-hub/v3/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_read",
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepoMetadataResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3"
          ]
        }
      },
      "/api/automation-hub/v3/artifacts/collections/": {
        "post": {
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "api_automation_hub_v3_artifacts_collections_create",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Pulp_Ansible: Artifacts Collections V3"
          ]
        }
      },
      "/api/automation-hub/v3/artifacts/collections/{path}/{filename}": {
        "get": {
          "description": "Download collection.",
          "operationId": "api_automation_hub_v3_artifacts_collections_get",
          "parameters": [
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Artifacts Collections"
          ]
        }
      },
      "/api/automation-hub/v3/auth/token/": {
        "delete": {
          "description": "Invalidate user token.",
          "operationId": "api_automation_hub_v3_auth_token_delete",
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Auth Token"
          ]
        },
        "post": {
          "description": "Create or refresh user token.",
          "operationId": "api_automation_hub_v3_auth_token_post",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Auth Token"
          ]
        }
      },
      "/api/automation-hub/v3/collection_versions/all/": {
        "get": {
          "operationId": "api_automation_hub_v3_collection_versions_all_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collection_Versions All"
          ]
        }
      },
      "/api/automation-hub/v3/collections/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections"
          ]
        }
      },
      "/api/automation-hub/v3/collections/all/": {
        "get": {
          "operationId": "api_automation_hub_v3_collections_all_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections All"
          ]
        }
      },
      "/api/automation-hub/v3/collections/{namespace}/{name}/": {
        "delete": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_collections_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections"
          ]
        },
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections"
          ]
        },
        "patch": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_collections_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections"
          ]
        }
      },
      "/api/automation-hub/v3/collections/{namespace}/{name}/versions/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_collections_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections Versions"
          ]
        }
      },
      "/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/": {
        "delete": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_collections_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections Versions"
          ]
        },
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_collections_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections Versions"
          ]
        }
      },
      "/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/copy/{source_path}/{dest_path}/": {
        "post": {
          "description": "Copy collection version from one  repository to another.",
          "operationId": "api_automation_hub_v3_collections_versions_copy_copy_content",
          "parameters": [
            {
              "in": "path",
              "name": "dest_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "source_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections Versions Copy"
          ]
        }
      },
      "/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_collections_versions_docs_blob_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections Versions Docs-Blob"
          ]
        }
      },
      "/api/automation-hub/v3/collections/{namespace}/{name}/versions/{version}/move/{source_path}/{dest_path}/": {
        "post": {
          "description": "Remove content from source repo and add to destination repo.\n\nCreates new RepositoryVersion of source repo without content included.\nCreates new RepositoryVersion of destination repo with content included.",
          "operationId": "api_automation_hub_v3_collections_versions_move_move_content",
          "parameters": [
            {
              "in": "path",
              "name": "dest_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "source_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Collections Versions Move"
          ]
        }
      },
      "/api/automation-hub/v3/excludes/": {
        "get": {
          "operationId": "api_automation_hub_v3_excludes_read",
          "parameters": [
            {
              "in": "query",
              "name": "format",
              "schema": {
                "enum": [
                  "json",
                  "yaml"
                ],
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Excludes"
          ]
        }
      },
      "/api/automation-hub/v3/imports/collections/{task}/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "api_automation_hub_v3_imports_collections_read",
          "parameters": [
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Api: V3 Imports Collections"
          ]
        }
      },
      "/api/automation-hub/v3/namespaces/": {
        "get": {
          "operationId": "api_automation_hub_v3_namespaces_list",
          "parameters": [
            {
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `id` - Id\n* `-id` - Id (descending)",
              "explode": false,
              "in": "query",
              "name": "sort",
              "schema": {
                "items": {
                  "enum": [
                    "-company",
                    "-id",
                    "-name",
                    "company",
                    "id",
                    "name"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedNamespaceSummaryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List namespaces",
          "tags": [
            "Api: V3 Namespaces"
          ]
        },
        "post": {
          "description": "Override to validate for name duplication before serializer validation.",
          "operationId": "api_automation_hub_v3_namespaces_create",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Create a namespace",
          "tags": [
            "Api: V3 Namespaces"
          ]
        }
      },
      "/api/automation-hub/v3/namespaces/{name}/": {
        "delete": {
          "description": "Delete a namespace.\n\n1. Perform a check to see if there are any collections in the namespace.\n   If there are, return a failure.\n2. Delete the pulp distro and repository\n3. Delete the namespace object.\n\nreturn: Response(status=204)",
          "operationId": "api_automation_hub_v3_namespaces_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No response body"
            }
          },
          "summary": "Delete a namespace",
          "tags": [
            "Api: V3 Namespaces"
          ]
        },
        "get": {
          "operationId": "api_automation_hub_v3_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a namespace",
          "tags": [
            "Api: V3 Namespaces"
          ]
        },
        "patch": {
          "operationId": "api_automation_hub_v3_namespaces_partial_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedNamespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a namespace",
          "tags": [
            "Api: V3 Namespaces"
          ]
        },
        "put": {
          "operationId": "api_automation_hub_v3_namespaces_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NamespaceResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Update a namespace",
          "tags": [
            "Api: V3 Namespaces"
          ]
        }
      },
      "/api/automation-hub/v3/openapi.json": {
        "get": {
          "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
          "operationId": "api_automation_hub_v3_openapi.json_get",
          "parameters": [
            {
              "in": "query",
              "name": "lang",
              "schema": {
                "enum": [
                  "en-us",
                  "es",
                  "fr",
                  "ja",
                  "ko",
                  "nl",
                  "zh-hans"
                ],
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                },
                "application/vnd.oai.openapi+json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": ""
            }
          },
          "security": [
            {}
          ],
          "tags": [
            "Api: V3 Openapi.Json"
          ]
        }
      },
      "/api/automation-hub/v3/openapi.yaml": {
        "get": {
          "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
          "operationId": "api_automation_hub_v3_openapi.yaml_get",
          "parameters": [
            {
              "in": "query",
              "name": "lang",
              "schema": {
                "enum": [
                  "en-us",
                  "es",
                  "fr",
                  "ja",
                  "ko",
                  "nl",
                  "zh-hans"
                ],
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/vnd.oai.openapi": {
                  "schema": {
                    "type": "object"
                  }
                },
                "application/yaml": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": ""
            }
          },
          "security": [
            {}
          ],
          "tags": [
            "Api: V3 Openapi.Yaml"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/client-configuration/": {
        "get": {
          "description": "Return configurations for the ansible-galaxy client.",
          "operationId": "api_automation_hub_v3_plugin_ansible_client_configuration_read",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ClientConfigurationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Client-Configuration"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/": {
        "get": {
          "description": "ViewSet for Repository Metadata.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepoMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/": {
        "get": {
          "description": "Unpaginated ViewSet for Collections.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_all_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/CollectionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections All-Collections"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/": {
        "get": {
          "description": "Returns paginated CollectionVersions list.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_all_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections All-Versions"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/": {
        "post": {
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_artifacts_create",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUploadWithDownloadUrl"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Pulp_Ansible: Artifacts Collections V3"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}": {
        "get": {
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_artifacts_download",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Artifacts"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/": {
        "get": {
          "description": "ViewSet for Collections.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_index_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Index"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_index_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Index"
          ]
        },
        "get": {
          "description": "ViewSet for Collections.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_index_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Index"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous update task",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_index_update",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Index"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/": {
        "get": {
          "description": "Returns paginated CollectionVersions list.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_index_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Index Versions"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_index_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Index Versions"
          ]
        },
        "get": {
          "description": "Returns a CollectionVersion object.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_index_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Index Versions"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/": {
        "get": {
          "description": "Returns a CollectionVersion object.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_collections_index_versions_docs_blob_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Collections Index Versions Docs-Blob"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/namespaces/": {
        "get": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_namespaces_list",
          "parameters": [
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "company__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where metadata_sha256 matches value",
              "in": "query",
              "name": "metadata_sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "metadata_sha256__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-avatar_sha256",
                    "-company",
                    "-description",
                    "-email",
                    "-links",
                    "-metadata_sha256",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-resources",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "avatar_sha256",
                    "company",
                    "description",
                    "email",
                    "links",
                    "metadata_sha256",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "resources",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Namespaces"
          ]
        },
        "post": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_namespaces_create",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Namespaces"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/content/{distro_base_path}/namespaces/{name}/": {
        "delete": {
          "description": "Try to remove the Namespace if no Collections under Namespace are present.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_namespaces_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Namespaces"
          ]
        },
        "get": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Namespaces"
          ]
        },
        "patch": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "api_automation_hub_v3_plugin_ansible_content_namespaces_partial_update",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Content Namespaces"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/imports/collections/{task}/": {
        "get": {
          "description": "Returns a CollectionImport object.",
          "operationId": "api_automation_hub_v3_plugin_ansible_imports_collections_read",
          "parameters": [
            {
              "description": "Filter messages since a given timestamp",
              "in": "query",
              "name": "since",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Api: V3 Plugin Ansible Imports Collections"
          ]
        }
      },
      "/api/automation-hub/v3/plugin/ansible/search/collection-versions/": {
        "get": {
          "description": "A viewset for cross-repo searches.",
          "operationId": "api_automation_hub_v3_plugin_ansible_search_collection_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "dependency",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter collectionversions that are in these distrubtion ids.",
              "explode": true,
              "in": "query",
              "name": "distribution",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter collectionversions that are in these base paths.",
              "explode": true,
              "in": "query",
              "name": "distribution_base_path",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_signed",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_created` - by CV created\n* `-pulp_created` - by CV created (descending)\n* `namespace` - by CV namespace\n* `-namespace` - by CV namespace (descending)\n* `name` - by CV name\n* `-name` - by CV name (descending)\n* `version` - by CV version\n* `-version` - by CV version (descending)",
              "explode": false,
              "in": "query",
              "name": "order_by",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pulp_created",
                    "-version",
                    "name",
                    "namespace",
                    "pulp_created",
                    "version"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter collectionversions that are in these repository ids.",
              "explode": true,
              "in": "query",
              "name": "repository",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "repository_label",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter collectionversions that are in these repositories.",
              "explode": true,
              "in": "query",
              "name": "repository_name",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "signed",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version_range",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionSearchListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Search Collection-Versions"
          ]
        },
        "post": {
          "description": "A viewset for cross-repo searches.",
          "operationId": "api_automation_hub_v3_plugin_ansible_search_collection_versions_rebuild",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Api: V3 Plugin Ansible Search Collection-Versions"
          ]
        }
      },
      "/api/automation-hub/v3/tasks/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "_api_automation-hub_v3_tasks_tasks_list",
          "parameters": [
            {
              "description": "Filter results where child_tasks matches value",
              "in": "query",
              "name": "child_tasks",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "created_resources",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "exclusive_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "exclusive_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where finished_at matches value",
              "in": "query",
              "name": "finished_at",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is greater than value",
              "in": "query",
              "name": "finished_at__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is greater than or equal to value",
              "in": "query",
              "name": "finished_at__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is less than value",
              "in": "query",
              "name": "finished_at__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is less than or equal to value",
              "in": "query",
              "name": "finished_at__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where finished_at is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "finished_at__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where logging_cid matches value",
              "in": "query",
              "name": "logging_cid",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where logging_cid contains value",
              "in": "query",
              "name": "logging_cid__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name not equal to value",
              "in": "query",
              "name": "name__ne",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `state` - State\n* `-state` - State (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `logging_cid` - Logging cid\n* `-logging_cid` - Logging cid (descending)\n* `unblocked_at` - Unblocked at\n* `-unblocked_at` - Unblocked at (descending)\n* `started_at` - Started at\n* `-started_at` - Started at (descending)\n* `finished_at` - Finished at\n* `-finished_at` - Finished at (descending)\n* `error` - Error\n* `-error` - Error (descending)\n* `enc_args` - Enc args\n* `-enc_args` - Enc args (descending)\n* `enc_kwargs` - Enc kwargs\n* `-enc_kwargs` - Enc kwargs (descending)\n* `reserved_resources_record` - Reserved resources record\n* `-reserved_resources_record` - Reserved resources record (descending)\n* `versions` - Versions\n* `-versions` - Versions (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-enc_args",
                    "-enc_kwargs",
                    "-error",
                    "-finished_at",
                    "-logging_cid",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-reserved_resources_record",
                    "-started_at",
                    "-state",
                    "-unblocked_at",
                    "-versions",
                    "enc_args",
                    "enc_kwargs",
                    "error",
                    "finished_at",
                    "logging_cid",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "reserved_resources_record",
                    "started_at",
                    "state",
                    "unblocked_at",
                    "versions"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where parent_task matches value",
              "in": "query",
              "name": "parent_task",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "reserved_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "reserved_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "reserved_resources_record",
              "schema": {
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            {
              "in": "query",
              "name": "shared_resources",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "shared_resources__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where started_at matches value",
              "in": "query",
              "name": "started_at",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is greater than value",
              "in": "query",
              "name": "started_at__gt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is greater than or equal to value",
              "in": "query",
              "name": "started_at__gte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is less than value",
              "in": "query",
              "name": "started_at__lt",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is less than or equal to value",
              "in": "query",
              "name": "started_at__lte",
              "schema": {
                "format": "date-time",
                "type": "string"
              }
            },
            {
              "description": "Filter results where started_at is between two comma separated values",
              "explode": false,
              "in": "query",
              "name": "started_at__range",
              "schema": {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where state matches value\n\n* `waiting` - Waiting\n* `skipped` - Skipped\n* `running` - Running\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled\n* `canceling` - Canceling",
              "in": "query",
              "name": "state",
              "schema": {
                "enum": [
                  "canceled",
                  "canceling",
                  "completed",
                  "failed",
                  "running",
                  "skipped",
                  "waiting"
                ],
                "type": "string"
              }
            },
            {
              "description": "Filter results where state is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "state__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where state not equal to value",
              "in": "query",
              "name": "state__ne",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where task_group matches value",
              "in": "query",
              "name": "task_group",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where worker matches value",
              "in": "query",
              "name": "worker",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "Filter results where worker is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "worker__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where worker has a null value",
              "in": "query",
              "name": "worker__isnull",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedTaskSummaryResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "List tasks",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/api/automation-hub/v3/tasks/{pulp_id}/": {
        "get": {
          "description": "A customized named ModelViewSet that knows how to register itself with the Pulp API router.\n\nThis viewset is discoverable by its name.\n\"Normal\" Django Models and Master/Detail models are supported by the ``register_with`` method.\n\nAttributes:\n    lookup_field (str): The name of the field by which an object should be looked up, in\n        addition to any parent lookups if this ViewSet is nested. Defaults to 'pk'\n    endpoint_name (str): The name of the final path segment that should identify the ViewSet's\n        collection endpoint.\n    nest_prefix (str): Optional prefix under which this ViewSet should be nested. This must\n        correspond to the \"parent_prefix\" of a router with rest_framework_nested.NestedMixin.\n        None indicates this ViewSet should not be nested.\n    parent_lookup_kwargs (dict): Optional mapping of key names that would appear in self.kwargs\n        to django model filter expressions that can be used with the corresponding value from\n        self.kwargs, used only by a nested ViewSet to filter based on the parent object's\n        identity.\n    schema (DefaultSchema): The schema class to use by default in a viewset.",
          "operationId": "_api_automation-hub_v3_tasks_{pulp_id}_tasks_read",
          "parameters": [
            {
              "description": "A UUID string identifying this task.",
              "in": "path",
              "name": "pulp_id",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a task",
          "tags": [
            "Tasks"
          ]
        }
      },
      "/pulp/api/v3/ansible/copy/": {
        "post": {
          "description": "Trigger an asynchronous task to copy ansible content from one repository into another, creating a new repository version.",
          "operationId": "copy_content",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Copy"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Copy"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Copy"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Copy content",
          "tags": [
            "Pulp: V3 Ansible Copy"
          ]
        }
      },
      "/pulp/api/{api_path}": {
        "get": {
          "operationId": "pulp_api_get",
          "parameters": [
            {
              "in": "path",
              "name": "api_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp: Api"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/": {
        "get": {
          "description": "Return a response to the \"GET\" action.",
          "operationId": "pulp_ansible_galaxy_default_api_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_read",
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepoMetadataResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/artifacts/collections/": {
        "post": {
          "deprecated": true,
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_artifacts_collections_create",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Pulp_Ansible: Artifacts Collections V3"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/artifacts/collections/{path}/{filename}": {
        "get": {
          "description": "Download collection.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_artifacts_collections_get",
          "parameters": [
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Artifacts Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/collection_versions/all/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collection_versions_all_list",
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collection_Versions All"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/collections/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/collections/all/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_all_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/CollectionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections All"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/": {
        "delete": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections"
          ]
        },
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections"
          ]
        },
        "patch": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/": {
        "delete": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections Versions"
          ]
        },
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_collections_versions_docs_blob_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Collections Versions Docs-Blob"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/imports/collections/{task}/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_imports_collections_read",
          "parameters": [
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Pulp_Ansible: Default Api V3 Imports Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/namespaces/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_namespaces_list",
          "parameters": [
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "company__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where metadata_sha256 matches value",
              "in": "query",
              "name": "metadata_sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "metadata_sha256__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-avatar_sha256",
                    "-company",
                    "-description",
                    "-email",
                    "-links",
                    "-metadata_sha256",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-resources",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "avatar_sha256",
                    "company",
                    "description",
                    "email",
                    "links",
                    "metadata_sha256",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "resources",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Namespaces"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/namespaces/{name}/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Namespaces"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/client-configuration/": {
        "get": {
          "description": "Return configurations for the ansible-galaxy client.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_client_configuration_read",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ClientConfigurationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Client-Configuration"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/": {
        "get": {
          "description": "ViewSet for Repository Metadata.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepoMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/": {
        "get": {
          "description": "Unpaginated ViewSet for Collections.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/CollectionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections All-Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/": {
        "get": {
          "description": "Returns paginated CollectionVersions list.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_all_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections All-Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/": {
        "post": {
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_create",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Pulp_Ansible: Artifacts Collections V3"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}": {
        "get": {
          "description": "Collection download endpoint.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_artifacts_download",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Artifacts"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/": {
        "get": {
          "description": "ViewSet for Collections.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index"
          ]
        },
        "get": {
          "description": "ViewSet for Collections.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous update task",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_update",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/": {
        "get": {
          "description": "Returns paginated CollectionVersions list.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions"
          ]
        },
        "get": {
          "description": "Returns a CollectionVersion object.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/": {
        "get": {
          "description": "Returns a CollectionVersion object.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Collections Index Versions Docs-Blob"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/": {
        "get": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_list",
          "parameters": [
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "company__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where metadata_sha256 matches value",
              "in": "query",
              "name": "metadata_sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "metadata_sha256__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-avatar_sha256",
                    "-company",
                    "-description",
                    "-email",
                    "-links",
                    "-metadata_sha256",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-resources",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "avatar_sha256",
                    "company",
                    "description",
                    "email",
                    "links",
                    "metadata_sha256",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "resources",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"
          ]
        },
        "post": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_create",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/{name}/": {
        "delete": {
          "description": "Try to remove the Namespace if no Collections under Namespace are present.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"
          ]
        },
        "get": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"
          ]
        },
        "patch": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_content_namespaces_partial_update",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Content Namespaces"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/imports/collections/{task}/": {
        "get": {
          "description": "Returns a CollectionImport object.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_imports_collections_read",
          "parameters": [
            {
              "description": "Filter messages since a given timestamp",
              "in": "query",
              "name": "since",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Imports Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/default/api/v3/plugin/ansible/search/collection-versions/": {
        "get": {
          "description": "A viewset for cross-repo searches.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_search_collection_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "dependency",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter collectionversions that are in these distrubtion ids.",
              "explode": true,
              "in": "query",
              "name": "distribution",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter collectionversions that are in these base paths.",
              "explode": true,
              "in": "query",
              "name": "distribution_base_path",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_signed",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_created` - by CV created\n* `-pulp_created` - by CV created (descending)\n* `namespace` - by CV namespace\n* `-namespace` - by CV namespace (descending)\n* `name` - by CV name\n* `-name` - by CV name (descending)\n* `version` - by CV version\n* `-version` - by CV version (descending)",
              "explode": false,
              "in": "query",
              "name": "order_by",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pulp_created",
                    "-version",
                    "name",
                    "namespace",
                    "pulp_created",
                    "version"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter collectionversions that are in these repository ids.",
              "explode": true,
              "in": "query",
              "name": "repository",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "repository_label",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter collectionversions that are in these repositories.",
              "explode": true,
              "in": "query",
              "name": "repository_name",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "signed",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version_range",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionSearchListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Search Collection-Versions"
          ]
        },
        "post": {
          "description": "A viewset for cross-repo searches.",
          "operationId": "pulp_ansible_galaxy_default_api_v3_plugin_ansible_search_collection_versions_rebuild",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Default Api V3 Plugin Ansible Search Collection-Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/": {
        "get": {
          "description": "Return a response to the \"GET\" action.",
          "operationId": "pulp_ansible_galaxy_api_get",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v1/roles/": {
        "get": {
          "description": "APIView for Roles.",
          "operationId": "pulp_ansible_galaxy_api_v1_roles_get",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGalaxyRoleResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V1 Roles"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v1/roles/{role_pk}/versions/": {
        "get": {
          "description": "APIView for Role Versions.",
          "operationId": "api_v1_roles_versions_list",
          "parameters": [
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "role_pk",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGalaxyRoleVersionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V1 Roles Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v2/collection-imports/{task}/": {
        "get": {
          "description": "Returns a CollectionImport object.",
          "operationId": "pulp_ansible_galaxy_api_v2_collection_imports_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter messages since a given timestamp",
              "in": "query",
              "name": "since",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Pulp_Ansible: Api V2 Collection-Imports"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v2/collections/": {
        "get": {
          "description": "View for Collection models.",
          "operationId": "_pulp_ansible_galaxy_{path}_api_v2_collections_pulp_ansible_galaxy_api_v2_collections_get",
          "parameters": [
            {
              "description": "A page number within the paginated result set.",
              "in": "query",
              "name": "page",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGalaxyCollectionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V2 Collections"
          ]
        },
        "post": {
          "deprecated": true,
          "description": "Queues a task that creates a new Collection from an uploaded artifact.",
          "operationId": "pulp_ansible_galaxy_api_v2_collections_post",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GalaxyCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/GalaxyCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/GalaxyCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GalaxyCollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V2 Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/": {
        "get": {
          "description": "Get the detail view of a Collection.",
          "operationId": "_pulp_ansible_galaxy_{path}_api_v2_collections_{namespace}_{name}_pulp_ansible_galaxy_api_v2_collections_get",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GalaxyCollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V2 Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/": {
        "get": {
          "description": "APIView for Collections by namespace/name.",
          "operationId": "api_v2_collection_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A page number within the paginated result set.",
              "in": "query",
              "name": "page",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedGalaxyCollectionVersionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V2 Collections Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v2/collections/{namespace}/{name}/versions/{version}/": {
        "get": {
          "description": "Return a response to the \"GET\" action.",
          "operationId": "pulp_ansible_galaxy_api_v2_collections_versions_get",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V2 Collections Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepoMetadataResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/": {
        "post": {
          "deprecated": true,
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "pulp_ansible_galaxy_api_v3_artifacts_collections_create",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Pulp_Ansible: Artifacts Collections V3"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/artifacts/collections/{path}/{filename}": {
        "get": {
          "description": "Download collection.",
          "operationId": "pulp_ansible_galaxy_api_v3_artifacts_collections_get",
          "parameters": [
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Artifacts Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/collection_versions/all/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collection_versions_all_list",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collection_Versions All"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/collections/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/collections/all/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_all_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/CollectionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections All"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/": {
        "delete": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections"
          ]
        },
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections"
          ]
        },
        "patch": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_update",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/": {
        "delete": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections Versions"
          ]
        },
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/collections/{namespace}/{name}/versions/{version}/docs-blob/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_collections_versions_docs_blob_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Collections Versions Docs-Blob"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/imports/collections/{task}/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_imports_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Pulp_Ansible: Api V3 Imports Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/namespaces/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_namespaces_list",
          "parameters": [
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "company__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where metadata_sha256 matches value",
              "in": "query",
              "name": "metadata_sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "metadata_sha256__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-avatar_sha256",
                    "-company",
                    "-description",
                    "-email",
                    "-links",
                    "-metadata_sha256",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-resources",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "avatar_sha256",
                    "company",
                    "description",
                    "email",
                    "links",
                    "metadata_sha256",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "resources",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Namespaces"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/namespaces/{name}/": {
        "get": {
          "deprecated": true,
          "description": "Legacy v3 endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                  }
                }
              },
              "description": ""
            },
            "302": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Namespaces"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/client-configuration/": {
        "get": {
          "description": "Return configurations for the ansible-galaxy client.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_client_configuration_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ClientConfigurationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Client-Configuration"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/": {
        "get": {
          "description": "ViewSet for Repository Metadata.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RepoMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-collections/": {
        "get": {
          "description": "Unpaginated ViewSet for Collections.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_collections_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/CollectionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections All-Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/all-versions/": {
        "get": {
          "description": "Returns paginated CollectionVersions list.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_all_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/UnpaginatedCollectionVersionResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections All-Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/": {
        "post": {
          "description": "Create an artifact and trigger an asynchronous task to create Collection content from it.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_create",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOneShot"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Upload a collection",
          "tags": [
            "Pulp_Ansible: Artifacts Collections V3"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/artifacts/{filename}": {
        "get": {
          "description": "Collection download endpoint.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_artifacts_download",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Artifacts"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/": {
        "get": {
          "description": "ViewSet for Collections.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_list",
          "parameters": [
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index"
          ]
        },
        "get": {
          "description": "ViewSet for Collections.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index"
          ]
        },
        "patch": {
          "description": "Trigger an asynchronous update task",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_update",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/PatchedCollection"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/": {
        "get": {
          "description": "Returns paginated CollectionVersions list.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_list",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `authors` - Authors\n* `-authors` - Authors (descending)\n* `contents` - Contents\n* `-contents` - Contents (descending)\n* `dependencies` - Dependencies\n* `-dependencies` - Dependencies (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `docs_blob` - Docs blob\n* `-docs_blob` - Docs blob (descending)\n* `manifest` - Manifest\n* `-manifest` - Manifest (descending)\n* `files` - Files\n* `-files` - Files (descending)\n* `documentation` - Documentation\n* `-documentation` - Documentation (descending)\n* `homepage` - Homepage\n* `-homepage` - Homepage (descending)\n* `issues` - Issues\n* `-issues` - Issues (descending)\n* `license` - License\n* `-license` - License (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `namespace` - Namespace\n* `-namespace` - Namespace (descending)\n* `repository` - Repository\n* `-repository` - Repository (descending)\n* `requires_ansible` - Requires ansible\n* `-requires_ansible` - Requires ansible (descending)\n* `version` - Version\n* `-version` - Version (descending)\n* `version_major` - Version major\n* `-version_major` - Version major (descending)\n* `version_minor` - Version minor\n* `-version_minor` - Version minor (descending)\n* `version_patch` - Version patch\n* `-version_patch` - Version patch (descending)\n* `version_prerelease` - Version prerelease\n* `-version_prerelease` - Version prerelease (descending)\n* `is_highest` - Is highest\n* `-is_highest` - Is highest (descending)\n* `search_vector` - Search vector\n* `-search_vector` - Search vector (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-authors",
                    "-contents",
                    "-dependencies",
                    "-description",
                    "-docs_blob",
                    "-documentation",
                    "-files",
                    "-homepage",
                    "-is_highest",
                    "-issues",
                    "-license",
                    "-manifest",
                    "-name",
                    "-namespace",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-repository",
                    "-requires_ansible",
                    "-search_vector",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "-version",
                    "-version_major",
                    "-version_minor",
                    "-version_patch",
                    "-version_prerelease",
                    "authors",
                    "contents",
                    "dependencies",
                    "description",
                    "docs_blob",
                    "documentation",
                    "files",
                    "homepage",
                    "is_highest",
                    "issues",
                    "license",
                    "manifest",
                    "name",
                    "namespace",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "repository",
                    "requires_ansible",
                    "search_vector",
                    "timestamp_of_interest",
                    "upstream_id",
                    "version",
                    "version_major",
                    "version_minor",
                    "version_patch",
                    "version_prerelease"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Minutes Content has been orphaned for. -1 uses ORPHAN_PROTECTION_TIME.",
              "in": "query",
              "name": "orphaned_for",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_added",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Repository Version referenced by HREF",
              "in": "query",
              "name": "repository_version_removed",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where version matches value",
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/": {
        "delete": {
          "description": "Trigger an asynchronous delete task",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions"
          ]
        },
        "get": {
          "description": "Returns a CollectionVersion object.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/collections/index/{namespace}/{name}/versions/{version}/docs-blob/": {
        "get": {
          "description": "Returns a CollectionVersion object.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_collections_index_versions_docs_blob_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionDocsResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Collections Index Versions Docs-Blob"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/": {
        "get": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_list",
          "parameters": [
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company contains value",
              "in": "query",
              "name": "company__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches value",
              "in": "query",
              "name": "company__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "company__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company matches regex value",
              "in": "query",
              "name": "company__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where company starts with value",
              "in": "query",
              "name": "company__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Filter results where metadata_sha256 matches value",
              "in": "query",
              "name": "metadata_sha256",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where metadata_sha256 is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "metadata_sha256__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__contains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name contains value",
              "in": "query",
              "name": "name__icontains",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches value",
              "in": "query",
              "name": "name__iexact",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name is in a comma-separated list of values",
              "explode": false,
              "in": "query",
              "name": "name__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__iregex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__istartswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name matches regex value",
              "in": "query",
              "name": "name__regex",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter results where name starts with value",
              "in": "query",
              "name": "name__startswith",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_id` - Pulp id\n* `-pulp_id` - Pulp id (descending)\n* `pulp_created` - Pulp created\n* `-pulp_created` - Pulp created (descending)\n* `pulp_last_updated` - Pulp last updated\n* `-pulp_last_updated` - Pulp last updated (descending)\n* `pulp_type` - Pulp type\n* `-pulp_type` - Pulp type (descending)\n* `upstream_id` - Upstream id\n* `-upstream_id` - Upstream id (descending)\n* `timestamp_of_interest` - Timestamp of interest\n* `-timestamp_of_interest` - Timestamp of interest (descending)\n* `name` - Name\n* `-name` - Name (descending)\n* `company` - Company\n* `-company` - Company (descending)\n* `email` - Email\n* `-email` - Email (descending)\n* `description` - Description\n* `-description` - Description (descending)\n* `resources` - Resources\n* `-resources` - Resources (descending)\n* `links` - Links\n* `-links` - Links (descending)\n* `avatar_sha256` - Avatar sha256\n* `-avatar_sha256` - Avatar sha256 (descending)\n* `metadata_sha256` - Metadata sha256\n* `-metadata_sha256` - Metadata sha256 (descending)\n* `pk` - Pk\n* `-pk` - Pk (descending)",
              "explode": false,
              "in": "query",
              "name": "ordering",
              "schema": {
                "items": {
                  "enum": [
                    "-avatar_sha256",
                    "-company",
                    "-description",
                    "-email",
                    "-links",
                    "-metadata_sha256",
                    "-name",
                    "-pk",
                    "-pulp_created",
                    "-pulp_id",
                    "-pulp_last_updated",
                    "-pulp_type",
                    "-resources",
                    "-timestamp_of_interest",
                    "-upstream_id",
                    "avatar_sha256",
                    "company",
                    "description",
                    "email",
                    "links",
                    "metadata_sha256",
                    "name",
                    "pk",
                    "pulp_created",
                    "pulp_id",
                    "pulp_last_updated",
                    "pulp_type",
                    "resources",
                    "timestamp_of_interest",
                    "upstream_id"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_href__in",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Multiple values may be separated by commas.",
              "explode": false,
              "in": "query",
              "name": "pulp_id__in",
              "schema": {
                "items": {
                  "format": "uuid",
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Paginatedansible.AnsibleNamespaceMetadataResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"
          ]
        },
        "post": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_create",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadata"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/content/{distro_base_path}/namespaces/{name}/": {
        "delete": {
          "description": "Try to remove the Namespace if no Collections under Namespace are present.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_delete",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"
          ]
        },
        "get": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_read",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ansible.AnsibleNamespaceMetadataResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"
          ]
        },
        "patch": {
          "description": "Provides the authentication and permission classes from settings.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_content_namespaces_partial_update",
          "parameters": [
            {
              "in": "path",
              "name": "distro_base_path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Patchedansible.AnsibleNamespaceMetadata"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncOperationResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Content Namespaces"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/imports/collections/{task}/": {
        "get": {
          "description": "Returns a CollectionImport object.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_imports_collections_read",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter messages since a given timestamp",
              "in": "query",
              "name": "since",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A unique value identifying this collection import.",
              "in": "path",
              "name": "task",
              "required": true,
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionImportDetailResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "summary": "Inspect a collection import",
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Imports Collections"
          ]
        }
      },
      "/pulp_ansible/galaxy/{path}/api/v3/plugin/ansible/search/collection-versions/": {
        "get": {
          "description": "A viewset for cross-repo searches.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_search_collection_versions_list",
          "parameters": [
            {
              "in": "query",
              "name": "dependency",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter collectionversions that are in these distrubtion ids.",
              "explode": true,
              "in": "query",
              "name": "distribution",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter collectionversions that are in these base paths.",
              "explode": true,
              "in": "query",
              "name": "distribution_base_path",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_deprecated",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_highest",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "is_signed",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "name": "keywords",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Number of results to return per page.",
              "in": "query",
              "name": "limit",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "namespace",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "in": "query",
              "name": "offset",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Ordering\n\n* `pulp_created` - by CV created\n* `-pulp_created` - by CV created (descending)\n* `namespace` - by CV namespace\n* `-namespace` - by CV namespace (descending)\n* `name` - by CV name\n* `-name` - by CV name (descending)\n* `version` - by CV version\n* `-version` - by CV version (descending)",
              "explode": false,
              "in": "query",
              "name": "order_by",
              "schema": {
                "items": {
                  "enum": [
                    "-name",
                    "-namespace",
                    "-pulp_created",
                    "-version",
                    "name",
                    "namespace",
                    "pulp_created",
                    "version"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "q",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter collectionversions that are in these repository ids.",
              "explode": true,
              "in": "query",
              "name": "repository",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "description": "Filter labels by search string",
              "in": "query",
              "name": "repository_label",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter collectionversions that are in these repositories.",
              "explode": true,
              "in": "query",
              "name": "repository_name",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "style": "form"
            },
            {
              "in": "query",
              "name": "repository_version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "signed",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "Filter by comma separate list of tags that must all be matched",
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "version_range",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "A list of fields to include in the response.",
              "in": "query",
              "name": "fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            {
              "description": "A list of fields to exclude from the response.",
              "in": "query",
              "name": "exclude_fields",
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedCollectionVersionSearchListResponseList"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Search Collection-Versions"
          ]
        },
        "post": {
          "description": "A viewset for cross-repo searches.",
          "operationId": "pulp_ansible_galaxy_api_v3_plugin_ansible_search_collection_versions_rebuild",
          "parameters": [
            {
              "in": "path",
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionVersionSearchList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CollectionVersionSearchListResponse"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "Pulp_Ansible: Api V3 Plugin Ansible Search Collection-Versions"
          ]
        }
      },
      "/token/": {
        "get": {
          "description": "Handles GET requests for the /token/ endpoint.",
          "operationId": "token_get",
          "responses": {
            "200": {
              "description": "No response body"
            }
          },
          "tags": [
            "Token"
          ]
        }
      }
    },
    "servers": [
      {
        "url": "http://automation-hub-backend-cwa.automation-hub-prod.svc.cluster.local:8000/"
      }
    ]
  }
}